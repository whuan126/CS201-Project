/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
std::pair<const char *, uint64_t> PPCInstPrinter::getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "#EH_SjLj_Setup\t\0"
  /* 16 */ "bdzla+ \0"
  /* 24 */ "bdnzla+ \0"
  /* 33 */ "bdza+ \0"
  /* 40 */ "bdnza+ \0"
  /* 48 */ "bdzl+ \0"
  /* 55 */ "bdnzl+ \0"
  /* 63 */ "bdz+ \0"
  /* 69 */ "bdnz+ \0"
  /* 76 */ "bcl 20, 31, \0"
  /* 89 */ "bctrl\n\tld 2, \0"
  /* 103 */ "bctrl\n\tlwz 2, \0"
  /* 118 */ "bc 12, \0"
  /* 126 */ "bcl 12, \0"
  /* 135 */ "bclrl 12, \0"
  /* 146 */ "bcctrl 12, \0"
  /* 158 */ "bclr 12, \0"
  /* 168 */ "bcctr 12, \0"
  /* 179 */ "bc 4, \0"
  /* 186 */ "bcl 4, \0"
  /* 194 */ "bclrl 4, \0"
  /* 204 */ "bcctrl 4, \0"
  /* 215 */ "bclr 4, \0"
  /* 224 */ "bcctr 4, \0"
  /* 234 */ "mtspr 256, \0"
  /* 246 */ "bdzla- \0"
  /* 254 */ "bdnzla- \0"
  /* 263 */ "bdza- \0"
  /* 270 */ "bdnza- \0"
  /* 278 */ "bdzl- \0"
  /* 285 */ "bdnzl- \0"
  /* 293 */ "bdz- \0"
  /* 299 */ "bdnz- \0"
  /* 306 */ "vcmpneb. \0"
  /* 316 */ "vcmpgtsb. \0"
  /* 327 */ "extsb. \0"
  /* 335 */ "vcmpequb. \0"
  /* 346 */ "fsub. \0"
  /* 353 */ "fmsub. \0"
  /* 361 */ "fnmsub. \0"
  /* 370 */ "vcmpgtub. \0"
  /* 381 */ "vcmpnezb. \0"
  /* 392 */ "addc. \0"
  /* 399 */ "andc. \0"
  /* 406 */ "tabortdc. \0"
  /* 417 */ "subfc. \0"
  /* 425 */ "subic. \0"
  /* 433 */ "addic. \0"
  /* 441 */ "rldic. \0"
  /* 449 */ "bcdtrunc. \0"
  /* 460 */ "bcdutrunc. \0"
  /* 472 */ "orc. \0"
  /* 478 */ "tabortwc. \0"
  /* 489 */ "srad. \0"
  /* 496 */ "fadd. \0"
  /* 503 */ "fmadd. \0"
  /* 511 */ "fnmadd. \0"
  /* 520 */ "mulhd. \0"
  /* 528 */ "fcfid. \0"
  /* 536 */ "fctid. \0"
  /* 544 */ "mulld. \0"
  /* 552 */ "sld. \0"
  /* 558 */ "nand. \0"
  /* 565 */ "tend. \0"
  /* 572 */ "srd. \0"
  /* 578 */ "vcmpgtsd. \0"
  /* 589 */ "vcmpequd. \0"
  /* 600 */ "vcmpgtud. \0"
  /* 611 */ "divd. \0"
  /* 618 */ "cntlzd. \0"
  /* 627 */ "cnttzd. \0"
  /* 636 */ "adde. \0"
  /* 643 */ "divde. \0"
  /* 651 */ "slbfee. \0"
  /* 660 */ "subfe. \0"
  /* 668 */ "addme. \0"
  /* 676 */ "subfme. \0"
  /* 685 */ "fre. \0"
  /* 691 */ "frsqrte. \0"
  /* 701 */ "paste. \0"
  /* 709 */ "divwe. \0"
  /* 717 */ "addze. \0"
  /* 725 */ "subfze. \0"
  /* 734 */ "subf. \0"
  /* 741 */ "mtfsf. \0"
  /* 749 */ "fneg. \0"
  /* 756 */ "vcmpneh. \0"
  /* 766 */ "vcmpgtsh. \0"
  /* 777 */ "extsh. \0"
  /* 785 */ "vcmpequh. \0"
  /* 796 */ "vcmpgtuh. \0"
  /* 807 */ "vcmpnezh. \0"
  /* 818 */ "tabortdci. \0"
  /* 830 */ "tabortwci. \0"
  /* 842 */ "sradi. \0"
  /* 850 */ "clrlsldi. \0"
  /* 861 */ "extldi. \0"
  /* 870 */ "andi. \0"
  /* 877 */ "clrrdi. \0"
  /* 886 */ "insrdi. \0"
  /* 895 */ "rotrdi. \0"
  /* 904 */ "extrdi. \0"
  /* 913 */ "mtfsfi. \0"
  /* 922 */ "extswsli. \0"
  /* 933 */ "rldimi. \0"
  /* 942 */ "rlwimi. \0"
  /* 951 */ "srawi. \0"
  /* 959 */ "clrlslwi. \0"
  /* 970 */ "inslwi. \0"
  /* 979 */ "extlwi. \0"
  /* 988 */ "clrrwi. \0"
  /* 997 */ "insrwi. \0"
  /* 1006 */ "rotrwi. \0"
  /* 1015 */ "extrwi. \0"
  /* 1024 */ "vstribl. \0"
  /* 1034 */ "rldcl. \0"
  /* 1042 */ "rldicl. \0"
  /* 1051 */ "fsel. \0"
  /* 1058 */ "vstrihl. \0"
  /* 1068 */ "fmul. \0"
  /* 1075 */ "treclaim. \0"
  /* 1086 */ "frim. \0"
  /* 1093 */ "rlwinm. \0"
  /* 1102 */ "rlwnm. \0"
  /* 1110 */ "bcdcfn. \0"
  /* 1119 */ "bcdcpsgn. \0"
  /* 1130 */ "fcpsgn. \0"
  /* 1139 */ "bcdsetsgn. \0"
  /* 1151 */ "tbegin. \0"
  /* 1160 */ "frin. \0"
  /* 1167 */ "bcdctn. \0"
  /* 1176 */ "addco. \0"
  /* 1184 */ "subfco. \0"
  /* 1193 */ "addo. \0"
  /* 1200 */ "mulldo. \0"
  /* 1209 */ "divdo. \0"
  /* 1217 */ "addeo. \0"
  /* 1225 */ "divdeo. \0"
  /* 1234 */ "subfeo. \0"
  /* 1243 */ "addmeo. \0"
  /* 1252 */ "subfmeo. \0"
  /* 1262 */ "divweo. \0"
  /* 1271 */ "addzeo. \0"
  /* 1280 */ "subfzeo. \0"
  /* 1290 */ "subfo. \0"
  /* 1298 */ "nego. \0"
  /* 1305 */ "divduo. \0"
  /* 1314 */ "divdeuo. \0"
  /* 1324 */ "divweuo. \0"
  /* 1334 */ "divwuo. \0"
  /* 1343 */ "mullwo. \0"
  /* 1352 */ "divwo. \0"
  /* 1360 */ "xvcmpgedp. \0"
  /* 1372 */ "xvcmpeqdp. \0"
  /* 1384 */ "xvcmpgtdp. \0"
  /* 1396 */ "vcmpbfp. \0"
  /* 1406 */ "vcmpgefp. \0"
  /* 1417 */ "vcmpeqfp. \0"
  /* 1428 */ "vcmpgtfp. \0"
  /* 1439 */ "frip. \0"
  /* 1446 */ "xvcmpgesp. \0"
  /* 1458 */ "xvcmpeqsp. \0"
  /* 1470 */ "frsp. \0"
  /* 1477 */ "xvcmpgtsp. \0"
  /* 1489 */ "icblq. \0"
  /* 1497 */ "bcdcfsq. \0"
  /* 1507 */ "bcdctsq. \0"
  /* 1517 */ "vcmpgtsq. \0"
  /* 1528 */ "vcmpequq. \0"
  /* 1539 */ "vcmpgtuq. \0"
  /* 1550 */ "vstribr. \0"
  /* 1560 */ "rldcr. \0"
  /* 1568 */ "rldicr. \0"
  /* 1577 */ "vstrihr. \0"
  /* 1587 */ "fmr. \0"
  /* 1593 */ "nor. \0"
  /* 1599 */ "xor. \0"
  /* 1605 */ "bcdsr. \0"
  /* 1613 */ "tsr. \0"
  /* 1619 */ "fabs. \0"
  /* 1626 */ "fnabs. \0"
  /* 1634 */ "fsubs. \0"
  /* 1642 */ "fmsubs. \0"
  /* 1651 */ "fnmsubs. \0"
  /* 1661 */ "bcds. \0"
  /* 1668 */ "fadds. \0"
  /* 1676 */ "fmadds. \0"
  /* 1685 */ "fnmadds. \0"
  /* 1695 */ "fcfids. \0"
  /* 1704 */ "fres. \0"
  /* 1711 */ "frsqrtes. \0"
  /* 1722 */ "mffs. \0"
  /* 1729 */ "andis. \0"
  /* 1737 */ "fmuls. \0"
  /* 1745 */ "fsqrts. \0"
  /* 1754 */ "bcdus. \0"
  /* 1762 */ "fcfidus. \0"
  /* 1772 */ "fdivs. \0"
  /* 1780 */ "tabort. \0"
  /* 1789 */ "fsqrt. \0"
  /* 1797 */ "mulhdu. \0"
  /* 1806 */ "fcfidu. \0"
  /* 1815 */ "fctidu. \0"
  /* 1824 */ "divdu. \0"
  /* 1832 */ "divdeu. \0"
  /* 1841 */ "divweu. \0"
  /* 1850 */ "mulhwu. \0"
  /* 1859 */ "fctiwu. \0"
  /* 1868 */ "divwu. \0"
  /* 1876 */ "fdiv. \0"
  /* 1883 */ "eqv. \0"
  /* 1889 */ "sraw. \0"
  /* 1896 */ "vcmpnew. \0"
  /* 1906 */ "mulhw. \0"
  /* 1914 */ "fctiw. \0"
  /* 1922 */ "mullw. \0"
  /* 1930 */ "slw. \0"
  /* 1936 */ "srw. \0"
  /* 1942 */ "vcmpgtsw. \0"
  /* 1953 */ "extsw. \0"
  /* 1961 */ "vcmpequw. \0"
  /* 1972 */ "vcmpgtuw. \0"
  /* 1983 */ "divw. \0"
  /* 1990 */ "vcmpnezw. \0"
  /* 2001 */ "cntlzw. \0"
  /* 2010 */ "cnttzw. \0"
  /* 2019 */ "stbcx. \0"
  /* 2027 */ "stdcx. \0"
  /* 2035 */ "sthcx. \0"
  /* 2043 */ "stwcx. \0"
  /* 2051 */ "tlbsx. \0"
  /* 2059 */ "fctidz. \0"
  /* 2068 */ "bcdcfz. \0"
  /* 2077 */ "friz. \0"
  /* 2084 */ "bcdctz. \0"
  /* 2093 */ "fctiduz. \0"
  /* 2103 */ "fctiwuz. \0"
  /* 2113 */ "fctiwz. \0"
  /* 2122 */ "mtfsb0 \0"
  /* 2130 */ "mtfsb1 \0"
  /* 2138 */ "#ATOMIC_CMP_SWAP_I32 \0"
  /* 2160 */ "pmxvbf16ger2 \0"
  /* 2174 */ "pmxvf16ger2 \0"
  /* 2187 */ "pmxvi16ger2 \0"
  /* 2200 */ "pmxvi8ger4 \0"
  /* 2212 */ "#ATOMIC_CMP_SWAP_I16 \0"
  /* 2234 */ "xvcvspbf16 \0"
  /* 2246 */ "#TC_RETURNa8 \0"
  /* 2260 */ "#TC_RETURNd8 \0"
  /* 2274 */ "#TC_RETURNr8 \0"
  /* 2288 */ "pmxvi4ger8 \0"
  /* 2300 */ "#BUILD_UACC \0"
  /* 2313 */ "#ADJCALLSTACKDOWN \0"
  /* 2332 */ "#ADJCALLSTACKUP \0"
  /* 2349 */ "#TC_RETURNa \0"
  /* 2362 */ "evmhegsmfaa \0"
  /* 2375 */ "evmhogsmfaa \0"
  /* 2388 */ "evmwsmfaa \0"
  /* 2399 */ "evmwssfaa \0"
  /* 2410 */ "evmhegsmiaa \0"
  /* 2423 */ "evmhogsmiaa \0"
  /* 2436 */ "evmwsmiaa \0"
  /* 2447 */ "evmhegumiaa \0"
  /* 2460 */ "evmhogumiaa \0"
  /* 2473 */ "evmwumiaa \0"
  /* 2484 */ "dcba \0"
  /* 2490 */ "bca \0"
  /* 2495 */ "evmhesmfa \0"
  /* 2506 */ "evmwhsmfa \0"
  /* 2517 */ "evmhosmfa \0"
  /* 2528 */ "evmwsmfa \0"
  /* 2538 */ "evmhessfa \0"
  /* 2549 */ "evmwhssfa \0"
  /* 2560 */ "evmhossfa \0"
  /* 2571 */ "evmwssfa \0"
  /* 2581 */ "plha \0"
  /* 2587 */ "evmhesmia \0"
  /* 2598 */ "evmwhsmia \0"
  /* 2609 */ "evmhosmia \0"
  /* 2620 */ "evmwsmia \0"
  /* 2630 */ "evmheumia \0"
  /* 2641 */ "evmwhumia \0"
  /* 2652 */ "evmwlumia \0"
  /* 2663 */ "evmhoumia \0"
  /* 2674 */ "evmwumia \0"
  /* 2684 */ "bla \0"
  /* 2689 */ "bcla \0"
  /* 2695 */ "bdzla \0"
  /* 2702 */ "bdnzla \0"
  /* 2710 */ "evmra \0"
  /* 2717 */ "plwa \0"
  /* 2723 */ "mtvsrwa \0"
  /* 2732 */ "bdza \0"
  /* 2738 */ "bdnza \0"
  /* 2745 */ "vsrab \0"
  /* 2752 */ "rfebb \0"
  /* 2759 */ "vcntmbb \0"
  /* 2768 */ "xvtlsbb \0"
  /* 2777 */ "vclzlsbb \0"
  /* 2787 */ "vctzlsbb \0"
  /* 2797 */ "vcmpneb \0"
  /* 2806 */ "vmrghb \0"
  /* 2814 */ "xxspltib \0"
  /* 2824 */ "vmrglb \0"
  /* 2832 */ "vclrlb \0"
  /* 2840 */ "vrlb \0"
  /* 2846 */ "vslb \0"
  /* 2852 */ "vpmsumb \0"
  /* 2861 */ "vgnb \0"
  /* 2867 */ "cmpb \0"
  /* 2873 */ "cmpeqb \0"
  /* 2881 */ "cmprb \0"
  /* 2888 */ "vclrrb \0"
  /* 2896 */ "vsrb \0"
  /* 2902 */ "vmulesb \0"
  /* 2911 */ "vavgsb \0"
  /* 2919 */ "vupkhsb \0"
  /* 2928 */ "vspltisb \0"
  /* 2938 */ "vupklsb \0"
  /* 2947 */ "vminsb \0"
  /* 2955 */ "vmulosb \0"
  /* 2964 */ "vcmpgtsb \0"
  /* 2974 */ "evextsb \0"
  /* 2983 */ "vmaxsb \0"
  /* 2991 */ "setb \0"
  /* 2997 */ "mftb \0"
  /* 3003 */ "vspltb \0"
  /* 3011 */ "vpopcntb \0"
  /* 3021 */ "vinsertb \0"
  /* 3031 */ "pstb \0"
  /* 3037 */ "vabsdub \0"
  /* 3046 */ "vmuleub \0"
  /* 3055 */ "vavgub \0"
  /* 3063 */ "vminub \0"
  /* 3071 */ "vmuloub \0"
  /* 3080 */ "vcmpequb \0"
  /* 3090 */ "efdsub \0"
  /* 3098 */ "fsub \0"
  /* 3104 */ "fmsub \0"
  /* 3111 */ "fnmsub \0"
  /* 3119 */ "efssub \0"
  /* 3127 */ "evfssub \0"
  /* 3136 */ "vextractub \0"
  /* 3148 */ "vcmpgtub \0"
  /* 3158 */ "vmaxub \0"
  /* 3166 */ "xxblendvb \0"
  /* 3177 */ "vcmpnezb \0"
  /* 3187 */ "vclzb \0"
  /* 3194 */ "vctzb \0"
  /* 3201 */ "setnbc \0"
  /* 3209 */ "setbc \0"
  /* 3216 */ "xxmfacc \0"
  /* 3225 */ "xxmtacc \0"
  /* 3234 */ "addc \0"
  /* 3240 */ "xxlandc \0"
  /* 3249 */ "crandc \0"
  /* 3257 */ "evandc \0"
  /* 3265 */ "subfc \0"
  /* 3272 */ "subic \0"
  /* 3279 */ "addic \0"
  /* 3286 */ "rldic \0"
  /* 3293 */ "subfic \0"
  /* 3301 */ "xsrdpic \0"
  /* 3310 */ "xvrdpic \0"
  /* 3319 */ "xvrspic \0"
  /* 3328 */ "icblc \0"
  /* 3335 */ "brinc \0"
  /* 3342 */ "sync \0"
  /* 3348 */ "xxlorc \0"
  /* 3356 */ "crorc \0"
  /* 3363 */ "evorc \0"
  /* 3370 */ "sc \0"
  /* 3374 */ "vextsb2d \0"
  /* 3384 */ "vextsh2d \0"
  /* 3394 */ "vextsw2d \0"
  /* 3404 */ "#TC_RETURNd \0"
  /* 3417 */ "vshasigmad \0"
  /* 3429 */ "vsrad \0"
  /* 3436 */ "vgbbd \0"
  /* 3443 */ "vcntmbd \0"
  /* 3452 */ "vprtybd \0"
  /* 3461 */ "efdadd \0"
  /* 3469 */ "fadd \0"
  /* 3475 */ "fmadd \0"
  /* 3482 */ "fnmadd \0"
  /* 3490 */ "efsadd \0"
  /* 3498 */ "evfsadd \0"
  /* 3507 */ "evldd \0"
  /* 3514 */ "mtvsrdd \0"
  /* 3523 */ "evstdd \0"
  /* 3531 */ "vcfuged \0"
  /* 3540 */ "efscfd \0"
  /* 3548 */ "plfd \0"
  /* 3554 */ "pstfd \0"
  /* 3561 */ "vnegd \0"
  /* 3568 */ "maddhd \0"
  /* 3576 */ "mulhd \0"
  /* 3583 */ "fcfid \0"
  /* 3590 */ "efdcfsid \0"
  /* 3600 */ "fctid \0"
  /* 3607 */ "efdcfuid \0"
  /* 3617 */ "tlbld \0"
  /* 3624 */ "maddld \0"
  /* 3632 */ "vmulld \0"
  /* 3640 */ "cmpld \0"
  /* 3647 */ "mfvsrld \0"
  /* 3656 */ "vrld \0"
  /* 3662 */ "vsld \0"
  /* 3668 */ "vbpermd \0"
  /* 3677 */ "vpmsumd \0"
  /* 3686 */ "xxland \0"
  /* 3694 */ "xxlnand \0"
  /* 3703 */ "crnand \0"
  /* 3711 */ "evnand \0"
  /* 3719 */ "crand \0"
  /* 3726 */ "evand \0"
  /* 3733 */ "vpdepd \0"
  /* 3741 */ "cmpd \0"
  /* 3747 */ "xxbrd \0"
  /* 3754 */ "mtmsrd \0"
  /* 3762 */ "mfvsrd \0"
  /* 3770 */ "mtvsrd \0"
  /* 3778 */ "vmodsd \0"
  /* 3786 */ "vmulesd \0"
  /* 3795 */ "vdivesd \0"
  /* 3804 */ "vmulhsd \0"
  /* 3813 */ "vminsd \0"
  /* 3821 */ "vinsd \0"
  /* 3828 */ "vmulosd \0"
  /* 3837 */ "vcmpgtsd \0"
  /* 3847 */ "vdivsd \0"
  /* 3855 */ "vmaxsd \0"
  /* 3863 */ "plxsd \0"
  /* 3870 */ "pstxsd \0"
  /* 3878 */ "vextractd \0"
  /* 3889 */ "vpopcntd \0"
  /* 3899 */ "vinsertd \0"
  /* 3909 */ "pstd \0"
  /* 3915 */ "vpextd \0"
  /* 3923 */ "vmsumcud \0"
  /* 3933 */ "vmodud \0"
  /* 3941 */ "vmuleud \0"
  /* 3950 */ "vdiveud \0"
  /* 3959 */ "vmulhud \0"
  /* 3968 */ "vminud \0"
  /* 3976 */ "vmuloud \0"
  /* 3985 */ "vcmpequd \0"
  /* 3995 */ "vcmpgtud \0"
  /* 4005 */ "vdivud \0"
  /* 4013 */ "vmaxud \0"
  /* 4021 */ "xxblendvd \0"
  /* 4032 */ "divd \0"
  /* 4038 */ "vclzd \0"
  /* 4045 */ "cntlzd \0"
  /* 4053 */ "vctzd \0"
  /* 4060 */ "cnttzd \0"
  /* 4068 */ "mfbhrbe \0"
  /* 4077 */ "mffsce \0"
  /* 4085 */ "adde \0"
  /* 4091 */ "divde \0"
  /* 4098 */ "slbmfee \0"
  /* 4107 */ "wrtee \0"
  /* 4114 */ "subfe \0"
  /* 4121 */ "evlwhe \0"
  /* 4129 */ "evstwhe \0"
  /* 4138 */ "slbie \0"
  /* 4145 */ "tlbie \0"
  /* 4152 */ "addme \0"
  /* 4159 */ "subfme \0"
  /* 4167 */ "tlbre \0"
  /* 4174 */ "fre \0"
  /* 4179 */ "slbmte \0"
  /* 4187 */ "frsqrte \0"
  /* 4196 */ "paste \0"
  /* 4203 */ "tlbwe \0"
  /* 4210 */ "divwe \0"
  /* 4217 */ "evstwwe \0"
  /* 4226 */ "addze \0"
  /* 4233 */ "subfze \0"
  /* 4241 */ "dcbf \0"
  /* 4247 */ "subf \0"
  /* 4253 */ "evmhesmf \0"
  /* 4263 */ "evmwhsmf \0"
  /* 4273 */ "evmhosmf \0"
  /* 4283 */ "evmwsmf \0"
  /* 4292 */ "mcrf \0"
  /* 4298 */ "mfocrf \0"
  /* 4306 */ "mtocrf \0"
  /* 4314 */ "mtcrf \0"
  /* 4321 */ "efdcfsf \0"
  /* 4330 */ "efscfsf \0"
  /* 4339 */ "evfscfsf \0"
  /* 4349 */ "mtfsf \0"
  /* 4356 */ "evmhessf \0"
  /* 4366 */ "evmwhssf \0"
  /* 4376 */ "evmhossf \0"
  /* 4386 */ "evmwssf \0"
  /* 4395 */ "efdctsf \0"
  /* 4404 */ "efsctsf \0"
  /* 4413 */ "evfsctsf \0"
  /* 4423 */ "efdcfuf \0"
  /* 4432 */ "efscfuf \0"
  /* 4441 */ "evfscfuf \0"
  /* 4451 */ "efdctuf \0"
  /* 4460 */ "efsctuf \0"
  /* 4469 */ "slbieg \0"
  /* 4477 */ "efdneg \0"
  /* 4485 */ "fneg \0"
  /* 4491 */ "efsneg \0"
  /* 4499 */ "evfsneg \0"
  /* 4508 */ "evneg \0"
  /* 4515 */ "vsrah \0"
  /* 4522 */ "vcntmbh \0"
  /* 4531 */ "evldh \0"
  /* 4538 */ "evstdh \0"
  /* 4546 */ "vcmpneh \0"
  /* 4555 */ "vmrghh \0"
  /* 4563 */ "vmrglh \0"
  /* 4571 */ "vrlh \0"
  /* 4577 */ "vslh \0"
  /* 4583 */ "vpmsumh \0"
  /* 4592 */ "xxbrh \0"
  /* 4599 */ "vsrh \0"
  /* 4605 */ "vmulesh \0"
  /* 4614 */ "vavgsh \0"
  /* 4622 */ "vupkhsh \0"
  /* 4631 */ "vspltish \0"
  /* 4641 */ "vupklsh \0"
  /* 4650 */ "vminsh \0"
  /* 4658 */ "vmulosh \0"
  /* 4667 */ "vcmpgtsh \0"
  /* 4677 */ "evextsh \0"
  /* 4686 */ "vmaxsh \0"
  /* 4694 */ "vsplth \0"
  /* 4702 */ "vpopcnth \0"
  /* 4712 */ "vinserth \0"
  /* 4722 */ "psth \0"
  /* 4728 */ "vabsduh \0"
  /* 4737 */ "vmuleuh \0"
  /* 4746 */ "vavguh \0"
  /* 4754 */ "vminuh \0"
  /* 4762 */ "vmulouh \0"
  /* 4771 */ "vcmpequh \0"
  /* 4781 */ "vextractuh \0"
  /* 4793 */ "vcmpgtuh \0"
  /* 4803 */ "vmaxuh \0"
  /* 4811 */ "xxblendvh \0"
  /* 4822 */ "vcmpnezh \0"
  /* 4832 */ "vclzh \0"
  /* 4839 */ "vctzh \0"
  /* 4846 */ "dcbi \0"
  /* 4852 */ "icbi \0"
  /* 4858 */ "vsldbi \0"
  /* 4866 */ "vsrdbi \0"
  /* 4874 */ "subi \0"
  /* 4880 */ "dccci \0"
  /* 4887 */ "iccci \0"
  /* 4894 */ "sradi \0"
  /* 4901 */ "paddi \0"
  /* 4908 */ "cmpldi \0"
  /* 4916 */ "clrlsldi \0"
  /* 4926 */ "extldi \0"
  /* 4934 */ "xxpermdi \0"
  /* 4944 */ "cmpdi \0"
  /* 4951 */ "clrrdi \0"
  /* 4959 */ "insrdi \0"
  /* 4967 */ "rotrdi \0"
  /* 4975 */ "extrdi \0"
  /* 4983 */ "tdi \0"
  /* 4988 */ "wrteei \0"
  /* 4996 */ "mtfsfi \0"
  /* 5004 */ "evsplatfi \0"
  /* 5015 */ "evmergehi \0"
  /* 5026 */ "evmergelohi \0"
  /* 5039 */ "tlbli \0"
  /* 5046 */ "mulli \0"
  /* 5053 */ "pli \0"
  /* 5058 */ "extswsli \0"
  /* 5068 */ "mtvsrbmi \0"
  /* 5078 */ "vrldmi \0"
  /* 5086 */ "rldimi \0"
  /* 5094 */ "rlwimi \0"
  /* 5102 */ "vrlqmi \0"
  /* 5110 */ "evmhesmi \0"
  /* 5120 */ "evmwhsmi \0"
  /* 5130 */ "evmhosmi \0"
  /* 5140 */ "evmwsmi \0"
  /* 5149 */ "evmheumi \0"
  /* 5159 */ "evmwhumi \0"
  /* 5169 */ "evmwlumi \0"
  /* 5179 */ "evmhoumi \0"
  /* 5189 */ "evmwumi \0"
  /* 5198 */ "vrlwmi \0"
  /* 5206 */ "mffscrni \0"
  /* 5216 */ "mffscdrni \0"
  /* 5227 */ "vsldoi \0"
  /* 5235 */ "xsrdpi \0"
  /* 5243 */ "xvrdpi \0"
  /* 5251 */ "xsrqpi \0"
  /* 5259 */ "xvrspi \0"
  /* 5267 */ "xori \0"
  /* 5273 */ "efdcfsi \0"
  /* 5282 */ "efscfsi \0"
  /* 5291 */ "evfscfsi \0"
  /* 5301 */ "efdctsi \0"
  /* 5310 */ "efsctsi \0"
  /* 5319 */ "evfsctsi \0"
  /* 5329 */ "evsplati \0"
  /* 5339 */ "efdcfui \0"
  /* 5348 */ "efscfui \0"
  /* 5357 */ "evfscfui \0"
  /* 5367 */ "efdctui \0"
  /* 5376 */ "efsctui \0"
  /* 5385 */ "evfsctui \0"
  /* 5395 */ "srawi \0"
  /* 5402 */ "xxsldwi \0"
  /* 5411 */ "cmplwi \0"
  /* 5419 */ "evrlwi \0"
  /* 5427 */ "clrlslwi \0"
  /* 5437 */ "inslwi \0"
  /* 5445 */ "evslwi \0"
  /* 5453 */ "extlwi \0"
  /* 5461 */ "cmpwi \0"
  /* 5468 */ "clrrwi \0"
  /* 5476 */ "insrwi \0"
  /* 5484 */ "rotrwi \0"
  /* 5492 */ "extrwi \0"
  /* 5500 */ "lswi \0"
  /* 5506 */ "stswi \0"
  /* 5513 */ "twi \0"
  /* 5518 */ "tcheck \0"
  /* 5526 */ "xxeval \0"
  /* 5534 */ "vstribl \0"
  /* 5543 */ "bcl \0"
  /* 5548 */ "rldcl \0"
  /* 5555 */ "rldicl \0"
  /* 5563 */ "tlbiel \0"
  /* 5571 */ "fsel \0"
  /* 5577 */ "isel \0"
  /* 5583 */ "vsel \0"
  /* 5589 */ "xxsel \0"
  /* 5596 */ "dcbfl \0"
  /* 5603 */ "vstrihl \0"
  /* 5612 */ "lxvll \0"
  /* 5619 */ "stxvll \0"
  /* 5627 */ "bclrl \0"
  /* 5634 */ "bcctrl \0"
  /* 5642 */ "mffsl \0"
  /* 5649 */ "lvsl \0"
  /* 5655 */ "efdmul \0"
  /* 5663 */ "fmul \0"
  /* 5669 */ "efsmul \0"
  /* 5677 */ "evfsmul \0"
  /* 5686 */ "lxvl \0"
  /* 5692 */ "stxvl \0"
  /* 5699 */ "lvxl \0"
  /* 5705 */ "stvxl \0"
  /* 5712 */ "dcbzl \0"
  /* 5719 */ "bdzl \0"
  /* 5725 */ "bdnzl \0"
  /* 5732 */ "vexpandbm \0"
  /* 5743 */ "vmsummbm \0"
  /* 5753 */ "mtvsrbm \0"
  /* 5762 */ "vextractbm \0"
  /* 5774 */ "vsububm \0"
  /* 5783 */ "vaddubm \0"
  /* 5792 */ "vmsumubm \0"
  /* 5802 */ "xxgenpcvbm \0"
  /* 5814 */ "vexpanddm \0"
  /* 5825 */ "mtvsrdm \0"
  /* 5834 */ "vextractdm \0"
  /* 5846 */ "vsubudm \0"
  /* 5855 */ "vaddudm \0"
  /* 5864 */ "vmsumudm \0"
  /* 5874 */ "xxgenpcvdm \0"
  /* 5886 */ "vclzdm \0"
  /* 5894 */ "cntlzdm \0"
  /* 5903 */ "vctzdm \0"
  /* 5911 */ "cnttzdm \0"
  /* 5920 */ "vexpandhm \0"
  /* 5931 */ "mtvsrhm \0"
  /* 5940 */ "vmsumshm \0"
  /* 5950 */ "vextracthm \0"
  /* 5962 */ "vsubuhm \0"
  /* 5971 */ "vmladduhm \0"
  /* 5982 */ "vadduhm \0"
  /* 5991 */ "vmsumuhm \0"
  /* 6001 */ "xxgenpcvhm \0"
  /* 6013 */ "vrfim \0"
  /* 6020 */ "xsrdpim \0"
  /* 6029 */ "xvrdpim \0"
  /* 6038 */ "xvrspim \0"
  /* 6047 */ "frim \0"
  /* 6053 */ "vrldnm \0"
  /* 6061 */ "rlwinm \0"
  /* 6069 */ "vrlqnm \0"
  /* 6077 */ "vrlwnm \0"
  /* 6085 */ "vexpandqm \0"
  /* 6096 */ "mtvsrqm \0"
  /* 6105 */ "vextractqm \0"
  /* 6117 */ "vsubuqm \0"
  /* 6126 */ "vadduqm \0"
  /* 6135 */ "vsubeuqm \0"
  /* 6145 */ "vaddeuqm \0"
  /* 6155 */ "vperm \0"
  /* 6162 */ "xxperm \0"
  /* 6170 */ "vpkudum \0"
  /* 6179 */ "vpkuhum \0"
  /* 6188 */ "vpkuwum \0"
  /* 6197 */ "vexpandwm \0"
  /* 6208 */ "mtvsrwm \0"
  /* 6217 */ "vextractwm \0"
  /* 6229 */ "vsubuwm \0"
  /* 6238 */ "vadduwm \0"
  /* 6247 */ "vmuluwm \0"
  /* 6256 */ "xxgenpcvwm \0"
  /* 6268 */ "evmhegsmfan \0"
  /* 6281 */ "evmhogsmfan \0"
  /* 6294 */ "evmwsmfan \0"
  /* 6305 */ "evmwssfan \0"
  /* 6316 */ "evmhegsmian \0"
  /* 6329 */ "evmhogsmian \0"
  /* 6342 */ "evmwsmian \0"
  /* 6353 */ "evmhegumian \0"
  /* 6366 */ "evmhogumian \0"
  /* 6379 */ "evmwumian \0"
  /* 6390 */ "fcpsgn \0"
  /* 6398 */ "vrfin \0"
  /* 6405 */ "frin \0"
  /* 6411 */ "mfsrin \0"
  /* 6419 */ "mtsrin \0"
  /* 6427 */ "pmxvbf16ger2nn \0"
  /* 6443 */ "pmxvf16ger2nn \0"
  /* 6458 */ "pmxvf32gernn \0"
  /* 6472 */ "pmxvf64gernn \0"
  /* 6486 */ "pmxvbf16ger2pn \0"
  /* 6502 */ "pmxvf16ger2pn \0"
  /* 6517 */ "xscvspdpn \0"
  /* 6528 */ "pmxvf32gerpn \0"
  /* 6542 */ "pmxvf64gerpn \0"
  /* 6556 */ "xvcvbf16spn \0"
  /* 6569 */ "xscvdpspn \0"
  /* 6580 */ "darn \0"
  /* 6586 */ "mffscrn \0"
  /* 6595 */ "mffscdrn \0"
  /* 6605 */ "addco \0"
  /* 6612 */ "subfco \0"
  /* 6620 */ "addo \0"
  /* 6626 */ "mulldo \0"
  /* 6634 */ "divdo \0"
  /* 6641 */ "addeo \0"
  /* 6648 */ "divdeo \0"
  /* 6656 */ "subfeo \0"
  /* 6664 */ "addmeo \0"
  /* 6672 */ "subfmeo \0"
  /* 6681 */ "divweo \0"
  /* 6689 */ "addzeo \0"
  /* 6697 */ "subfzeo \0"
  /* 6706 */ "subfo \0"
  /* 6713 */ "nego \0"
  /* 6719 */ "evstwho \0"
  /* 6728 */ "evmergelo \0"
  /* 6739 */ "evmergehilo \0"
  /* 6752 */ "vslo \0"
  /* 6758 */ "xscvqpdpo \0"
  /* 6769 */ "fcmpo \0"
  /* 6776 */ "xsnmsubqpo \0"
  /* 6788 */ "xsmsubqpo \0"
  /* 6799 */ "xssubqpo \0"
  /* 6809 */ "xsnmaddqpo \0"
  /* 6821 */ "xsmaddqpo \0"
  /* 6832 */ "xsaddqpo \0"
  /* 6842 */ "xsmulqpo \0"
  /* 6852 */ "xssqrtqpo \0"
  /* 6863 */ "xsdivqpo \0"
  /* 6873 */ "vsro \0"
  /* 6879 */ "divduo \0"
  /* 6887 */ "divdeuo \0"
  /* 6896 */ "divweuo \0"
  /* 6905 */ "divwuo \0"
  /* 6913 */ "mullwo \0"
  /* 6921 */ "divwo \0"
  /* 6928 */ "evstwwo \0"
  /* 6937 */ "xsnmsubadp \0"
  /* 6949 */ "xvnmsubadp \0"
  /* 6961 */ "xsmsubadp \0"
  /* 6972 */ "xvmsubadp \0"
  /* 6983 */ "xsnmaddadp \0"
  /* 6995 */ "xvnmaddadp \0"
  /* 7007 */ "xsmaddadp \0"
  /* 7018 */ "xvmaddadp \0"
  /* 7029 */ "xssubdp \0"
  /* 7038 */ "xvsubdp \0"
  /* 7047 */ "xststdcdp \0"
  /* 7058 */ "xvtstdcdp \0"
  /* 7069 */ "xsmincdp \0"
  /* 7079 */ "xsmaxcdp \0"
  /* 7089 */ "xsadddp \0"
  /* 7098 */ "xvadddp \0"
  /* 7107 */ "xscvsxddp \0"
  /* 7118 */ "xvcvsxddp \0"
  /* 7129 */ "xscvuxddp \0"
  /* 7140 */ "xvcvuxddp \0"
  /* 7151 */ "xscmpgedp \0"
  /* 7162 */ "xvcmpgedp \0"
  /* 7173 */ "xsredp \0"
  /* 7181 */ "xvredp \0"
  /* 7189 */ "xsrsqrtedp \0"
  /* 7201 */ "xvrsqrtedp \0"
  /* 7213 */ "xsnegdp \0"
  /* 7222 */ "xvnegdp \0"
  /* 7231 */ "xsxsigdp \0"
  /* 7241 */ "xvxsigdp \0"
  /* 7251 */ "xxspltidp \0"
  /* 7262 */ "xsminjdp \0"
  /* 7272 */ "xsmaxjdp \0"
  /* 7282 */ "xsmuldp \0"
  /* 7291 */ "xvmuldp \0"
  /* 7300 */ "xsnmsubmdp \0"
  /* 7312 */ "xvnmsubmdp \0"
  /* 7324 */ "xsmsubmdp \0"
  /* 7335 */ "xvmsubmdp \0"
  /* 7346 */ "xsnmaddmdp \0"
  /* 7358 */ "xvnmaddmdp \0"
  /* 7370 */ "xsmaddmdp \0"
  /* 7381 */ "xvmaddmdp \0"
  /* 7392 */ "xscpsgndp \0"
  /* 7403 */ "xvcpsgndp \0"
  /* 7414 */ "xsmindp \0"
  /* 7423 */ "xvmindp \0"
  /* 7432 */ "xscmpodp \0"
  /* 7442 */ "xscvhpdp \0"
  /* 7452 */ "xscvqpdp \0"
  /* 7462 */ "xscvspdp \0"
  /* 7472 */ "xvcvspdp \0"
  /* 7482 */ "xsiexpdp \0"
  /* 7492 */ "xviexpdp \0"
  /* 7502 */ "xscmpexpdp \0"
  /* 7514 */ "xsxexpdp \0"
  /* 7524 */ "xvxexpdp \0"
  /* 7534 */ "xscmpeqdp \0"
  /* 7545 */ "xvcmpeqdp \0"
  /* 7556 */ "xsnabsdp \0"
  /* 7566 */ "xvnabsdp \0"
  /* 7576 */ "xsabsdp \0"
  /* 7585 */ "xvabsdp \0"
  /* 7594 */ "xscmpgtdp \0"
  /* 7605 */ "xvcmpgtdp \0"
  /* 7616 */ "xssqrtdp \0"
  /* 7626 */ "xstsqrtdp \0"
  /* 7637 */ "xvtsqrtdp \0"
  /* 7648 */ "xvsqrtdp \0"
  /* 7658 */ "xscmpudp \0"
  /* 7668 */ "xsdivdp \0"
  /* 7677 */ "xstdivdp \0"
  /* 7687 */ "xvtdivdp \0"
  /* 7697 */ "xvdivdp \0"
  /* 7706 */ "xvcvsxwdp \0"
  /* 7717 */ "xvcvuxwdp \0"
  /* 7728 */ "xsmaxdp \0"
  /* 7737 */ "xvmaxdp \0"
  /* 7746 */ "dcbfep \0"
  /* 7754 */ "icbiep \0"
  /* 7762 */ "dcbzlep \0"
  /* 7771 */ "dcbtep \0"
  /* 7779 */ "dcbstep \0"
  /* 7788 */ "dcbtstep \0"
  /* 7798 */ "dcbzep \0"
  /* 7806 */ "vcmpbfp \0"
  /* 7815 */ "vnmsubfp \0"
  /* 7825 */ "vsubfp \0"
  /* 7833 */ "vmaddfp \0"
  /* 7842 */ "vaddfp \0"
  /* 7850 */ "vlogefp \0"
  /* 7859 */ "vcmpgefp \0"
  /* 7869 */ "vrefp \0"
  /* 7876 */ "vexptefp \0"
  /* 7886 */ "vrsqrtefp \0"
  /* 7897 */ "vminfp \0"
  /* 7905 */ "vcmpeqfp \0"
  /* 7915 */ "vcmpgtfp \0"
  /* 7925 */ "vmaxfp \0"
  /* 7933 */ "xscvdphp \0"
  /* 7943 */ "xvcvsphp \0"
  /* 7953 */ "vrfip \0"
  /* 7960 */ "xsrdpip \0"
  /* 7969 */ "xvrdpip \0"
  /* 7978 */ "xvrspip \0"
  /* 7987 */ "frip \0"
  /* 7993 */ "dcbflp \0"
  /* 8001 */ "pmxvbf16ger2np \0"
  /* 8017 */ "pmxvf16ger2np \0"
  /* 8032 */ "pmxvf32gernp \0"
  /* 8046 */ "pmxvf64gernp \0"
  /* 8060 */ "pmxvbf16ger2pp \0"
  /* 8076 */ "pmxvf16ger2pp \0"
  /* 8091 */ "pmxvi16ger2pp \0"
  /* 8106 */ "pmxvi8ger4pp \0"
  /* 8120 */ "pmxvi4ger8pp \0"
  /* 8134 */ "pmxvf32gerpp \0"
  /* 8148 */ "pmxvf64gerpp \0"
  /* 8162 */ "pmxvi16ger2spp \0"
  /* 8178 */ "pmxvi8ger4spp \0"
  /* 8193 */ "xsnmsubqp \0"
  /* 8204 */ "xsmsubqp \0"
  /* 8214 */ "xssubqp \0"
  /* 8223 */ "xststdcqp \0"
  /* 8234 */ "xsnmaddqp \0"
  /* 8245 */ "xsmaddqp \0"
  /* 8255 */ "xsaddqp \0"
  /* 8264 */ "xscvsdqp \0"
  /* 8274 */ "xscvudqp \0"
  /* 8284 */ "xsnegqp \0"
  /* 8293 */ "xsxsigqp \0"
  /* 8303 */ "xsmulqp \0"
  /* 8312 */ "xscpsgnqp \0"
  /* 8323 */ "xscmpoqp \0"
  /* 8333 */ "xscvdpqp \0"
  /* 8343 */ "xsiexpqp \0"
  /* 8353 */ "xscmpexpqp \0"
  /* 8365 */ "xsxexpqp \0"
  /* 8375 */ "xscvsqqp \0"
  /* 8385 */ "xscvuqqp \0"
  /* 8395 */ "xsnabsqp \0"
  /* 8405 */ "xsabsqp \0"
  /* 8414 */ "xssqrtqp \0"
  /* 8424 */ "xscmpuqp \0"
  /* 8434 */ "xsdivqp \0"
  /* 8443 */ "xsnmsubasp \0"
  /* 8455 */ "xvnmsubasp \0"
  /* 8467 */ "xsmsubasp \0"
  /* 8478 */ "xvmsubasp \0"
  /* 8489 */ "xsnmaddasp \0"
  /* 8501 */ "xvnmaddasp \0"
  /* 8513 */ "xsmaddasp \0"
  /* 8524 */ "xvmaddasp \0"
  /* 8535 */ "xssubsp \0"
  /* 8544 */ "xvsubsp \0"
  /* 8553 */ "xststdcsp \0"
  /* 8564 */ "xvtstdcsp \0"
  /* 8575 */ "xsaddsp \0"
  /* 8584 */ "xvaddsp \0"
  /* 8593 */ "xscvsxdsp \0"
  /* 8604 */ "xvcvsxdsp \0"
  /* 8615 */ "xscvuxdsp \0"
  /* 8626 */ "xvcvuxdsp \0"
  /* 8637 */ "xvcmpgesp \0"
  /* 8648 */ "xsresp \0"
  /* 8656 */ "xvresp \0"
  /* 8664 */ "xsrsqrtesp \0"
  /* 8676 */ "xvrsqrtesp \0"
  /* 8688 */ "xvnegsp \0"
  /* 8697 */ "xvxsigsp \0"
  /* 8707 */ "xsmulsp \0"
  /* 8716 */ "xvmulsp \0"
  /* 8725 */ "xsnmsubmsp \0"
  /* 8737 */ "xvnmsubmsp \0"
  /* 8749 */ "xsmsubmsp \0"
  /* 8760 */ "xvmsubmsp \0"
  /* 8771 */ "xsnmaddmsp \0"
  /* 8783 */ "xvnmaddmsp \0"
  /* 8795 */ "xsmaddmsp \0"
  /* 8806 */ "xvmaddmsp \0"
  /* 8817 */ "xvcpsgnsp \0"
  /* 8828 */ "xvminsp \0"
  /* 8837 */ "xscvdpsp \0"
  /* 8847 */ "xvcvdpsp \0"
  /* 8857 */ "xvcvhpsp \0"
  /* 8867 */ "xviexpsp \0"
  /* 8877 */ "xvxexpsp \0"
  /* 8887 */ "xvcmpeqsp \0"
  /* 8898 */ "frsp \0"
  /* 8904 */ "xsrsp \0"
  /* 8911 */ "xvnabssp \0"
  /* 8921 */ "xvabssp \0"
  /* 8930 */ "plxssp \0"
  /* 8938 */ "pstxssp \0"
  /* 8947 */ "xvcmpgtsp \0"
  /* 8958 */ "xssqrtsp \0"
  /* 8968 */ "xvtsqrtsp \0"
  /* 8979 */ "xvsqrtsp \0"
  /* 8989 */ "xsdivsp \0"
  /* 8998 */ "xvtdivsp \0"
  /* 9008 */ "xvdivsp \0"
  /* 9017 */ "xvcvsxwsp \0"
  /* 9028 */ "xvcvuxwsp \0"
  /* 9039 */ "xvmaxsp \0"
  /* 9048 */ "plxvp \0"
  /* 9055 */ "pstxvp \0"
  /* 9063 */ "xsrqpxp \0"
  /* 9072 */ "vextsd2q \0"
  /* 9082 */ "vsraq \0"
  /* 9089 */ "vprtybq \0"
  /* 9098 */ "efdcmpeq \0"
  /* 9108 */ "efscmpeq \0"
  /* 9118 */ "evfscmpeq \0"
  /* 9129 */ "evcmpeq \0"
  /* 9138 */ "efdtsteq \0"
  /* 9148 */ "efststeq \0"
  /* 9158 */ "evfststeq \0"
  /* 9169 */ "vrlq \0"
  /* 9175 */ "vslq \0"
  /* 9181 */ "vbpermq \0"
  /* 9190 */ "xxbrq \0"
  /* 9197 */ "vsrq \0"
  /* 9203 */ "vmodsq \0"
  /* 9211 */ "vdivesq \0"
  /* 9220 */ "vcmpsq \0"
  /* 9228 */ "vcmpgtsq \0"
  /* 9238 */ "vdivsq \0"
  /* 9246 */ "vmul10uq \0"
  /* 9256 */ "vmul10cuq \0"
  /* 9267 */ "vsubcuq \0"
  /* 9276 */ "vaddcuq \0"
  /* 9285 */ "vmul10ecuq \0"
  /* 9297 */ "vsubecuq \0"
  /* 9307 */ "vaddecuq \0"
  /* 9317 */ "vmoduq \0"
  /* 9325 */ "vmul10euq \0"
  /* 9336 */ "vdiveuq \0"
  /* 9345 */ "vcmpuq \0"
  /* 9353 */ "vcmpequq \0"
  /* 9363 */ "vcmpgtuq \0"
  /* 9373 */ "vdivuq \0"
  /* 9381 */ "#TC_RETURNr \0"
  /* 9394 */ "mbar \0"
  /* 9400 */ "vstribr \0"
  /* 9409 */ "setnbcr \0"
  /* 9418 */ "setbcr \0"
  /* 9426 */ "mfdcr \0"
  /* 9433 */ "rldcr \0"
  /* 9440 */ "mtdcr \0"
  /* 9447 */ "mfcr \0"
  /* 9453 */ "rldicr \0"
  /* 9461 */ "mfvscr \0"
  /* 9469 */ "mtvscr \0"
  /* 9477 */ "pmxvf32ger \0"
  /* 9489 */ "pmxvf64ger \0"
  /* 9501 */ "vncipher \0"
  /* 9511 */ "vcipher \0"
  /* 9520 */ "vstrihr \0"
  /* 9529 */ "bclr \0"
  /* 9535 */ "mflr \0"
  /* 9541 */ "mtlr \0"
  /* 9547 */ "fmr \0"
  /* 9552 */ "mfpmr \0"
  /* 9559 */ "mtpmr \0"
  /* 9566 */ "vpermr \0"
  /* 9574 */ "xxpermr \0"
  /* 9583 */ "xxlor \0"
  /* 9590 */ "xxlnor \0"
  /* 9598 */ "crnor \0"
  /* 9605 */ "evnor \0"
  /* 9612 */ "cror \0"
  /* 9618 */ "evor \0"
  /* 9624 */ "xxlxor \0"
  /* 9632 */ "vpermxor \0"
  /* 9642 */ "crxor \0"
  /* 9649 */ "evxor \0"
  /* 9656 */ "mfspr \0"
  /* 9663 */ "mtspr \0"
  /* 9670 */ "mfsr \0"
  /* 9676 */ "mfmsr \0"
  /* 9683 */ "mtmsr \0"
  /* 9690 */ "mtsr \0"
  /* 9696 */ "lvsr \0"
  /* 9702 */ "bcctr \0"
  /* 9709 */ "mfctr \0"
  /* 9716 */ "mtctr \0"
  /* 9723 */ "pmxvi16ger2s \0"
  /* 9737 */ "efdabs \0"
  /* 9745 */ "fabs \0"
  /* 9751 */ "efdnabs \0"
  /* 9760 */ "fnabs \0"
  /* 9767 */ "efsnabs \0"
  /* 9776 */ "evfsnabs \0"
  /* 9786 */ "efsabs \0"
  /* 9794 */ "evfsabs \0"
  /* 9803 */ "evabs \0"
  /* 9810 */ "vsum4sbs \0"
  /* 9820 */ "vsubsbs \0"
  /* 9829 */ "vaddsbs \0"
  /* 9838 */ "vsum4ubs \0"
  /* 9848 */ "vsububs \0"
  /* 9857 */ "vaddubs \0"
  /* 9866 */ "fsubs \0"
  /* 9873 */ "fmsubs \0"
  /* 9881 */ "fnmsubs \0"
  /* 9890 */ "fadds \0"
  /* 9897 */ "fmadds \0"
  /* 9905 */ "fnmadds \0"
  /* 9914 */ "fcfids \0"
  /* 9922 */ "dcbtds \0"
  /* 9930 */ "dcbtstds \0"
  /* 9940 */ "xscvdpsxds \0"
  /* 9952 */ "xvcvdpsxds \0"
  /* 9964 */ "xvcvspsxds \0"
  /* 9976 */ "xscvdpuxds \0"
  /* 9988 */ "xvcvdpuxds \0"
  /* 10000 */ "xvcvspuxds \0"
  /* 10012 */ "fres \0"
  /* 10018 */ "frsqrtes \0"
  /* 10028 */ "efdcfs \0"
  /* 10036 */ "mffs \0"
  /* 10042 */ "plfs \0"
  /* 10048 */ "mcrfs \0"
  /* 10055 */ "pstfs \0"
  /* 10062 */ "vsum4shs \0"
  /* 10072 */ "vsubshs \0"
  /* 10081 */ "vmhaddshs \0"
  /* 10092 */ "vmhraddshs \0"
  /* 10104 */ "vaddshs \0"
  /* 10113 */ "vmsumshs \0"
  /* 10123 */ "vsubuhs \0"
  /* 10132 */ "vadduhs \0"
  /* 10141 */ "vmsumuhs \0"
  /* 10151 */ "subis \0"
  /* 10158 */ "subpcis \0"
  /* 10167 */ "addpcis \0"
  /* 10176 */ "addis \0"
  /* 10183 */ "lis \0"
  /* 10188 */ "xoris \0"
  /* 10195 */ "evsrwis \0"
  /* 10204 */ "icbtls \0"
  /* 10212 */ "fmuls \0"
  /* 10219 */ "evlwhos \0"
  /* 10228 */ "dcbfps \0"
  /* 10236 */ "dcbstps \0"
  /* 10245 */ "vpksdss \0"
  /* 10254 */ "vpkshss \0"
  /* 10263 */ "vpkswss \0"
  /* 10272 */ "evcmpgts \0"
  /* 10282 */ "evcmplts \0"
  /* 10292 */ "fsqrts \0"
  /* 10300 */ "fcfidus \0"
  /* 10309 */ "vpksdus \0"
  /* 10318 */ "vpkudus \0"
  /* 10327 */ "vpkshus \0"
  /* 10336 */ "vpkuhus \0"
  /* 10345 */ "vpkswus \0"
  /* 10354 */ "vpkuwus \0"
  /* 10363 */ "fdivs \0"
  /* 10370 */ "evsrws \0"
  /* 10378 */ "mtvsrws \0"
  /* 10387 */ "vsum2sws \0"
  /* 10397 */ "vsubsws \0"
  /* 10406 */ "vaddsws \0"
  /* 10415 */ "vsumsws \0"
  /* 10424 */ "vsubuws \0"
  /* 10433 */ "vadduws \0"
  /* 10442 */ "evdivws \0"
  /* 10451 */ "xscvdpsxws \0"
  /* 10463 */ "xvcvdpsxws \0"
  /* 10475 */ "xvcvspsxws \0"
  /* 10487 */ "xscvdpuxws \0"
  /* 10499 */ "xvcvdpuxws \0"
  /* 10511 */ "xvcvspuxws \0"
  /* 10523 */ "vctsxs \0"
  /* 10531 */ "vctuxs \0"
  /* 10539 */ "ldat \0"
  /* 10545 */ "stdat \0"
  /* 10552 */ "evlhhesplat \0"
  /* 10565 */ "evlwhsplat \0"
  /* 10577 */ "evlhhossplat \0"
  /* 10591 */ "evlhhousplat \0"
  /* 10605 */ "evlwwsplat \0"
  /* 10617 */ "lwat \0"
  /* 10623 */ "stwat \0"
  /* 10630 */ "dcbt \0"
  /* 10636 */ "icbt \0"
  /* 10642 */ "dcbtct \0"
  /* 10650 */ "dcbtstct \0"
  /* 10660 */ "efdcmpgt \0"
  /* 10670 */ "efscmpgt \0"
  /* 10680 */ "evfscmpgt \0"
  /* 10691 */ "efdtstgt \0"
  /* 10701 */ "efststgt \0"
  /* 10711 */ "evfststgt \0"
  /* 10722 */ "wait \0"
  /* 10728 */ "efdcmplt \0"
  /* 10738 */ "efscmplt \0"
  /* 10748 */ "evfscmplt \0"
  /* 10759 */ "efdtstlt \0"
  /* 10769 */ "efststlt \0"
  /* 10779 */ "evfststlt \0"
  /* 10790 */ "fsqrt \0"
  /* 10797 */ "ftsqrt \0"
  /* 10805 */ "paste_last \0"
  /* 10817 */ "vncipherlast \0"
  /* 10831 */ "vcipherlast \0"
  /* 10844 */ "dcbst \0"
  /* 10851 */ "dst \0"
  /* 10856 */ "copy_first \0"
  /* 10868 */ "dcbtst \0"
  /* 10876 */ "dstst \0"
  /* 10883 */ "dcbtt \0"
  /* 10890 */ "dstt \0"
  /* 10896 */ "dcbtstt \0"
  /* 10905 */ "dststt \0"
  /* 10913 */ "lhau \0"
  /* 10919 */ "stbu \0"
  /* 10925 */ "lfdu \0"
  /* 10931 */ "stfdu \0"
  /* 10938 */ "maddhdu \0"
  /* 10947 */ "mulhdu \0"
  /* 10955 */ "fcfidu \0"
  /* 10963 */ "fctidu \0"
  /* 10971 */ "ldu \0"
  /* 10976 */ "stdu \0"
  /* 10982 */ "divdu \0"
  /* 10989 */ "divdeu \0"
  /* 10997 */ "divweu \0"
  /* 11005 */ "sthu \0"
  /* 11011 */ "evsrwiu \0"
  /* 11020 */ "evlwhou \0"
  /* 11029 */ "fcmpu \0"
  /* 11036 */ "lfsu \0"
  /* 11042 */ "stfsu \0"
  /* 11049 */ "evcmpgtu \0"
  /* 11059 */ "evcmpltu \0"
  /* 11069 */ "mulhwu \0"
  /* 11077 */ "fctiwu \0"
  /* 11085 */ "evsrwu \0"
  /* 11093 */ "stwu \0"
  /* 11099 */ "evdivwu \0"
  /* 11108 */ "lbzu \0"
  /* 11114 */ "lhzu \0"
  /* 11120 */ "lwzu \0"
  /* 11126 */ "slbmfev \0"
  /* 11135 */ "efddiv \0"
  /* 11143 */ "fdiv \0"
  /* 11149 */ "efsdiv \0"
  /* 11157 */ "evfsdiv \0"
  /* 11166 */ "ftdiv \0"
  /* 11173 */ "vslv \0"
  /* 11179 */ "xxleqv \0"
  /* 11187 */ "creqv \0"
  /* 11194 */ "eveqv \0"
  /* 11201 */ "vsrv \0"
  /* 11207 */ "plxv \0"
  /* 11213 */ "pstxv \0"
  /* 11220 */ "vextsb2w \0"
  /* 11230 */ "vextsh2w \0"
  /* 11240 */ "evmhesmfaaw \0"
  /* 11253 */ "evmhosmfaaw \0"
  /* 11266 */ "evmhessfaaw \0"
  /* 11279 */ "evmhossfaaw \0"
  /* 11292 */ "evaddsmiaaw \0"
  /* 11305 */ "evmhesmiaaw \0"
  /* 11318 */ "evsubfsmiaaw \0"
  /* 11332 */ "evmwlsmiaaw \0"
  /* 11345 */ "evmhosmiaaw \0"
  /* 11358 */ "evaddumiaaw \0"
  /* 11371 */ "evmheumiaaw \0"
  /* 11384 */ "evsubfumiaaw \0"
  /* 11398 */ "evmwlumiaaw \0"
  /* 11411 */ "evmhoumiaaw \0"
  /* 11424 */ "evaddssiaaw \0"
  /* 11437 */ "evmhessiaaw \0"
  /* 11450 */ "evsubfssiaaw \0"
  /* 11464 */ "evmwlssiaaw \0"
  /* 11477 */ "evmhossiaaw \0"
  /* 11490 */ "evaddusiaaw \0"
  /* 11503 */ "evmheusiaaw \0"
  /* 11516 */ "evsubfusiaaw \0"
  /* 11530 */ "evmwlusiaaw \0"
  /* 11543 */ "evmhousiaaw \0"
  /* 11556 */ "vshasigmaw \0"
  /* 11568 */ "vsraw \0"
  /* 11575 */ "vcntmbw \0"
  /* 11584 */ "vprtybw \0"
  /* 11593 */ "evaddw \0"
  /* 11601 */ "evldw \0"
  /* 11608 */ "evrndw \0"
  /* 11616 */ "evstdw \0"
  /* 11624 */ "vmrgew \0"
  /* 11632 */ "vcmpnew \0"
  /* 11641 */ "evsubfw \0"
  /* 11650 */ "evsubifw \0"
  /* 11660 */ "vnegw \0"
  /* 11667 */ "vmrghw \0"
  /* 11675 */ "xxmrghw \0"
  /* 11684 */ "mulhw \0"
  /* 11691 */ "evaddiw \0"
  /* 11700 */ "fctiw \0"
  /* 11707 */ "xxspltiw \0"
  /* 11717 */ "vmrglw \0"
  /* 11725 */ "xxmrglw \0"
  /* 11734 */ "mullw \0"
  /* 11741 */ "cmplw \0"
  /* 11748 */ "evrlw \0"
  /* 11755 */ "evslw \0"
  /* 11762 */ "lmw \0"
  /* 11767 */ "stmw \0"
  /* 11773 */ "vpmsumw \0"
  /* 11782 */ "evmhesmfanw \0"
  /* 11795 */ "evmhosmfanw \0"
  /* 11808 */ "evmhessfanw \0"
  /* 11821 */ "evmhossfanw \0"
  /* 11834 */ "evmhesmianw \0"
  /* 11847 */ "evmwlsmianw \0"
  /* 11860 */ "evmhosmianw \0"
  /* 11873 */ "evmheumianw \0"
  /* 11886 */ "evmwlumianw \0"
  /* 11899 */ "evmhoumianw \0"
  /* 11912 */ "evmhessianw \0"
  /* 11925 */ "evmwlssianw \0"
  /* 11938 */ "evmhossianw \0"
  /* 11951 */ "evmheusianw \0"
  /* 11964 */ "evmwlusianw \0"
  /* 11977 */ "evmhousianw \0"
  /* 11990 */ "vmrgow \0"
  /* 11998 */ "cmpw \0"
  /* 12004 */ "xxbrw \0"
  /* 12011 */ "vsrw \0"
  /* 12017 */ "vmodsw \0"
  /* 12025 */ "vmulesw \0"
  /* 12034 */ "vdivesw \0"
  /* 12043 */ "vavgsw \0"
  /* 12051 */ "vupkhsw \0"
  /* 12060 */ "vmulhsw \0"
  /* 12069 */ "vspltisw \0"
  /* 12079 */ "vupklsw \0"
  /* 12088 */ "evcntlsw \0"
  /* 12098 */ "vminsw \0"
  /* 12106 */ "vinsw \0"
  /* 12113 */ "vmulosw \0"
  /* 12122 */ "vcmpgtsw \0"
  /* 12132 */ "extsw \0"
  /* 12139 */ "vdivsw \0"
  /* 12147 */ "vmaxsw \0"
  /* 12155 */ "vspltw \0"
  /* 12163 */ "xxspltw \0"
  /* 12172 */ "vpopcntw \0"
  /* 12182 */ "vinsertw \0"
  /* 12192 */ "xxinsertw \0"
  /* 12203 */ "pstw \0"
  /* 12209 */ "vsubcuw \0"
  /* 12218 */ "vaddcuw \0"
  /* 12227 */ "vmoduw \0"
  /* 12235 */ "vabsduw \0"
  /* 12244 */ "vmuleuw \0"
  /* 12253 */ "vdiveuw \0"
  /* 12262 */ "vavguw \0"
  /* 12270 */ "vmulhuw \0"
  /* 12279 */ "vminuw \0"
  /* 12287 */ "vmulouw \0"
  /* 12296 */ "vcmpequw \0"
  /* 12306 */ "vextractuw \0"
  /* 12318 */ "xxextractuw \0"
  /* 12331 */ "vcmpgtuw \0"
  /* 12341 */ "vdivuw \0"
  /* 12349 */ "vmaxuw \0"
  /* 12357 */ "xxblendvw \0"
  /* 12368 */ "divw \0"
  /* 12374 */ "vcmpnezw \0"
  /* 12384 */ "vclzw \0"
  /* 12391 */ "evcntlzw \0"
  /* 12401 */ "vctzw \0"
  /* 12408 */ "cnttzw \0"
  /* 12416 */ "lxvd2x \0"
  /* 12424 */ "stxvd2x \0"
  /* 12433 */ "lxvw4x \0"
  /* 12441 */ "stxvw4x \0"
  /* 12450 */ "lxvb16x \0"
  /* 12459 */ "stxvb16x \0"
  /* 12469 */ "lxvh8x \0"
  /* 12477 */ "stxvh8x \0"
  /* 12486 */ "lhax \0"
  /* 12492 */ "tlbivax \0"
  /* 12501 */ "lfiwax \0"
  /* 12509 */ "lxsiwax \0"
  /* 12518 */ "lwax \0"
  /* 12524 */ "lvebx \0"
  /* 12531 */ "stvebx \0"
  /* 12539 */ "stxsibx \0"
  /* 12548 */ "lxvrbx \0"
  /* 12556 */ "stxvrbx \0"
  /* 12565 */ "stbx \0"
  /* 12571 */ "xxsplti32dx \0"
  /* 12584 */ "evlddx \0"
  /* 12592 */ "evstddx \0"
  /* 12601 */ "lfdx \0"
  /* 12607 */ "stfdx \0"
  /* 12614 */ "ldx \0"
  /* 12619 */ "lxvrdx \0"
  /* 12627 */ "stxvrdx \0"
  /* 12636 */ "lxsdx \0"
  /* 12643 */ "stxsdx \0"
  /* 12651 */ "stdx \0"
  /* 12657 */ "evlwhex \0"
  /* 12666 */ "evstwhex \0"
  /* 12676 */ "evstwwex \0"
  /* 12686 */ "evldhx \0"
  /* 12694 */ "evstdhx \0"
  /* 12703 */ "lvehx \0"
  /* 12710 */ "stvehx \0"
  /* 12718 */ "stxsihx \0"
  /* 12727 */ "lxvrhx \0"
  /* 12735 */ "stxvrhx \0"
  /* 12744 */ "sthx \0"
  /* 12750 */ "stbcix \0"
  /* 12758 */ "ldcix \0"
  /* 12765 */ "stdcix \0"
  /* 12773 */ "sthcix \0"
  /* 12781 */ "stwcix \0"
  /* 12789 */ "lbzcix \0"
  /* 12797 */ "lhzcix \0"
  /* 12805 */ "lwzcix \0"
  /* 12813 */ "xsrqpix \0"
  /* 12822 */ "vinsblx \0"
  /* 12831 */ "vextublx \0"
  /* 12841 */ "vinsdlx \0"
  /* 12850 */ "vinshlx \0"
  /* 12859 */ "vextuhlx \0"
  /* 12869 */ "vinsbvlx \0"
  /* 12879 */ "vextdubvlx \0"
  /* 12891 */ "vextddvlx \0"
  /* 12902 */ "vinshvlx \0"
  /* 12912 */ "vextduhvlx \0"
  /* 12924 */ "vinswvlx \0"
  /* 12934 */ "vextduwvlx \0"
  /* 12946 */ "vinswlx \0"
  /* 12955 */ "vextuwlx \0"
  /* 12965 */ "ldmx \0"
  /* 12971 */ "xxpermx \0"
  /* 12980 */ "vsbox \0"
  /* 12987 */ "evstwhox \0"
  /* 12997 */ "evstwwox \0"
  /* 13007 */ "lbepx \0"
  /* 13014 */ "stbepx \0"
  /* 13022 */ "lfdepx \0"
  /* 13030 */ "stfdepx \0"
  /* 13039 */ "lhepx \0"
  /* 13046 */ "sthepx \0"
  /* 13054 */ "lwepx \0"
  /* 13061 */ "stwepx \0"
  /* 13069 */ "vupkhpx \0"
  /* 13078 */ "vpkpx \0"
  /* 13085 */ "vupklpx \0"
  /* 13094 */ "lxsspx \0"
  /* 13102 */ "stxsspx \0"
  /* 13111 */ "lxvpx \0"
  /* 13118 */ "stxvpx \0"
  /* 13126 */ "lbarx \0"
  /* 13133 */ "ldarx \0"
  /* 13140 */ "lharx \0"
  /* 13147 */ "lwarx \0"
  /* 13154 */ "ldbrx \0"
  /* 13161 */ "stdbrx \0"
  /* 13169 */ "lhbrx \0"
  /* 13176 */ "sthbrx \0"
  /* 13184 */ "vinsbrx \0"
  /* 13193 */ "vextubrx \0"
  /* 13203 */ "lwbrx \0"
  /* 13210 */ "stwbrx \0"
  /* 13218 */ "vinsdrx \0"
  /* 13227 */ "vinshrx \0"
  /* 13236 */ "vextuhrx \0"
  /* 13246 */ "vinsbvrx \0"
  /* 13256 */ "vextdubvrx \0"
  /* 13268 */ "vextddvrx \0"
  /* 13279 */ "vinshvrx \0"
  /* 13289 */ "vextduhvrx \0"
  /* 13301 */ "vinswvrx \0"
  /* 13311 */ "vextduwvrx \0"
  /* 13323 */ "vinswrx \0"
  /* 13332 */ "vextuwrx \0"
  /* 13342 */ "mcrxrx \0"
  /* 13350 */ "tlbsx \0"
  /* 13357 */ "lxvdsx \0"
  /* 13365 */ "vcfsx \0"
  /* 13372 */ "lfsx \0"
  /* 13378 */ "stfsx \0"
  /* 13385 */ "evlwhosx \0"
  /* 13395 */ "lxvwsx \0"
  /* 13403 */ "evlhhesplatx \0"
  /* 13417 */ "evlwhsplatx \0"
  /* 13430 */ "evlhhossplatx \0"
  /* 13445 */ "evlhhousplatx \0"
  /* 13460 */ "evlwwsplatx \0"
  /* 13473 */ "lhaux \0"
  /* 13480 */ "lwaux \0"
  /* 13487 */ "stbux \0"
  /* 13494 */ "lfdux \0"
  /* 13501 */ "stfdux \0"
  /* 13509 */ "ldux \0"
  /* 13515 */ "stdux \0"
  /* 13522 */ "vcfux \0"
  /* 13529 */ "sthux \0"
  /* 13536 */ "evlwhoux \0"
  /* 13546 */ "lfsux \0"
  /* 13553 */ "stfsux \0"
  /* 13561 */ "stwux \0"
  /* 13568 */ "lbzux \0"
  /* 13575 */ "lhzux \0"
  /* 13582 */ "lwzux \0"
  /* 13589 */ "lvx \0"
  /* 13594 */ "stvx \0"
  /* 13600 */ "lxvx \0"
  /* 13606 */ "stxvx \0"
  /* 13613 */ "evldwx \0"
  /* 13621 */ "evstdwx \0"
  /* 13630 */ "lvewx \0"
  /* 13637 */ "stvewx \0"
  /* 13645 */ "stfiwx \0"
  /* 13653 */ "stxsiwx \0"
  /* 13662 */ "lxvrwx \0"
  /* 13670 */ "stxvrwx \0"
  /* 13679 */ "stwx \0"
  /* 13685 */ "lxsibzx \0"
  /* 13694 */ "lbzx \0"
  /* 13700 */ "lxsihzx \0"
  /* 13709 */ "lhzx \0"
  /* 13715 */ "lfiwzx \0"
  /* 13723 */ "lxsiwzx \0"
  /* 13732 */ "lwzx \0"
  /* 13738 */ "copy \0"
  /* 13744 */ "dcbz \0"
  /* 13750 */ "plbz \0"
  /* 13756 */ "xxsetaccz \0"
  /* 13767 */ "bdz \0"
  /* 13772 */ "efdctsidz \0"
  /* 13783 */ "fctidz \0"
  /* 13791 */ "efdctuidz \0"
  /* 13802 */ "xscvqpsdz \0"
  /* 13813 */ "xscvqpudz \0"
  /* 13824 */ "plhz \0"
  /* 13830 */ "vrfiz \0"
  /* 13837 */ "xsrdpiz \0"
  /* 13846 */ "xvrdpiz \0"
  /* 13855 */ "xvrspiz \0"
  /* 13864 */ "friz \0"
  /* 13870 */ "efdctsiz \0"
  /* 13880 */ "efsctsiz \0"
  /* 13890 */ "evfsctsiz \0"
  /* 13901 */ "efdctuiz \0"
  /* 13911 */ "efsctuiz \0"
  /* 13921 */ "bdnz \0"
  /* 13927 */ "xscvqpsqz \0"
  /* 13938 */ "xscvqpuqz \0"
  /* 13949 */ "fctiduz \0"
  /* 13958 */ "fctiwuz \0"
  /* 13967 */ "fctiwz \0"
  /* 13975 */ "plwz \0"
  /* 13981 */ "mfvsrwz \0"
  /* 13990 */ "mtvsrwz \0"
  /* 13999 */ "xscvqpswz \0"
  /* 14010 */ "xscvqpuwz \0"
  /* 14021 */ "bdzlrl+\0"
  /* 14029 */ "bdnzlrl+\0"
  /* 14038 */ "bdzlr+\0"
  /* 14045 */ "bdnzlr+\0"
  /* 14053 */ "evsel crD,\0"
  /* 14064 */ "bdzlrl-\0"
  /* 14072 */ "bdnzlrl-\0"
  /* 14081 */ "bdzlr-\0"
  /* 14088 */ "bdnzlr-\0"
  /* 14096 */ "# XRay Function Patchable RET.\0"
  /* 14127 */ "# XRay Typed Event Log.\0"
  /* 14151 */ "# XRay Custom Event Log.\0"
  /* 14176 */ "# XRay Function Enter.\0"
  /* 14199 */ "# XRay Tail Call Exit.\0"
  /* 14222 */ "# XRay Function Exit.\0"
  /* 14244 */ "trechkpt.\0"
  /* 14254 */ "ori 1, 1, 0\0"
  /* 14266 */ "ori 2, 2, 0\0"
  /* 14278 */ "#ADDISdtprelHA32\0"
  /* 14295 */ "#ATOMIC_LOAD_SUB_I32\0"
  /* 14316 */ "#ATOMIC_LOAD_ADD_I32\0"
  /* 14337 */ "#ATOMIC_LOAD_NAND_I32\0"
  /* 14359 */ "#ATOMIC_LOAD_AND_I32\0"
  /* 14380 */ "#ATOMIC_LOAD_UMIN_I32\0"
  /* 14402 */ "#ATOMIC_LOAD_MIN_I32\0"
  /* 14423 */ "#ATOMIC_SWAP_I32\0"
  /* 14440 */ "#ATOMIC_LOAD_XOR_I32\0"
  /* 14461 */ "#ATOMIC_LOAD_OR_I32\0"
  /* 14481 */ "#ATOMIC_LOAD_UMAX_I32\0"
  /* 14503 */ "#ATOMIC_LOAD_MAX_I32\0"
  /* 14524 */ "#ADDItlsgdL32\0"
  /* 14538 */ "#ADDItlsldL32\0"
  /* 14552 */ "#LDgotTprelL32\0"
  /* 14567 */ "#ADDIdtprelL32\0"
  /* 14582 */ "#EH_SJLJ_LONGJMP32\0"
  /* 14601 */ "#EH_SJLJ_SETJMP32\0"
  /* 14619 */ "#ADDItlsgdLADDR32\0"
  /* 14637 */ "#ADDItlsldLADDR32\0"
  /* 14655 */ "GETtlsldADDR32\0"
  /* 14670 */ "GETtlsADDR32\0"
  /* 14683 */ "#PROBED_ALLOCA_32\0"
  /* 14701 */ "#PREPARE_PROBED_ALLOCA_32\0"
  /* 14727 */ "#PROBED_STACKALLOC_32\0"
  /* 14749 */ "#PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32\0"
  /* 14792 */ "#DFLOADf32\0"
  /* 14803 */ "#XFLOADf32\0"
  /* 14814 */ "#DFSTOREf32\0"
  /* 14826 */ "#XFSTOREf32\0"
  /* 14838 */ "#ATOMIC_LOAD_SUB_I64\0"
  /* 14859 */ "#ATOMIC_LOAD_ADD_I64\0"
  /* 14880 */ "#ATOMIC_LOAD_NAND_I64\0"
  /* 14902 */ "#ATOMIC_LOAD_UMIN_I64\0"
  /* 14924 */ "#ATOMIC_LOAD_MIN_I64\0"
  /* 14945 */ "#ATOMIC_SWAP_I64\0"
  /* 14962 */ "#ATOMIC_CMP_SWAP_I64\0"
  /* 14983 */ "#ATOMIC_LOAD_XOR_I64\0"
  /* 15004 */ "#ATOMIC_LOAD_OR_I64\0"
  /* 15024 */ "#ATOMIC_LOAD_UMAX_I64\0"
  /* 15046 */ "#ATOMIC_LOAD_MAX_I64\0"
  /* 15067 */ "#EH_SJLJ_LONGJMP64\0"
  /* 15086 */ "#EH_SJLJ_SETJMP64\0"
  /* 15104 */ "#PROBED_ALLOCA_64\0"
  /* 15122 */ "#PREPARE_PROBED_ALLOCA_64\0"
  /* 15148 */ "#PROBED_STACKALLOC_64\0"
  /* 15170 */ "#PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64\0"
  /* 15213 */ "#DFLOADf64\0"
  /* 15224 */ "#XFLOADf64\0"
  /* 15235 */ "#DFSTOREf64\0"
  /* 15247 */ "#XFSTOREf64\0"
  /* 15259 */ "#ATOMIC_LOAD_AND_i64\0"
  /* 15280 */ "#SELECT_CC_SPE4\0"
  /* 15296 */ "#SELECT_SPE4\0"
  /* 15309 */ "#SELECT_CC_F4\0"
  /* 15323 */ "#SELECT_F4\0"
  /* 15334 */ "#SELECT_CC_I4\0"
  /* 15348 */ "#SELECT_I4\0"
  /* 15359 */ "crxor 6, 6, 6\0"
  /* 15373 */ "creqv 6, 6, 6\0"
  /* 15387 */ "#SELECT_CC_F16\0"
  /* 15402 */ "#SELECT_F16\0"
  /* 15414 */ "#ATOMIC_LOAD_SUB_I16\0"
  /* 15435 */ "#ATOMIC_LOAD_ADD_I16\0"
  /* 15456 */ "#ATOMIC_LOAD_NAND_I16\0"
  /* 15478 */ "#ATOMIC_LOAD_AND_I16\0"
  /* 15499 */ "#ATOMIC_LOAD_UMIN_I16\0"
  /* 15521 */ "#ATOMIC_LOAD_MIN_I16\0"
  /* 15542 */ "#ATOMIC_SWAP_I16\0"
  /* 15559 */ "#ATOMIC_LOAD_XOR_I16\0"
  /* 15580 */ "#ATOMIC_LOAD_OR_I16\0"
  /* 15600 */ "#ATOMIC_LOAD_UMAX_I16\0"
  /* 15622 */ "#ATOMIC_LOAD_MAX_I16\0"
  /* 15643 */ "#ADDIStocHA8\0"
  /* 15656 */ "#DYNALLOC8\0"
  /* 15667 */ "#CFENCE8\0"
  /* 15676 */ "#SELECT_CC_F8\0"
  /* 15690 */ "#SELECT_F8\0"
  /* 15701 */ "#ATOMIC_LOAD_SUB_I8\0"
  /* 15721 */ "#SELECT_CC_I8\0"
  /* 15735 */ "#ATOMIC_LOAD_ADD_I8\0"
  /* 15755 */ "#ATOMIC_LOAD_NAND_I8\0"
  /* 15776 */ "#ATOMIC_LOAD_AND_I8\0"
  /* 15796 */ "#ATOMIC_LOAD_UMIN_I8\0"
  /* 15817 */ "#ATOMIC_LOAD_MIN_I8\0"
  /* 15837 */ "#ATOMIC_CMP_SWAP_I8\0"
  /* 15857 */ "ATOMIC_LOAD_XOR_I8\0"
  /* 15876 */ "#ATOMIC_LOAD_OR_I8\0"
  /* 15895 */ "#SELECT_I8\0"
  /* 15906 */ "#ATOMIC_LOAD_UMAX_I8\0"
  /* 15927 */ "#ATOMIC_LOAD_MAX_I8\0"
  /* 15947 */ "#MovePCtoLR8\0"
  /* 15960 */ "#DYNAREAOFFSET8\0"
  /* 15976 */ "#ANDI_rec_1_EQ_BIT8\0"
  /* 15996 */ "#ANDI_rec_1_GT_BIT8\0"
  /* 16016 */ "#ATOMIC_SWAP_i8\0"
  /* 16032 */ "#ADDIStocHA\0"
  /* 16044 */ "#ADDIStlsgdHA\0"
  /* 16058 */ "#ADDIStlsldHA\0"
  /* 16072 */ "#ADDISgotTprelHA\0"
  /* 16089 */ "#ADDISdtprelHA\0"
  /* 16104 */ "#ReadTB\0"
  /* 16112 */ "#RESTORE_UACC\0"
  /* 16126 */ "#SPILL_UACC\0"
  /* 16138 */ "#RESTORE_ACC\0"
  /* 16151 */ "#SPILL_ACC\0"
  /* 16162 */ "#DYNALLOC\0"
  /* 16172 */ "#SELECT_CC_VSFRC\0"
  /* 16189 */ "#SELECT_VSFRC\0"
  /* 16203 */ "#SELECT_CC_VRRC\0"
  /* 16219 */ "#SELECT_VRRC\0"
  /* 16232 */ "#SELECT_CC_VSSRC\0"
  /* 16249 */ "#SELECT_VSSRC\0"
  /* 16263 */ "#SELECT_CC_VSRC\0"
  /* 16279 */ "#SELECT_VSRC\0"
  /* 16292 */ "#SPILLTOVSR_LD\0"
  /* 16307 */ "LIFETIME_END\0"
  /* 16320 */ "#SETRND\0"
  /* 16328 */ "PSEUDO_PROBE\0"
  /* 16341 */ "BUNDLE\0"
  /* 16348 */ "#SELECT_CC_SPE\0"
  /* 16363 */ "#SELECT_SPE\0"
  /* 16375 */ "DBG_VALUE\0"
  /* 16385 */ "DBG_INSTR_REF\0"
  /* 16399 */ "#LDtocJTI\0"
  /* 16409 */ "DBG_LABEL\0"
  /* 16419 */ "#GETtlsldADDRPCREL\0"
  /* 16438 */ "#GETtlsADDRPCREL\0"
  /* 16455 */ "#LDtocL\0"
  /* 16463 */ "#ADDItocL\0"
  /* 16473 */ "#LWZtocL\0"
  /* 16482 */ "#ADDItlsgdL\0"
  /* 16494 */ "#ADDItlsldL\0"
  /* 16506 */ "#LDgotTprelL\0"
  /* 16519 */ "#ADDIdtprelL\0"
  /* 16532 */ "#SETFLM\0"
  /* 16540 */ "#UNENCODED_NOP\0"
  /* 16555 */ "#UpdateGBR\0"
  /* 16566 */ "#RESTORE_CR\0"
  /* 16578 */ "#SPILL_CR\0"
  /* 16588 */ "#ADDItlsgdLADDR\0"
  /* 16604 */ "#ADDItlsldLADDR\0"
  /* 16620 */ "#GETtlsldADDR\0"
  /* 16634 */ "#GETtlsADDR\0"
  /* 16646 */ "#KILL_PAIR\0"
  /* 16657 */ "#MovePCtoLR\0"
  /* 16669 */ "#MoveGOTtoLR\0"
  /* 16682 */ "#TCHECK_RET\0"
  /* 16694 */ "#TBEGIN_RET\0"
  /* 16706 */ "#DYNAREAOFFSET\0"
  /* 16721 */ "#RESTORE_CRBIT\0"
  /* 16736 */ "#SPILL_CRBIT\0"
  /* 16749 */ "#ANDI_rec_1_EQ_BIT\0"
  /* 16768 */ "#ANDI_rec_1_GT_BIT\0"
  /* 16787 */ "#PPC32GOT\0"
  /* 16797 */ "#PPC32PICGOT\0"
  /* 16810 */ "#LDtocCPT\0"
  /* 16820 */ "LIFETIME_START\0"
  /* 16835 */ "#SPILLTOVSR_ST\0"
  /* 16850 */ "#LIWAX\0"
  /* 16857 */ "#SPILLTOVSR_LDX\0"
  /* 16873 */ "#SPILLTOVSR_STX\0"
  /* 16889 */ "#STIWX\0"
  /* 16896 */ "#LIWZX\0"
  /* 16903 */ "bca\0"
  /* 16907 */ "slbia\0"
  /* 16913 */ "tlbia\0"
  /* 16919 */ "bcla\0"
  /* 16924 */ "clrbhrb\0"
  /* 16932 */ "bc\0"
  /* 16935 */ "slbsync\0"
  /* 16943 */ "tlbsync\0"
  /* 16951 */ "msgsync\0"
  /* 16959 */ "isync\0"
  /* 16965 */ "msync\0"
  /* 16971 */ "#LDtoc\0"
  /* 16978 */ "#LWZtoc\0"
  /* 16986 */ "hrfid\0"
  /* 16992 */ "tlbre\0"
  /* 16998 */ "tlbwe\0"
  /* 17004 */ "#SETRNDi\0"
  /* 17013 */ "rfci\0"
  /* 17018 */ "rfmci\0"
  /* 17024 */ "rfdi\0"
  /* 17029 */ "rfi\0"
  /* 17033 */ "bcl\0"
  /* 17037 */ "#PADDIdtprel\0"
  /* 17050 */ "# FEntry call\0"
  /* 17064 */ "dssall\0"
  /* 17071 */ "blrl\0"
  /* 17076 */ "bdzlrl\0"
  /* 17083 */ "bdnzlrl\0"
  /* 17091 */ "bctrl\0"
  /* 17097 */ "attn\0"
  /* 17102 */ "eieio\0"
  /* 17108 */ "nap\0"
  /* 17112 */ "trap\0"
  /* 17117 */ "nop\0"
  /* 17121 */ "stop\0"
  /* 17126 */ "blr\0"
  /* 17130 */ "bdzlr\0"
  /* 17136 */ "bdnzlr\0"
  /* 17143 */ "bctr\0"
  /* 17148 */ "cp_abort\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    16376U,	// DBG_VALUE
    16386U,	// DBG_INSTR_REF
    16410U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    16342U,	// BUNDLE
    16821U,	// LIFETIME_START
    16308U,	// LIFETIME_END
    16329U,	// PSEUDO_PROBE
    0U,	// STACKMAP
    17051U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    14177U,	// PATCHABLE_FUNCTION_ENTER
    14097U,	// PATCHABLE_RET
    14223U,	// PATCHABLE_FUNCTION_EXIT
    14200U,	// PATCHABLE_TAIL_CALL
    14152U,	// PATCHABLE_EVENT_CALL
    14128U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    35069U,	// BUILD_UACC
    15668U,	// CFENCE8
    1073779509U,	// CLRLSLDI
    1073775443U,	// CLRLSLDI_rec
    1073780020U,	// CLRLSLWI
    1073775552U,	// CLRLSLWI_rec
    1073779544U,	// CLRRDI
    1073775470U,	// CLRRDI_rec
    1073780061U,	// CLRRWI
    1073775581U,	// CLRRWI_rec
    43625U,	// CP_COPY_FIRST
    46507U,	// CP_COPYx
    43574U,	// CP_PASTE_LAST
    36965U,	// CP_PASTEx
    1119709U,	// DCBFL
    1122106U,	// DCBFLP
    1124341U,	// DCBFPS
    1118354U,	// DCBFx
    1124349U,	// DCBSTPS
    33630611U,	// DCBTCT
    33629891U,	// DCBTDS
    33630619U,	// DCBTSTCT
    33629899U,	// DCBTSTDS
    1125009U,	// DCBTSTT
    1124981U,	// DCBTSTx
    1124996U,	// DCBTT
    1124743U,	// DCBTx
    14793U,	// DFLOADf32
    15214U,	// DFLOADf64
    14815U,	// DFSTOREf32
    15236U,	// DFSTOREf64
    1073779519U,	// EXTLDI
    1073775454U,	// EXTLDI_rec
    1073780046U,	// EXTLWI
    1073775572U,	// EXTLWI_rec
    1073779568U,	// EXTRDI
    1073775497U,	// EXTRDI_rec
    1073780085U,	// EXTRWI
    1073775608U,	// EXTRWI_rec
    1073780030U,	// INSLWI
    1073775563U,	// INSLWI_rec
    1073779552U,	// INSRDI
    1073775479U,	// INSRDI_rec
    1073780069U,	// INSRWI
    1073775590U,	// INSRWI_rec
    16647U,	// KILL_PAIR
    67144318U,	// LAx
    16851U,	// LIWAX
    16897U,	// LIWZX
    1073779687U,	// RLWIMIbm
    1073775535U,	// RLWIMIbm_rec
    1073780654U,	// RLWINMbm
    1073775686U,	// RLWINMbm_rec
    1073780671U,	// RLWNMbm
    1073775695U,	// RLWNMbm_rec
    1073779560U,	// ROTRDI
    1073775488U,	// ROTRDI_rec
    1073780077U,	// ROTRWI
    1073775599U,	// ROTRWI_rec
    1073779513U,	// SLDI
    1073775447U,	// SLDI_rec
    1073780024U,	// SLWI
    1073775556U,	// SLWI_rec
    16293U,	// SPILLTOVSR_LD
    16858U,	// SPILLTOVSR_LDX
    16836U,	// SPILLTOVSR_ST
    16874U,	// SPILLTOVSR_STX
    1073779554U,	// SRDI
    1073775481U,	// SRDI_rec
    1073780071U,	// SRWI
    1073775592U,	// SRWI_rec
    16890U,	// STIWX
    1073779467U,	// SUBI
    1073777865U,	// SUBIC
    1073775018U,	// SUBIC_rec
    1073784744U,	// SUBIS
    100706223U,	// SUBPCIS
    14804U,	// XFLOADf32
    15225U,	// XFLOADf64
    14827U,	// XFSTOREf32
    15248U,	// XFSTOREf64
    1073778057U,	// ADD4
    1073781213U,	// ADD4O
    1073775786U,	// ADD4O_rec
    1073778057U,	// ADD4TLS
    1073775090U,	// ADD4_rec
    1073778057U,	// ADD8
    1073781213U,	// ADD8O
    1073775786U,	// ADD8O_rec
    1073778057U,	// ADD8TLS
    1073778057U,	// ADD8TLS_
    1073775090U,	// ADD8_rec
    1073777827U,	// ADDC
    1073777827U,	// ADDC8
    1073781198U,	// ADDC8O
    1073775769U,	// ADDC8O_rec
    1073774985U,	// ADDC8_rec
    1073781198U,	// ADDCO
    1073775769U,	// ADDCO_rec
    1073774985U,	// ADDC_rec
    1073778678U,	// ADDE
    1073778678U,	// ADDE8
    1073781234U,	// ADDE8O
    1073775810U,	// ADDE8O_rec
    1073775229U,	// ADDE8_rec
    1073781234U,	// ADDEO
    1073775810U,	// ADDEO_rec
    1073775229U,	// ADDE_rec
    1073779495U,	// ADDI
    1073779495U,	// ADDI8
    1073777872U,	// ADDIC
    1073777872U,	// ADDIC8
    1073775026U,	// ADDIC_rec
    1073784769U,	// ADDIS
    1073784769U,	// ADDIS8
    16090U,	// ADDISdtprelHA
    14279U,	// ADDISdtprelHA32
    16073U,	// ADDISgotTprelHA
    16045U,	// ADDIStlsgdHA
    16059U,	// ADDIStlsldHA
    16033U,	// ADDIStocHA
    15644U,	// ADDIStocHA8
    16520U,	// ADDIdtprelL
    14568U,	// ADDIdtprelL32
    16483U,	// ADDItlsgdL
    14525U,	// ADDItlsgdL32
    16589U,	// ADDItlsgdLADDR
    14620U,	// ADDItlsgdLADDR32
    16495U,	// ADDItlsldL
    14539U,	// ADDItlsldL32
    16605U,	// ADDItlsldLADDR
    14638U,	// ADDItlsldLADDR32
    16464U,	// ADDItocL
    36921U,	// ADDME
    36921U,	// ADDME8
    39433U,	// ADDME8O
    34012U,	// ADDME8O_rec
    33437U,	// ADDME8_rec
    39433U,	// ADDMEO
    34012U,	// ADDMEO_rec
    33437U,	// ADDME_rec
    42936U,	// ADDPCIS
    36995U,	// ADDZE
    36995U,	// ADDZE8
    39458U,	// ADDZE8O
    34040U,	// ADDZE8O_rec
    33486U,	// ADDZE8_rec
    39458U,	// ADDZEO
    34040U,	// ADDZEO_rec
    33486U,	// ADDZE_rec
    100618U,	// ADJCALLSTACKDOWN
    100637U,	// ADJCALLSTACKUP
    1073778282U,	// AND
    1073778282U,	// AND8
    1073775152U,	// AND8_rec
    1073777836U,	// ANDC
    1073777836U,	// ANDC8
    1073774992U,	// ANDC8_rec
    1073774992U,	// ANDC_rec
    1073775463U,	// ANDI8_rec
    1073776322U,	// ANDIS8_rec
    1073776322U,	// ANDIS_rec
    1073775463U,	// ANDI_rec
    16750U,	// ANDI_rec_1_EQ_BIT
    15977U,	// ANDI_rec_1_EQ_BIT8
    16769U,	// ANDI_rec_1_GT_BIT
    15997U,	// ANDI_rec_1_GT_BIT8
    1073775152U,	// AND_rec
    2283833509U,	// ATOMIC_CMP_SWAP_I16
    2283833435U,	// ATOMIC_CMP_SWAP_I32
    14963U,	// ATOMIC_CMP_SWAP_I64
    15838U,	// ATOMIC_CMP_SWAP_I8
    15436U,	// ATOMIC_LOAD_ADD_I16
    14317U,	// ATOMIC_LOAD_ADD_I32
    14860U,	// ATOMIC_LOAD_ADD_I64
    15736U,	// ATOMIC_LOAD_ADD_I8
    15479U,	// ATOMIC_LOAD_AND_I16
    14360U,	// ATOMIC_LOAD_AND_I32
    15260U,	// ATOMIC_LOAD_AND_I64
    15777U,	// ATOMIC_LOAD_AND_I8
    15623U,	// ATOMIC_LOAD_MAX_I16
    14504U,	// ATOMIC_LOAD_MAX_I32
    15047U,	// ATOMIC_LOAD_MAX_I64
    15928U,	// ATOMIC_LOAD_MAX_I8
    15522U,	// ATOMIC_LOAD_MIN_I16
    14403U,	// ATOMIC_LOAD_MIN_I32
    14925U,	// ATOMIC_LOAD_MIN_I64
    15818U,	// ATOMIC_LOAD_MIN_I8
    15457U,	// ATOMIC_LOAD_NAND_I16
    14338U,	// ATOMIC_LOAD_NAND_I32
    14881U,	// ATOMIC_LOAD_NAND_I64
    15756U,	// ATOMIC_LOAD_NAND_I8
    15581U,	// ATOMIC_LOAD_OR_I16
    14462U,	// ATOMIC_LOAD_OR_I32
    15005U,	// ATOMIC_LOAD_OR_I64
    15877U,	// ATOMIC_LOAD_OR_I8
    15415U,	// ATOMIC_LOAD_SUB_I16
    14296U,	// ATOMIC_LOAD_SUB_I32
    14839U,	// ATOMIC_LOAD_SUB_I64
    15702U,	// ATOMIC_LOAD_SUB_I8
    15601U,	// ATOMIC_LOAD_UMAX_I16
    14482U,	// ATOMIC_LOAD_UMAX_I32
    15025U,	// ATOMIC_LOAD_UMAX_I64
    15907U,	// ATOMIC_LOAD_UMAX_I8
    15500U,	// ATOMIC_LOAD_UMIN_I16
    14381U,	// ATOMIC_LOAD_UMIN_I32
    14903U,	// ATOMIC_LOAD_UMIN_I64
    15797U,	// ATOMIC_LOAD_UMIN_I8
    15560U,	// ATOMIC_LOAD_XOR_I16
    14441U,	// ATOMIC_LOAD_XOR_I32
    14984U,	// ATOMIC_LOAD_XOR_I64
    15858U,	// ATOMIC_LOAD_XOR_I8
    15543U,	// ATOMIC_SWAP_I16
    14424U,	// ATOMIC_SWAP_I32
    14946U,	// ATOMIC_SWAP_I64
    16017U,	// ATOMIC_SWAP_I8
    17098U,	// ATTN
    1182398U,	// B
    1214903U,	// BA
    167805047U,	// BC
    3359267U,	// BCC
    4407843U,	// BCCA
    5456419U,	// BCCCTR
    5456419U,	// BCCCTR8
    6504995U,	// BCCCTRL
    6504995U,	// BCCCTRL8
    7553571U,	// BCCL
    8602147U,	// BCCLA
    9650723U,	// BCCLR
    10699299U,	// BCCLRL
    11567273U,	// BCCTR
    11567273U,	// BCCTR8
    11567329U,	// BCCTR8n
    11567251U,	// BCCTRL
    11567251U,	// BCCTRL8
    11567309U,	// BCCTRL8n
    11567309U,	// BCCTRLn
    11567329U,	// BCCTRn
    1073775703U,	// BCDCFN_rec
    1073776090U,	// BCDCFSQ_rec
    1073776661U,	// BCDCFZ_rec
    1073775712U,	// BCDCPSGN_rec
    33936U,	// BCDCTN_rec
    34276U,	// BCDCTSQ_rec
    1073776677U,	// BCDCTZ_rec
    1073775732U,	// BCDSETSGN_rec
    1073776198U,	// BCDSR_rec
    1073776254U,	// BCDS_rec
    1073775042U,	// BCDTRUNC_rec
    1073776347U,	// BCDUS_rec
    1073775053U,	// BCDUTRUNC_rec
    167805055U,	// BCL
    11567263U,	// BCLR
    11567240U,	// BCLRL
    11567299U,	// BCLRLn
    11567320U,	// BCLRn
    1179725U,	// BCLalways
    167805115U,	// BCLn
    17144U,	// BCTR
    17144U,	// BCTR8
    17092U,	// BCTRL
    17092U,	// BCTRL8
    229466U,	// BCTRL8_LDinto_toc
    229480U,	// BCTRL_LWZinto_toc
    167805108U,	// BCn
    1193570U,	// BDNZ
    1193570U,	// BDNZ8
    1215155U,	// BDNZA
    1212687U,	// BDNZAm
    1212457U,	// BDNZAp
    1185374U,	// BDNZL
    1215119U,	// BDNZLA
    1212671U,	// BDNZLAm
    1212441U,	// BDNZLAp
    17137U,	// BDNZLR
    17137U,	// BDNZLR8
    17084U,	// BDNZLRL
    14073U,	// BDNZLRLm
    14030U,	// BDNZLRLp
    14089U,	// BDNZLRm
    14046U,	// BDNZLRp
    1179934U,	// BDNZLm
    1179704U,	// BDNZLp
    1179948U,	// BDNZm
    1179718U,	// BDNZp
    1193416U,	// BDZ
    1193416U,	// BDZ8
    1215149U,	// BDZA
    1212680U,	// BDZAm
    1212450U,	// BDZAp
    1185368U,	// BDZL
    1215112U,	// BDZLA
    1212663U,	// BDZLAm
    1212433U,	// BDZLAp
    17131U,	// BDZLR
    17131U,	// BDZLR8
    17077U,	// BDZLRL
    14065U,	// BDZLRLm
    14022U,	// BDZLRLp
    14082U,	// BDZLRm
    14039U,	// BDZLRp
    1179927U,	// BDZLm
    1179697U,	// BDZLp
    1179942U,	// BDZm
    1179712U,	// BDZp
    1185188U,	// BL
    1185188U,	// BL8
    12719524U,	// BL8_NOP
    12850596U,	// BL8_NOP_TLS
    1185188U,	// BL8_NOTOC
    1316260U,	// BL8_NOTOC_TLS
    1316260U,	// BL8_TLS
    1316260U,	// BL8_TLS_
    1215101U,	// BLA
    1215101U,	// BLA8
    12749437U,	// BLA8_NOP
    17127U,	// BLR
    17127U,	// BLR8
    17072U,	// BLRL
    12719524U,	// BL_NOP
    1316260U,	// BL_TLS
    1073778262U,	// BPERMD
    1073777928U,	// BRINC
    1073778125U,	// CFUGED
    16925U,	// CLRBHRB
    1073777460U,	// CMPB
    1073777460U,	// CMPB8
    1073778334U,	// CMPD
    1073779537U,	// CMPDI
    1073777466U,	// CMPEQB
    1073778233U,	// CMPLD
    1073779501U,	// CMPLDI
    1073786334U,	// CMPLW
    1073780004U,	// CMPLWI
    1275104066U,	// CMPRB
    1275104066U,	// CMPRB8
    1073786591U,	// CMPW
    1073780054U,	// CMPWI
    36814U,	// CNTLZD
    1073780487U,	// CNTLZDM
    33387U,	// CNTLZD_rec
    45162U,	// CNTLZW
    45162U,	// CNTLZW8
    34770U,	// CNTLZW8_rec
    34770U,	// CNTLZW_rec
    36829U,	// CNTTZD
    1073780504U,	// CNTTZDM
    33396U,	// CNTTZD_rec
    45177U,	// CNTTZW
    45177U,	// CNTTZW8
    34779U,	// CNTTZW8_rec
    34779U,	// CNTTZW_rec
    17149U,	// CP_ABORT
    1073788331U,	// CP_COPY
    1073788331U,	// CP_COPY8
    1073778789U,	// CP_PASTE
    1073778789U,	// CP_PASTE8
    1073775294U,	// CP_PASTE8_rec
    1073775294U,	// CP_PASTE_rec
    15374U,	// CR6SET
    15360U,	// CR6UNSET
    1073778312U,	// CRAND
    1073777842U,	// CRANDC
    1073785780U,	// CREQV
    1073778296U,	// CRNAND
    1073784191U,	// CRNOR
    1073784205U,	// CROR
    1073777949U,	// CRORC
    1308666804U,	// CRSET
    1308665259U,	// CRUNSET
    1073784235U,	// CRXOR
    3359267U,	// CTRL_DEP
    268474805U,	// DARN
    1116597U,	// DCBA
    13930642U,	// DCBF
    1121859U,	// DCBFEP
    1118959U,	// DCBI
    1124957U,	// DCBST
    1121892U,	// DCBSTEP
    14985607U,	// DCBT
    335452U,	// DCBTEP
    14985845U,	// DCBTST
    335469U,	// DCBTSTEP
    1127857U,	// DCBZ
    1121911U,	// DCBZEP
    1119825U,	// DCBZL
    1121875U,	// DCBZLEP
    37649U,	// DCCCI
    1073778625U,	// DIVD
    1073778684U,	// DIVDE
    1073781241U,	// DIVDEO
    1073775818U,	// DIVDEO_rec
    1073785582U,	// DIVDEU
    1073781480U,	// DIVDEUO
    1073775907U,	// DIVDEUO_rec
    1073776425U,	// DIVDEU_rec
    1073775236U,	// DIVDE_rec
    1073781227U,	// DIVDO
    1073775802U,	// DIVDO_rec
    1073785575U,	// DIVDU
    1073781472U,	// DIVDUO
    1073775898U,	// DIVDUO_rec
    1073776417U,	// DIVDU_rec
    1073775204U,	// DIVD_rec
    1073786961U,	// DIVW
    1073778803U,	// DIVWE
    1073781274U,	// DIVWEO
    1073775855U,	// DIVWEO_rec
    1073785590U,	// DIVWEU
    1073781489U,	// DIVWEUO
    1073775917U,	// DIVWEUO_rec
    1073776434U,	// DIVWEU_rec
    1073775302U,	// DIVWE_rec
    1073781514U,	// DIVWO
    1073775945U,	// DIVWO_rec
    1073785694U,	// DIVWU
    1073781498U,	// DIVWUO
    1073775927U,	// DIVWUO_rec
    1073776461U,	// DIVWU_rec
    1073776576U,	// DIVW_rec
    1419274U,	// DSS
    17065U,	// DSSALL
    3523619428U,	// DST
    3523619428U,	// DST64
    3523619453U,	// DSTST
    3523619453U,	// DSTST64
    3523619482U,	// DSTSTT
    3523619482U,	// DSTSTT64
    3523619467U,	// DSTT
    3523619467U,	// DSTT64
    16163U,	// DYNALLOC
    15657U,	// DYNALLOC8
    16707U,	// DYNAREAOFFSET
    15961U,	// DYNAREAOFFSET8
    42506U,	// EFDABS
    1073778054U,	// EFDADD
    42797U,	// EFDCFS
    37090U,	// EFDCFSF
    38042U,	// EFDCFSI
    36359U,	// EFDCFSID
    37192U,	// EFDCFUF
    38108U,	// EFDCFUI
    36376U,	// EFDCFUID
    1073783691U,	// EFDCMPEQ
    1073785253U,	// EFDCMPGT
    1073785321U,	// EFDCMPLT
    37164U,	// EFDCTSF
    38070U,	// EFDCTSI
    46541U,	// EFDCTSIDZ
    46639U,	// EFDCTSIZ
    37220U,	// EFDCTUF
    38136U,	// EFDCTUI
    46560U,	// EFDCTUIDZ
    46670U,	// EFDCTUIZ
    1073785728U,	// EFDDIV
    1073780248U,	// EFDMUL
    42520U,	// EFDNABS
    37246U,	// EFDNEG
    1073777683U,	// EFDSUB
    1073783731U,	// EFDTSTEQ
    1073785284U,	// EFDTSTGT
    1073785352U,	// EFDTSTLT
    42555U,	// EFSABS
    1073778083U,	// EFSADD
    36309U,	// EFSCFD
    37099U,	// EFSCFSF
    38051U,	// EFSCFSI
    37201U,	// EFSCFUF
    38117U,	// EFSCFUI
    1073783701U,	// EFSCMPEQ
    1073785263U,	// EFSCMPGT
    1073785331U,	// EFSCMPLT
    37173U,	// EFSCTSF
    38079U,	// EFSCTSI
    46649U,	// EFSCTSIZ
    37229U,	// EFSCTUF
    38145U,	// EFSCTUI
    46680U,	// EFSCTUIZ
    1073785742U,	// EFSDIV
    1073780262U,	// EFSMUL
    42536U,	// EFSNABS
    37260U,	// EFSNEG
    1073777712U,	// EFSSUB
    1073783741U,	// EFSTSTEQ
    1073785294U,	// EFSTSTGT
    1073785362U,	// EFSTSTLT
    14583U,	// EH_SjLj_LongJmp32
    15068U,	// EH_SjLj_LongJmp64
    14602U,	// EH_SjLj_SetJmp32
    15087U,	// EH_SjLj_SetJmp64
    1179649U,	// EH_SjLj_Setup
    1073785775U,	// EQV
    1073785775U,	// EQV8
    1073776476U,	// EQV8_rec
    1073776476U,	// EQV_rec
    42572U,	// EVABS
    1107340716U,	// EVADDIW
    44061U,	// EVADDSMIAAW
    44193U,	// EVADDSSIAAW
    44127U,	// EVADDUMIAAW
    44259U,	// EVADDUSIAAW
    1073786186U,	// EVADDW
    1073778319U,	// EVAND
    1073777850U,	// EVANDC
    1073783722U,	// EVCMPEQ
    1073784865U,	// EVCMPGTS
    1073785642U,	// EVCMPGTU
    1073784875U,	// EVCMPLTS
    1073785652U,	// EVCMPLTU
    44857U,	// EVCNTLSW
    45160U,	// EVCNTLZW
    1073785035U,	// EVDIVWS
    1073785692U,	// EVDIVWU
    1073785787U,	// EVEQV
    35743U,	// EVEXTSB
    37446U,	// EVEXTSH
    42563U,	// EVFSABS
    1073778091U,	// EVFSADD
    37108U,	// EVFSCFSF
    38060U,	// EVFSCFSI
    37210U,	// EVFSCFUF
    38126U,	// EVFSCFUI
    1073783711U,	// EVFSCMPEQ
    1073785273U,	// EVFSCMPGT
    1073785341U,	// EVFSCMPLT
    37182U,	// EVFSCTSF
    38088U,	// EVFSCTSI
    46659U,	// EVFSCTSIZ
    37182U,	// EVFSCTUF
    38154U,	// EVFSCTUI
    46659U,	// EVFSCTUIZ
    1073785750U,	// EVFSDIV
    1073780270U,	// EVFSMUL
    42545U,	// EVFSNABS
    37268U,	// EVFSNEG
    1073777720U,	// EVFSSUB
    1073783751U,	// EVFSTSTEQ
    1073785304U,	// EVFSTSTGT
    1073785372U,	// EVFSTSTLT
    67145140U,	// EVLDD
    134263081U,	// EVLDDX
    67146164U,	// EVLDH
    134263183U,	// EVLDHX
    67153234U,	// EVLDW
    134264110U,	// EVLDWX
    67152185U,	// EVLHHESPLAT
    134263900U,	// EVLHHESPLATX
    67152210U,	// EVLHHOSSPLAT
    134263927U,	// EVLHHOSSPLATX
    67152224U,	// EVLHHOUSPLAT
    134263942U,	// EVLHHOUSPLATX
    67145754U,	// EVLWHE
    134263154U,	// EVLWHEX
    67151852U,	// EVLWHOS
    134263882U,	// EVLWHOSX
    67152653U,	// EVLWHOU
    134264033U,	// EVLWHOUX
    67152198U,	// EVLWHSPLAT
    134263914U,	// EVLWHSPLATX
    67152238U,	// EVLWWSPLAT
    134263957U,	// EVLWWSPLATX
    1073779608U,	// EVMERGEHI
    1073781332U,	// EVMERGEHILO
    1073781321U,	// EVMERGELO
    1073779619U,	// EVMERGELOHI
    1073776955U,	// EVMHEGSMFAA
    1073780861U,	// EVMHEGSMFAN
    1073777003U,	// EVMHEGSMIAA
    1073780909U,	// EVMHEGSMIAN
    1073777040U,	// EVMHEGUMIAA
    1073780946U,	// EVMHEGUMIAN
    1073778846U,	// EVMHESMF
    1073777088U,	// EVMHESMFA
    1073785833U,	// EVMHESMFAAW
    1073786375U,	// EVMHESMFANW
    1073779703U,	// EVMHESMI
    1073777180U,	// EVMHESMIA
    1073785898U,	// EVMHESMIAAW
    1073786427U,	// EVMHESMIANW
    1073778949U,	// EVMHESSF
    1073777131U,	// EVMHESSFA
    1073785859U,	// EVMHESSFAAW
    1073786401U,	// EVMHESSFANW
    1073786030U,	// EVMHESSIAAW
    1073786505U,	// EVMHESSIANW
    1073779742U,	// EVMHEUMI
    1073777223U,	// EVMHEUMIA
    1073785964U,	// EVMHEUMIAAW
    1073786466U,	// EVMHEUMIANW
    1073786096U,	// EVMHEUSIAAW
    1073786544U,	// EVMHEUSIANW
    1073776968U,	// EVMHOGSMFAA
    1073780874U,	// EVMHOGSMFAN
    1073777016U,	// EVMHOGSMIAA
    1073780922U,	// EVMHOGSMIAN
    1073777053U,	// EVMHOGUMIAA
    1073780959U,	// EVMHOGUMIAN
    1073778866U,	// EVMHOSMF
    1073777110U,	// EVMHOSMFA
    1073785846U,	// EVMHOSMFAAW
    1073786388U,	// EVMHOSMFANW
    1073779723U,	// EVMHOSMI
    1073777202U,	// EVMHOSMIA
    1073785938U,	// EVMHOSMIAAW
    1073786453U,	// EVMHOSMIANW
    1073778969U,	// EVMHOSSF
    1073777153U,	// EVMHOSSFA
    1073785872U,	// EVMHOSSFAAW
    1073786414U,	// EVMHOSSFANW
    1073786070U,	// EVMHOSSIAAW
    1073786531U,	// EVMHOSSIANW
    1073779772U,	// EVMHOUMI
    1073777256U,	// EVMHOUMIA
    1073786004U,	// EVMHOUMIAAW
    1073786492U,	// EVMHOUMIANW
    1073786136U,	// EVMHOUSIAAW
    1073786570U,	// EVMHOUSIANW
    35479U,	// EVMRA
    1073778856U,	// EVMWHSMF
    1073777099U,	// EVMWHSMFA
    1073779713U,	// EVMWHSMI
    1073777191U,	// EVMWHSMIA
    1073778959U,	// EVMWHSSF
    1073777142U,	// EVMWHSSFA
    1073779752U,	// EVMWHUMI
    1073777234U,	// EVMWHUMIA
    1073785925U,	// EVMWLSMIAAW
    1073786440U,	// EVMWLSMIANW
    1073786057U,	// EVMWLSSIAAW
    1073786518U,	// EVMWLSSIANW
    1073779762U,	// EVMWLUMI
    1073777245U,	// EVMWLUMIA
    1073785991U,	// EVMWLUMIAAW
    1073786479U,	// EVMWLUMIANW
    1073786123U,	// EVMWLUSIAAW
    1073786557U,	// EVMWLUSIANW
    1073778876U,	// EVMWSMF
    1073777121U,	// EVMWSMFA
    1073776981U,	// EVMWSMFAA
    1073780887U,	// EVMWSMFAN
    1073779733U,	// EVMWSMI
    1073777213U,	// EVMWSMIA
    1073777029U,	// EVMWSMIAA
    1073780935U,	// EVMWSMIAN
    1073778979U,	// EVMWSSF
    1073777164U,	// EVMWSSFA
    1073776992U,	// EVMWSSFAA
    1073780898U,	// EVMWSSFAN
    1073779782U,	// EVMWUMI
    1073777267U,	// EVMWUMIA
    1073777066U,	// EVMWUMIAA
    1073780972U,	// EVMWUMIAN
    1073778304U,	// EVNAND
    37277U,	// EVNEG
    1073784198U,	// EVNOR
    1073784211U,	// EVOR
    1073777956U,	// EVORC
    1073786341U,	// EVRLW
    1073780012U,	// EVRLWI
    44377U,	// EVRNDW
    15775462U,	// EVSEL
    1073786348U,	// EVSLW
    1073780038U,	// EVSLWI
    335582093U,	// EVSPLATFI
    335582418U,	// EVSPLATI
    1073784788U,	// EVSRWIS
    1073785604U,	// EVSRWIU
    1073784963U,	// EVSRWS
    1073785678U,	// EVSRWU
    67145156U,	// EVSTDD
    134263089U,	// EVSTDDX
    67146171U,	// EVSTDH
    134263191U,	// EVSTDHX
    67153249U,	// EVSTDW
    134264118U,	// EVSTDWX
    67145762U,	// EVSTWHE
    134263163U,	// EVSTWHEX
    67148352U,	// EVSTWHO
    134263484U,	// EVSTWHOX
    67145850U,	// EVSTWWE
    134263173U,	// EVSTWWEX
    67148561U,	// EVSTWWO
    134263494U,	// EVSTWWOX
    44087U,	// EVSUBFSMIAAW
    44219U,	// EVSUBFSSIAAW
    44153U,	// EVSUBFUMIAAW
    44285U,	// EVSUBFUSIAAW
    1073786234U,	// EVSUBFW
    369143171U,	// EVSUBIFW
    1073784242U,	// EVXOR
    35745U,	// EXTSB
    35745U,	// EXTSB8
    35745U,	// EXTSB8_32_64
    33096U,	// EXTSB8_rec
    33096U,	// EXTSB_rec
    37448U,	// EXTSH
    37448U,	// EXTSH8
    37448U,	// EXTSH8_32_64
    33546U,	// EXTSH8_rec
    33546U,	// EXTSH_rec
    44901U,	// EXTSW
    1073779651U,	// EXTSWSLI
    1073779651U,	// EXTSWSLI_32_64
    1073775515U,	// EXTSWSLI_32_64_rec
    1073775515U,	// EXTSWSLI_rec
    44901U,	// EXTSW_32
    44901U,	// EXTSW_32_64
    34722U,	// EXTSW_32_64_rec
    34722U,	// EXTSW_rec
    17103U,	// EnforceIEIO
    42514U,	// FABSD
    34388U,	// FABSD_rec
    42514U,	// FABSS
    34388U,	// FABSS_rec
    1073778062U,	// FADD
    1073784483U,	// FADDS
    1073776261U,	// FADDS_rec
    1073775089U,	// FADD_rec
    0U,	// FADDrtz
    36352U,	// FCFID
    42683U,	// FCFIDS
    34464U,	// FCFIDS_rec
    43724U,	// FCFIDU
    43069U,	// FCFIDUS
    34531U,	// FCFIDUS_rec
    34575U,	// FCFIDU_rec
    33297U,	// FCFID_rec
    1073781362U,	// FCMPOD
    1073781362U,	// FCMPOS
    1073785622U,	// FCMPUD
    1073785622U,	// FCMPUS
    1073780983U,	// FCPSGND
    1073775723U,	// FCPSGND_rec
    1073780983U,	// FCPSGNS
    1073775723U,	// FCPSGNS_rec
    36369U,	// FCTID
    43732U,	// FCTIDU
    46718U,	// FCTIDUZ
    34862U,	// FCTIDUZ_rec
    34584U,	// FCTIDU_rec
    46552U,	// FCTIDZ
    34828U,	// FCTIDZ_rec
    33305U,	// FCTID_rec
    44469U,	// FCTIW
    43846U,	// FCTIWU
    46727U,	// FCTIWUZ
    34872U,	// FCTIWUZ_rec
    34628U,	// FCTIWU_rec
    46736U,	// FCTIWZ
    34882U,	// FCTIWZ_rec
    34683U,	// FCTIW_rec
    1073785736U,	// FDIV
    1073784956U,	// FDIVS
    1073776365U,	// FDIVS_rec
    1073776469U,	// FDIV_rec
    1073778068U,	// FMADD
    1073784490U,	// FMADDS
    1073776269U,	// FMADDS_rec
    1073775096U,	// FMADD_rec
    42316U,	// FMR
    34356U,	// FMR_rec
    1073777697U,	// FMSUB
    1073784466U,	// FMSUBS
    1073776235U,	// FMSUBS_rec
    1073774946U,	// FMSUB_rec
    1073780256U,	// FMUL
    1073784805U,	// FMULS
    1073776330U,	// FMULS_rec
    1073775661U,	// FMUL_rec
    42529U,	// FNABSD
    34395U,	// FNABSD_rec
    42529U,	// FNABSS
    34395U,	// FNABSS_rec
    37254U,	// FNEGD
    33518U,	// FNEGD_rec
    37254U,	// FNEGS
    33518U,	// FNEGS_rec
    1073778075U,	// FNMADD
    1073784498U,	// FNMADDS
    1073776278U,	// FNMADDS_rec
    1073775104U,	// FNMADD_rec
    1073777704U,	// FNMSUB
    1073784474U,	// FNMSUBS
    1073776244U,	// FNMSUBS_rec
    1073774954U,	// FNMSUB_rec
    36943U,	// FRE
    42781U,	// FRES
    34473U,	// FRES_rec
    33454U,	// FRE_rec
    38816U,	// FRIMD
    33855U,	// FRIMD_rec
    38816U,	// FRIMS
    33855U,	// FRIMS_rec
    39174U,	// FRIND
    33929U,	// FRIND_rec
    39174U,	// FRINS
    33929U,	// FRINS_rec
    40756U,	// FRIPD
    34208U,	// FRIPD_rec
    40756U,	// FRIPS
    34208U,	// FRIPS_rec
    46633U,	// FRIZD
    34846U,	// FRIZD_rec
    46633U,	// FRIZS
    34846U,	// FRIZS_rec
    41667U,	// FRSP
    34239U,	// FRSP_rec
    36956U,	// FRSQRTE
    42787U,	// FRSQRTES
    34480U,	// FRSQRTES_rec
    33460U,	// FRSQRTE_rec
    1073780164U,	// FSELD
    1073775644U,	// FSELD_rec
    1073780164U,	// FSELS
    1073775644U,	// FSELS_rec
    43559U,	// FSQRT
    43061U,	// FSQRTS
    34514U,	// FSQRTS_rec
    34558U,	// FSQRT_rec
    1073777691U,	// FSUB
    1073784459U,	// FSUBS
    1073776227U,	// FSUBS_rec
    1073774939U,	// FSUB_rec
    1073785759U,	// FTDIV
    43566U,	// FTSQRT
    16635U,	// GETtlsADDR
    14671U,	// GETtlsADDR32
    16439U,	// GETtlsADDRPCREL
    16621U,	// GETtlsldADDR
    14656U,	// GETtlsldADDR32
    16420U,	// GETtlsldADDRPCREL
    16987U,	// HRFID
    1118965U,	// ICBI
    1121867U,	// ICBIEP
    429313U,	// ICBLC
    427474U,	// ICBLQ
    436621U,	// ICBT
    436189U,	// ICBTLS
    37656U,	// ICCCI
    1073780170U,	// ISEL
    1073780170U,	// ISEL8
    16960U,	// ISYNC
    402688638U,	// LA
    134263623U,	// LBARX
    1208005447U,	// LBARXL
    134263504U,	// LBEPX
    67155384U,	// LBZ
    67155384U,	// LBZ8
    1073787382U,	// LBZCIX
    436251493U,	// LBZU
    436251493U,	// LBZU8
    469808385U,	// LBZUX
    469808385U,	// LBZUX8
    134264191U,	// LBZX
    134264191U,	// LBZX8
    1073788287U,	// LBZXTLS
    1073788287U,	// LBZXTLS_
    1073788287U,	// LBZXTLS_32
    67145253U,	// LD
    134263630U,	// LDARX
    1208005454U,	// LDARXL
    1073785132U,	// LDAT
    134263651U,	// LDBRX
    1073787351U,	// LDCIX
    134263462U,	// LDMX
    436251356U,	// LDU
    469808326U,	// LDUX
    134263111U,	// LDX
    1073787207U,	// LDXTLS
    1073787207U,	// LDXTLS_
    16507U,	// LDgotTprelL
    14553U,	// LDgotTprelL32
    16972U,	// LDtoc
    16811U,	// LDtocBA
    16811U,	// LDtocCPT
    16400U,	// LDtocJTI
    16456U,	// LDtocL
    67145182U,	// LFD
    134263519U,	// LFDEPX
    436251310U,	// LFDU
    469808311U,	// LFDUX
    134263098U,	// LFDX
    134262998U,	// LFIWAX
    134264212U,	// LFIWZX
    67151676U,	// LFS
    436251421U,	// LFSU
    469808363U,	// LFSUX
    134263869U,	// LFSX
    67144215U,	// LHA
    67144215U,	// LHA8
    134263637U,	// LHARX
    1208005461U,	// LHARXL
    436251298U,	// LHAU
    436251298U,	// LHAU8
    469808290U,	// LHAUX
    469808290U,	// LHAUX8
    134262983U,	// LHAX
    134262983U,	// LHAX8
    134263666U,	// LHBRX
    134263666U,	// LHBRX8
    134263536U,	// LHEPX
    67155458U,	// LHZ
    67155458U,	// LHZ8
    1073787390U,	// LHZCIX
    436251499U,	// LHZU
    436251499U,	// LHZU8
    469808392U,	// LHZUX
    469808392U,	// LHZUX8
    134264206U,	// LHZX
    134264206U,	// LHZX8
    1073788302U,	// LHZXTLS
    1073788302U,	// LHZXTLS_
    1073788302U,	// LHZXTLS_32
    100701107U,	// LI
    100701107U,	// LI8
    100706248U,	// LIS
    100706248U,	// LIS8
    67153395U,	// LMW
    1073780093U,	// LSWI
    134263021U,	// LVEBX
    134263200U,	// LVEHX
    134264127U,	// LVEWX
    134256146U,	// LVSL
    134260193U,	// LVSR
    134264086U,	// LVX
    134256196U,	// LVXL
    67144351U,	// LWA
    134263644U,	// LWARX
    1208005468U,	// LWARXL
    1073785210U,	// LWAT
    469808297U,	// LWAUX
    134263015U,	// LWAX
    134263015U,	// LWAX_32
    67144351U,	// LWA_32
    134263700U,	// LWBRX
    134263700U,	// LWBRX8
    134263551U,	// LWEPX
    67155609U,	// LWZ
    67155609U,	// LWZ8
    1073787398U,	// LWZCIX
    436251505U,	// LWZU
    436251505U,	// LWZU8
    469808399U,	// LWZUX
    469808399U,	// LWZUX8
    134264229U,	// LWZX
    134264229U,	// LWZX8
    1073788325U,	// LWZXTLS
    1073788325U,	// LWZXTLS_
    1073788325U,	// LWZXTLS_32
    16979U,	// LWZtoc
    16474U,	// LWZtocL
    67145497U,	// LXSD
    134263133U,	// LXSDX
    134264182U,	// LXSIBZX
    134264197U,	// LXSIHZX
    134263006U,	// LXSIWAX
    134264220U,	// LXSIWZX
    67150564U,	// LXSSP
    134263591U,	// LXSSPX
    67152841U,	// LXV
    134262947U,	// LXVB16X
    134262913U,	// LXVD2X
    134263854U,	// LXVDSX
    134262966U,	// LXVH8X
    1073780279U,	// LXVL
    1073780205U,	// LXVLL
    67150682U,	// LXVP
    134263608U,	// LXVPX
    134263045U,	// LXVRBX
    134263116U,	// LXVRDX
    134263224U,	// LXVRHX
    134264159U,	// LXVRWX
    134262930U,	// LXVW4X
    134263892U,	// LXVWSX
    134264097U,	// LXVX
    1073778161U,	// MADDHD
    1073785531U,	// MADDHDU
    1073778217U,	// MADDLD
    1073778217U,	// MADDLD8
    1418419U,	// MBAR
    37061U,	// MCRF
    42817U,	// MCRFS
    1094687U,	// MCRXRX
    503353317U,	// MFBHRBE
    1090792U,	// MFCR
    1090792U,	// MFCR8
    1091054U,	// MFCTR
    1091054U,	// MFCTR8
    42195U,	// MFDCR
    1091381U,	// MFFS
    39364U,	// MFFSCDRN
    536908897U,	// MFFSCDRNI
    1085422U,	// MFFSCE
    39355U,	// MFFSCRN
    268473431U,	// MFFSCRNI
    1086987U,	// MFFSL
    1083067U,	// MFFS_rec
    1090880U,	// MFLR
    1090880U,	// MFLR8
    1091021U,	// MFMSR
    570462411U,	// MFOCRF
    570462411U,	// MFOCRF8
    42321U,	// MFPMR
    42425U,	// MFSPR
    42425U,	// MFSPR8
    604022215U,	// MFSR
    39180U,	// MFSRIN
    35766U,	// MFTB
    16819641U,	// MFTB8
    36531U,	// MFVRD
    17868217U,	// MFVRSAVE
    17868217U,	// MFVRSAVEv
    46750U,	// MFVRWZ
    1090806U,	// MFVSCR
    36531U,	// MFVSRD
    36416U,	// MFVSRLD
    46750U,	// MFVSRWZ
    1073778372U,	// MODSD
    1073786611U,	// MODSW
    1073778527U,	// MODUD
    1073786821U,	// MODUW
    16952U,	// MSGSYNC
    16966U,	// MSYNC
    37083U,	// MTCRF
    37083U,	// MTCRF8
    1091061U,	// MTCTR
    1091061U,	// MTCTR8
    1091061U,	// MTCTR8loop
    1091061U,	// MTCTRloop
    235283681U,	// MTDCR
    1411147U,	// MTFSB0
    1411155U,	// MTFSB1
    1073778942U,	// MTFSF
    1073779589U,	// MTFSFI
    1073775506U,	// MTFSFI_rec
    1073775334U,	// MTFSF_rec
    37118U,	// MTFSFb
    1090886U,	// MTLR
    1090886U,	// MTLR8
    201369044U,	// MTMSR
    201363115U,	// MTMSRD
    463059U,	// MTOCRF
    463059U,	// MTOCRF8
    42328U,	// MTPMR
    42432U,	// MTSPR
    42432U,	// MTSPR8
    501211U,	// MTSR
    39188U,	// MTSRIN
    36539U,	// MTVRD
    1081579U,	// MTVRSAVE
    1442027U,	// MTVRSAVEv
    35492U,	// MTVRWA
    46759U,	// MTVRWZ
    1090814U,	// MTVSCR
    38522U,	// MTVSRBM
    637572045U,	// MTVSRBMI
    36539U,	// MTVSRD
    1073778107U,	// MTVSRDD
    38594U,	// MTVSRDM
    38700U,	// MTVSRHM
    38865U,	// MTVSRQM
    35492U,	// MTVSRWA
    38977U,	// MTVSRWM
    43147U,	// MTVSRWS
    46759U,	// MTVSRWZ
    1073778169U,	// MULHD
    1073785540U,	// MULHDU
    1073776390U,	// MULHDU_rec
    1073775113U,	// MULHD_rec
    1073786277U,	// MULHW
    1073785662U,	// MULHWU
    1073776443U,	// MULHWU_rec
    1073776499U,	// MULHW_rec
    1073778226U,	// MULLD
    1073781219U,	// MULLDO
    1073775793U,	// MULLDO_rec
    1073775137U,	// MULLD_rec
    1073779639U,	// MULLI
    1073779639U,	// MULLI8
    1073786327U,	// MULLW
    1073781506U,	// MULLWO
    1073775936U,	// MULLWO_rec
    1073776515U,	// MULLW_rec
    16670U,	// MoveGOTtoLR
    16658U,	// MovePCtoLR
    15948U,	// MovePCtoLR8
    1073778290U,	// NAND
    1073778290U,	// NAND8
    1073775151U,	// NAND8_rec
    1073775151U,	// NAND_rec
    17109U,	// NAP
    37249U,	// NEG
    37249U,	// NEG8
    39482U,	// NEG8O
    34067U,	// NEG8O_rec
    33519U,	// NEG8_rec
    39482U,	// NEGO
    34067U,	// NEGO_rec
    33519U,	// NEG_rec
    17118U,	// NOP
    14255U,	// NOP_GT_PWR6
    14267U,	// NOP_GT_PWR7
    1073784186U,	// NOR
    1073784186U,	// NOR8
    1073776186U,	// NOR8_rec
    1073776186U,	// NOR_rec
    1073784179U,	// OR
    1073784179U,	// OR8
    1073776187U,	// OR8_rec
    1073777944U,	// ORC
    1073777944U,	// ORC8
    1073775065U,	// ORC8_rec
    1073775065U,	// ORC_rec
    1073779861U,	// ORI
    1073779861U,	// ORI8
    1073784782U,	// ORIS
    1073784782U,	// ORIS8
    1073776187U,	// OR_rec
    1073779494U,	// PADDI
    1073779494U,	// PADDI8
    671126310U,	// PADDI8pc
    17038U,	// PADDIdtprel
    671126310U,	// PADDIpc
    1073778327U,	// PDEPD
    1073778509U,	// PEXTD
    704689591U,	// PLBZ
    704689591U,	// PLBZ8
    738244023U,	// PLBZ8pc
    738244023U,	// PLBZpc
    704679483U,	// PLD
    738233915U,	// PLDpc
    704679389U,	// PLFD
    738233821U,	// PLFDpc
    704685883U,	// PLFS
    738240315U,	// PLFSpc
    704678422U,	// PLHA
    704678422U,	// PLHA8
    738232854U,	// PLHA8pc
    738232854U,	// PLHApc
    704689665U,	// PLHZ
    704689665U,	// PLHZ8
    738244097U,	// PLHZ8pc
    738244097U,	// PLHZpc
    771789758U,	// PLI
    771789758U,	// PLI8
    704678558U,	// PLWA
    704678558U,	// PLWA8
    738232990U,	// PLWA8pc
    738232990U,	// PLWApc
    704689816U,	// PLWZ
    704689816U,	// PLWZ8
    738244248U,	// PLWZ8pc
    738244248U,	// PLWZpc
    704679704U,	// PLXSD
    738234136U,	// PLXSDpc
    704684771U,	// PLXSSP
    738239203U,	// PLXSSPpc
    704687048U,	// PLXV
    704684889U,	// PLXVP
    738239321U,	// PLXVPpc
    738241480U,	// PLXVpc
    1073776753U,	// PMXVBF16GER2
    2449512732U,	// PMXVBF16GER2NN
    2449514306U,	// PMXVBF16GER2NP
    2449512791U,	// PMXVBF16GER2PN
    2449514365U,	// PMXVBF16GER2PP
    1073776767U,	// PMXVF16GER2
    2449512748U,	// PMXVF16GER2NN
    2449514322U,	// PMXVF16GER2NP
    2449512807U,	// PMXVF16GER2PN
    2449514381U,	// PMXVF16GER2PP
    1073784070U,	// PMXVF32GER
    2449512763U,	// PMXVF32GERNN
    2449514337U,	// PMXVF32GERNP
    2449512833U,	// PMXVF32GERPN
    2449514439U,	// PMXVF32GERPP
    1073784082U,	// PMXVF64GER
    2449512777U,	// PMXVF64GERNN
    2449514351U,	// PMXVF64GERNP
    2449512847U,	// PMXVF64GERPN
    2449514453U,	// PMXVF64GERPP
    1073776780U,	// PMXVI16GER2
    2449514396U,	// PMXVI16GER2PP
    1073784316U,	// PMXVI16GER2S
    2449514467U,	// PMXVI16GER2SPP
    1073776881U,	// PMXVI4GER8
    2449514425U,	// PMXVI4GER8PP
    1073776793U,	// PMXVI8GER4
    2449514411U,	// PMXVI8GER4PP
    2449514483U,	// PMXVI8GER4SPP
    35781U,	// POPCNTB
    36659U,	// POPCNTD
    44942U,	// POPCNTW
    16788U,	// PPC32GOT
    16798U,	// PPC32PICGOT
    14702U,	// PREPARE_PROBED_ALLOCA_32
    15123U,	// PREPARE_PROBED_ALLOCA_64
    14750U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    15171U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    14684U,	// PROBED_ALLOCA_32
    15105U,	// PROBED_ALLOCA_64
    14728U,	// PROBED_STACKALLOC_32
    15149U,	// PROBED_STACKALLOC_64
    704678872U,	// PSTB
    704678872U,	// PSTB8
    738233304U,	// PSTB8pc
    738233304U,	// PSTBpc
    704679750U,	// PSTD
    738234182U,	// PSTDpc
    704679395U,	// PSTFD
    738233827U,	// PSTFDpc
    704685896U,	// PSTFS
    738240328U,	// PSTFSpc
    704680563U,	// PSTH
    704680563U,	// PSTH8
    738234995U,	// PSTH8pc
    738234995U,	// PSTHpc
    704688044U,	// PSTW
    704688044U,	// PSTW8
    738242476U,	// PSTW8pc
    738242476U,	// PSTWpc
    704679711U,	// PSTXSD
    738234143U,	// PSTXSDpc
    704684779U,	// PSTXSSP
    738239211U,	// PSTXSSPpc
    704687054U,	// PSTXV
    704684896U,	// PSTXVP
    738239328U,	// PSTXVPpc
    738241486U,	// PSTXVpc
    16139U,	// RESTORE_ACC
    16567U,	// RESTORE_CR
    16722U,	// RESTORE_CRBIT
    16113U,	// RESTORE_UACC
    17014U,	// RFCI
    17025U,	// RFDI
    527041U,	// RFEBB
    17030U,	// RFI
    16988U,	// RFID
    17019U,	// RFMCI
    1073780141U,	// RLDCL
    1073775627U,	// RLDCL_rec
    1073784026U,	// RLDCR
    1073776153U,	// RLDCR_rec
    1073777879U,	// RLDIC
    1073780148U,	// RLDICL
    1073780148U,	// RLDICL_32
    1073780148U,	// RLDICL_32_64
    1073775635U,	// RLDICL_32_rec
    1073775635U,	// RLDICL_rec
    1073784046U,	// RLDICR
    1073784046U,	// RLDICR_32
    1073776161U,	// RLDICR_rec
    1073775034U,	// RLDIC_rec
    3523253215U,	// RLDIMI
    3523249062U,	// RLDIMI_rec
    302027751U,	// RLWIMI
    302027751U,	// RLWIMI8
    302023599U,	// RLWIMI8_rec
    302023599U,	// RLWIMI_rec
    1073780654U,	// RLWINM
    1073780654U,	// RLWINM8
    1073775686U,	// RLWINM8_rec
    1073775686U,	// RLWINM_rec
    1073780671U,	// RLWNM
    1073780671U,	// RLWNM8
    1073775695U,	// RLWNM8_rec
    1073775695U,	// RLWNM_rec
    16105U,	// ReadTB
    1084715U,	// SC
    15388U,	// SELECT_CC_F16
    15310U,	// SELECT_CC_F4
    15677U,	// SELECT_CC_F8
    15335U,	// SELECT_CC_I4
    15722U,	// SELECT_CC_I8
    16349U,	// SELECT_CC_SPE
    15281U,	// SELECT_CC_SPE4
    16204U,	// SELECT_CC_VRRC
    16173U,	// SELECT_CC_VSFRC
    16264U,	// SELECT_CC_VSRC
    16233U,	// SELECT_CC_VSSRC
    15403U,	// SELECT_F16
    15324U,	// SELECT_F4
    15691U,	// SELECT_F8
    15349U,	// SELECT_I4
    15896U,	// SELECT_I8
    16364U,	// SELECT_SPE
    15297U,	// SELECT_SPE4
    16220U,	// SELECT_VRRC
    16190U,	// SELECT_VSFRC
    16280U,	// SELECT_VSRC
    16250U,	// SELECT_VSSRC
    35760U,	// SETB
    35760U,	// SETB8
    35978U,	// SETBC
    35978U,	// SETBC8
    42187U,	// SETBCR
    42187U,	// SETBCR8
    16533U,	// SETFLM
    35970U,	// SETNBC
    35970U,	// SETNBC8
    42178U,	// SETNBCR
    42178U,	// SETNBCR8
    16321U,	// SETRND
    17005U,	// SETRNDi
    33420U,	// SLBFEE_rec
    16908U,	// SLBIA
    1085483U,	// SLBIE
    37238U,	// SLBIEG
    36867U,	// SLBMFEE
    43895U,	// SLBMFEV
    36948U,	// SLBMTE
    16936U,	// SLBSYNC
    1073778256U,	// SLD
    1073775145U,	// SLD_rec
    1073786350U,	// SLW
    1073786350U,	// SLW8
    1073776523U,	// SLW8_rec
    1073776523U,	// SLW_rec
    67155609U,	// SPELWZ
    134264229U,	// SPELWZX
    67153837U,	// SPESTW
    134264176U,	// SPESTWX
    16152U,	// SPILL_ACC
    16579U,	// SPILL_CR
    16737U,	// SPILL_CRBIT
    16127U,	// SPILL_UACC
    1073778023U,	// SRAD
    1073779487U,	// SRADI
    1073779487U,	// SRADI_32
    1073775435U,	// SRADI_rec
    1073775082U,	// SRAD_rec
    1073786162U,	// SRAW
    1073779988U,	// SRAWI
    1073775544U,	// SRAWI_rec
    1073776482U,	// SRAW_rec
    1073778350U,	// SRD
    1073775165U,	// SRD_rec
    1073786605U,	// SRW
    1073786605U,	// SRW8
    1073776529U,	// SRW8_rec
    1073776529U,	// SRW_rec
    67144665U,	// STB
    67144665U,	// STB8
    1073787343U,	// STBCIX
    134252516U,	// STBCX
    134263511U,	// STBEPX
    436611752U,	// STBU
    436611752U,	// STBU8
    470168752U,	// STBUX
    470168752U,	// STBUX8
    134263062U,	// STBX
    134263062U,	// STBX8
    1073787158U,	// STBXTLS
    1073787158U,	// STBXTLS_
    1073787158U,	// STBXTLS_32
    67145543U,	// STD
    1073785138U,	// STDAT
    134263658U,	// STDBRX
    1073787358U,	// STDCIX
    134252524U,	// STDCX
    436611809U,	// STDU
    470168780U,	// STDUX
    134263148U,	// STDX
    1073787244U,	// STDXTLS
    1073787244U,	// STDXTLS_
    67145188U,	// STFD
    134263527U,	// STFDEPX
    436611764U,	// STFDU
    470168766U,	// STFDUX
    134263104U,	// STFDX
    134264142U,	// STFIWX
    67151689U,	// STFS
    436611875U,	// STFSU
    470168818U,	// STFSUX
    134263875U,	// STFSX
    67146356U,	// STH
    67146356U,	// STH8
    134263673U,	// STHBRX
    1073787366U,	// STHCIX
    134252532U,	// STHCX
    134263543U,	// STHEPX
    436611838U,	// STHU
    436611838U,	// STHU8
    470168794U,	// STHUX
    470168794U,	// STHUX8
    134263241U,	// STHX
    134263241U,	// STHX8
    1073787337U,	// STHXTLS
    1073787337U,	// STHXTLS_
    1073787337U,	// STHXTLS_32
    67153400U,	// STMW
    17122U,	// STOP
    1073780099U,	// STSWI
    134263028U,	// STVEBX
    134263207U,	// STVEHX
    134264134U,	// STVEWX
    134264091U,	// STVX
    134256202U,	// STVXL
    67153837U,	// STW
    67153837U,	// STW8
    1073785216U,	// STWAT
    134263707U,	// STWBRX
    1073787374U,	// STWCIX
    134252540U,	// STWCX
    134263558U,	// STWEPX
    436611926U,	// STWU
    436611926U,	// STWU8
    470168826U,	// STWUX
    470168826U,	// STWUX8
    134264176U,	// STWX
    134264176U,	// STWX8
    1073788272U,	// STWXTLS
    1073788272U,	// STWXTLS_
    1073788272U,	// STWXTLS_32
    67145504U,	// STXSD
    134263140U,	// STXSDX
    134263036U,	// STXSIBX
    134263036U,	// STXSIBXv
    134263215U,	// STXSIHX
    134263215U,	// STXSIHXv
    134264150U,	// STXSIWX
    67150572U,	// STXSSP
    134263599U,	// STXSSPX
    67152847U,	// STXV
    134262956U,	// STXVB16X
    134262921U,	// STXVD2X
    134262974U,	// STXVH8X
    1073780285U,	// STXVL
    1073780212U,	// STXVLL
    67150689U,	// STXVP
    134263615U,	// STXVPX
    134263053U,	// STXVRBX
    134263124U,	// STXVRDX
    134263232U,	// STXVRHX
    134264167U,	// STXVRWX
    134262938U,	// STXVW4X
    134264103U,	// STXVX
    1073778840U,	// SUBF
    1073778840U,	// SUBF8
    1073781299U,	// SUBF8O
    1073775883U,	// SUBF8O_rec
    1073775327U,	// SUBF8_rec
    1073777858U,	// SUBFC
    1073777858U,	// SUBFC8
    1073781205U,	// SUBFC8O
    1073775777U,	// SUBFC8O_rec
    1073775010U,	// SUBFC8_rec
    1073781205U,	// SUBFCO
    1073775777U,	// SUBFCO_rec
    1073775010U,	// SUBFC_rec
    1073778707U,	// SUBFE
    1073778707U,	// SUBFE8
    1073781249U,	// SUBFE8O
    1073775827U,	// SUBFE8O_rec
    1073775253U,	// SUBFE8_rec
    1073781249U,	// SUBFEO
    1073775827U,	// SUBFEO_rec
    1073775253U,	// SUBFE_rec
    1073777886U,	// SUBFIC
    1073777886U,	// SUBFIC8
    36928U,	// SUBFME
    36928U,	// SUBFME8
    39441U,	// SUBFME8O
    34021U,	// SUBFME8O_rec
    33445U,	// SUBFME8_rec
    39441U,	// SUBFMEO
    34021U,	// SUBFMEO_rec
    33445U,	// SUBFME_rec
    1073781299U,	// SUBFO
    1073775883U,	// SUBFO_rec
    37002U,	// SUBFZE
    37002U,	// SUBFZE8
    39466U,	// SUBFZE8O
    34049U,	// SUBFZE8O_rec
    33494U,	// SUBFZE8_rec
    39466U,	// SUBFZEO
    34049U,	// SUBFZEO_rec
    33494U,	// SUBFZE_rec
    1073775327U,	// SUBF_rec
    560399U,	// SYNC
    1083125U,	// TABORT
    1074102679U,	// TABORTDC
    1074103091U,	// TABORTDCI
    1074102751U,	// TABORTWC
    1074103103U,	// TABORTWCI
    1182398U,	// TAILB
    1182398U,	// TAILB8
    1214903U,	// TAILBA
    1214903U,	// TAILBA8
    17144U,	// TAILBCTR
    17144U,	// TAILBCTR8
    525440U,	// TBEGIN
    16695U,	// TBEGIN_RET
    1086863U,	// TCHECK
    16683U,	// TCHECK_RET
    2263342U,	// TCRETURNai
    2263239U,	// TCRETURNai8
    2231629U,	// TCRETURNdi
    2230485U,	// TCRETURNdi8
    2139302U,	// TCRETURNri
    2132195U,	// TCRETURNri8
    1074106158U,	// TD
    1074107256U,	// TDI
    524854U,	// TEND
    16914U,	// TLBIA
    251007026U,	// TLBIE
    1086908U,	// TLBIEL
    45261U,	// TLBIVAX
    1084962U,	// TLBLD
    1086384U,	// TLBLI
    16993U,	// TLBRE
    1073778760U,	// TLBRE2
    46119U,	// TLBSX
    1073787943U,	// TLBSX2
    1073776644U,	// TLBSX2D
    16944U,	// TLBSYNC
    16999U,	// TLBWE
    1073778796U,	// TLBWE2
    17113U,	// TRAP
    14245U,	// TRECHKPT
    1082420U,	// TRECLAIM
    525902U,	// TSR
    1074114432U,	// TW
    1074107786U,	// TWI
    16541U,	// UNENCODED_NOP
    16556U,	// UpdateGBR
    1073777630U,	// VABSDUB
    1073779321U,	// VABSDUH
    1073786828U,	// VABSDUW
    1073783869U,	// VADDCUQ
    1073786811U,	// VADDCUW
    1073783900U,	// VADDECUQ
    1073780738U,	// VADDEUQM
    1073782435U,	// VADDFP
    1073784422U,	// VADDSBS
    1073784697U,	// VADDSHS
    1073784999U,	// VADDSWS
    1073780376U,	// VADDUBM
    1073784450U,	// VADDUBS
    1073780448U,	// VADDUDM
    1073780575U,	// VADDUHM
    1073784725U,	// VADDUHS
    1073780719U,	// VADDUQM
    1073780831U,	// VADDUWM
    1073785026U,	// VADDUWS
    1073778320U,	// VAND
    1073777851U,	// VANDC
    1073777504U,	// VAVGSB
    1073779207U,	// VAVGSH
    1073786636U,	// VAVGSW
    1073777648U,	// VAVGUB
    1073779339U,	// VAVGUH
    1073786855U,	// VAVGUW
    1073778261U,	// VBPERMD
    1073783774U,	// VBPERMQ
    1375777846U,	// VCFSX
    2147529782U,	// VCFSX_0
    1073778124U,	// VCFUGED
    1375778003U,	// VCFUX
    2147529939U,	// VCFUX_0
    1073784104U,	// VCIPHER
    1073785424U,	// VCIPHERLAST
    1073777425U,	// VCLRLB
    1073777481U,	// VCLRRB
    35956U,	// VCLZB
    36807U,	// VCLZD
    1073780479U,	// VCLZDM
    37601U,	// VCLZH
    35546U,	// VCLZLSBB
    45153U,	// VCLZW
    1073782399U,	// VCMPBFP
    1073775989U,	// VCMPBFP_rec
    1073782498U,	// VCMPEQFP
    1073776010U,	// VCMPEQFP_rec
    1073777673U,	// VCMPEQUB
    1073774928U,	// VCMPEQUB_rec
    1073778578U,	// VCMPEQUD
    1073775182U,	// VCMPEQUD_rec
    1073779364U,	// VCMPEQUH
    1073775378U,	// VCMPEQUH_rec
    1073783946U,	// VCMPEQUQ
    1073776121U,	// VCMPEQUQ_rec
    1073786889U,	// VCMPEQUW
    1073776554U,	// VCMPEQUW_rec
    1073782452U,	// VCMPGEFP
    1073775999U,	// VCMPGEFP_rec
    1073782508U,	// VCMPGTFP
    1073776021U,	// VCMPGTFP_rec
    1073777557U,	// VCMPGTSB
    1073774909U,	// VCMPGTSB_rec
    1073778430U,	// VCMPGTSD
    1073775171U,	// VCMPGTSD_rec
    1073779260U,	// VCMPGTSH
    1073775359U,	// VCMPGTSH_rec
    1073783821U,	// VCMPGTSQ
    1073776110U,	// VCMPGTSQ_rec
    1073786715U,	// VCMPGTSW
    1073776535U,	// VCMPGTSW_rec
    1073777741U,	// VCMPGTUB
    1073774963U,	// VCMPGTUB_rec
    1073778588U,	// VCMPGTUD
    1073775193U,	// VCMPGTUD_rec
    1073779386U,	// VCMPGTUH
    1073775389U,	// VCMPGTUH_rec
    1073783956U,	// VCMPGTUQ
    1073776132U,	// VCMPGTUQ_rec
    1073786924U,	// VCMPGTUW
    1073776565U,	// VCMPGTUW_rec
    1073777390U,	// VCMPNEB
    1073774899U,	// VCMPNEB_rec
    1073779139U,	// VCMPNEH
    1073775349U,	// VCMPNEH_rec
    1073786225U,	// VCMPNEW
    1073776489U,	// VCMPNEW_rec
    1073777770U,	// VCMPNEZB
    1073774974U,	// VCMPNEZB_rec
    1073779415U,	// VCMPNEZH
    1073775400U,	// VCMPNEZH_rec
    1073786967U,	// VCMPNEZW
    1073776583U,	// VCMPNEZW_rec
    1073783813U,	// VCMPSQ
    1073783938U,	// VCMPUQ
    1073777352U,	// VCNTMBB
    1073778036U,	// VCNTMBD
    1073779115U,	// VCNTMBH
    1073786168U,	// VCNTMBW
    1375775004U,	// VCTSXS
    2147526940U,	// VCTSXS_0
    1375775012U,	// VCTUXS
    2147526948U,	// VCTUXS_0
    35963U,	// VCTZB
    36822U,	// VCTZD
    1073780496U,	// VCTZDM
    37608U,	// VCTZH
    35556U,	// VCTZLSBB
    45170U,	// VCTZW
    1073778388U,	// VDIVESD
    1073783804U,	// VDIVESQ
    1073786627U,	// VDIVESW
    1073778543U,	// VDIVEUD
    1073783929U,	// VDIVEUQ
    1073786846U,	// VDIVEUW
    1073778440U,	// VDIVSD
    1073783831U,	// VDIVSQ
    1073786732U,	// VDIVSW
    1073778598U,	// VDIVUD
    1073783966U,	// VDIVUQ
    1073786934U,	// VDIVUW
    1073785788U,	// VEQV
    38501U,	// VEXPANDBM
    38583U,	// VEXPANDDM
    38689U,	// VEXPANDHM
    38854U,	// VEXPANDQM
    38966U,	// VEXPANDWM
    40645U,	// VEXPTEFP
    1073787484U,	// VEXTDDVLX
    1073787861U,	// VEXTDDVRX
    1073787472U,	// VEXTDUBVLX
    1073787849U,	// VEXTDUBVRX
    1073787505U,	// VEXTDUHVLX
    1073787882U,	// VEXTDUHVRX
    1073787527U,	// VEXTDUWVLX
    1073787904U,	// VEXTDUWVRX
    38531U,	// VEXTRACTBM
    3523252007U,	// VEXTRACTD
    38603U,	// VEXTRACTDM
    38719U,	// VEXTRACTHM
    38874U,	// VEXTRACTQM
    3523251265U,	// VEXTRACTUB
    3523252910U,	// VEXTRACTUH
    3523260435U,	// VEXTRACTUW
    38986U,	// VEXTRACTWM
    36143U,	// VEXTSB2D
    36143U,	// VEXTSB2Ds
    43989U,	// VEXTSB2W
    43989U,	// VEXTSB2Ws
    41841U,	// VEXTSD2Q
    36153U,	// VEXTSH2D
    36153U,	// VEXTSH2Ds
    43999U,	// VEXTSH2W
    43999U,	// VEXTSH2Ws
    36163U,	// VEXTSW2D
    36163U,	// VEXTSW2Ds
    1073787424U,	// VEXTUBLX
    1073787786U,	// VEXTUBRX
    1073787452U,	// VEXTUHLX
    1073787829U,	// VEXTUHRX
    1073787548U,	// VEXTUWLX
    1073787925U,	// VEXTUWRX
    36205U,	// VGBBD
    1073777454U,	// VGNB
    2449519127U,	// VINSBLX
    2449519489U,	// VINSBRX
    2449519174U,	// VINSBVLX
    2449519551U,	// VINSBVRX
    805342958U,	// VINSD
    2449519146U,	// VINSDLX
    2449519523U,	// VINSDRX
    805342158U,	// VINSERTB
    3523252028U,	// VINSERTD
    805343849U,	// VINSERTH
    3523260311U,	// VINSERTW
    2449519155U,	// VINSHLX
    2449519532U,	// VINSHRX
    2449519207U,	// VINSHVLX
    2449519584U,	// VINSHVRX
    805351243U,	// VINSW
    2449519251U,	// VINSWLX
    2449519628U,	// VINSWRX
    2449519229U,	// VINSWVLX
    2449519606U,	// VINSWVRX
    40619U,	// VLOGEFP
    1073782426U,	// VMADDFP
    1073782518U,	// VMAXFP
    1073777576U,	// VMAXSB
    1073778448U,	// VMAXSD
    1073779279U,	// VMAXSH
    1073786740U,	// VMAXSW
    1073777751U,	// VMAXUB
    1073778606U,	// VMAXUD
    1073779396U,	// VMAXUH
    1073786942U,	// VMAXUW
    1073784674U,	// VMHADDSHS
    1073784685U,	// VMHRADDSHS
    1073782490U,	// VMINFP
    1073777540U,	// VMINSB
    1073778406U,	// VMINSD
    1073779243U,	// VMINSH
    1073786691U,	// VMINSW
    1073777656U,	// VMINUB
    1073778561U,	// VMINUD
    1073779347U,	// VMINUH
    1073786872U,	// VMINUW
    1073780564U,	// VMLADDUHM
    1073778371U,	// VMODSD
    1073783796U,	// VMODSQ
    1073786610U,	// VMODSW
    1073778526U,	// VMODUD
    1073783910U,	// VMODUQ
    1073786820U,	// VMODUW
    1073786217U,	// VMRGEW
    1073777399U,	// VMRGHB
    1073779148U,	// VMRGHH
    1073786260U,	// VMRGHW
    1073777417U,	// VMRGLB
    1073779156U,	// VMRGLH
    1073786310U,	// VMRGLW
    1073786583U,	// VMRGOW
    1073778516U,	// VMSUMCUD
    1073780336U,	// VMSUMMBM
    1073780533U,	// VMSUMSHM
    1073784706U,	// VMSUMSHS
    1073780385U,	// VMSUMUBM
    1073780457U,	// VMSUMUDM
    1073780584U,	// VMSUMUHM
    1073784734U,	// VMSUMUHS
    42025U,	// VMUL10CUQ
    1073783878U,	// VMUL10ECUQ
    1073783918U,	// VMUL10EUQ
    42015U,	// VMUL10UQ
    1073777495U,	// VMULESB
    1073778379U,	// VMULESD
    1073779198U,	// VMULESH
    1073786618U,	// VMULESW
    1073777639U,	// VMULEUB
    1073778534U,	// VMULEUD
    1073779330U,	// VMULEUH
    1073786837U,	// VMULEUW
    1073778397U,	// VMULHSD
    1073786653U,	// VMULHSW
    1073778552U,	// VMULHUD
    1073786863U,	// VMULHUW
    1073778225U,	// VMULLD
    1073777548U,	// VMULOSB
    1073778421U,	// VMULOSD
    1073779251U,	// VMULOSH
    1073786706U,	// VMULOSW
    1073777664U,	// VMULOUB
    1073778569U,	// VMULOUD
    1073779355U,	// VMULOUH
    1073786880U,	// VMULOUW
    1073780840U,	// VMULUWM
    1073778305U,	// VNAND
    1073784094U,	// VNCIPHER
    1073785410U,	// VNCIPHERLAST
    36330U,	// VNEGD
    44429U,	// VNEGW
    1073782408U,	// VNMSUBFP
    1073784199U,	// VNOR
    1073784212U,	// VOR
    1073777957U,	// VORC
    1073778326U,	// VPDEPD
    1073780748U,	// VPERM
    1073784159U,	// VPERMR
    1073784225U,	// VPERMXOR
    1073778508U,	// VPEXTD
    1073787671U,	// VPKPX
    1073784838U,	// VPKSDSS
    1073784902U,	// VPKSDUS
    1073784847U,	// VPKSHSS
    1073784920U,	// VPKSHUS
    1073784856U,	// VPKSWSS
    1073784938U,	// VPKSWUS
    1073780763U,	// VPKUDUM
    1073784911U,	// VPKUDUS
    1073780772U,	// VPKUHUM
    1073784929U,	// VPKUHUS
    1073780781U,	// VPKUWUM
    1073784947U,	// VPKUWUS
    1073777445U,	// VPMSUMB
    1073778270U,	// VPMSUMD
    1073779176U,	// VPMSUMH
    1073786366U,	// VPMSUMW
    35780U,	// VPOPCNTB
    36658U,	// VPOPCNTD
    37471U,	// VPOPCNTH
    44941U,	// VPOPCNTW
    36221U,	// VPRTYBD
    41858U,	// VPRTYBQ
    44353U,	// VPRTYBW
    40638U,	// VREFP
    38782U,	// VRFIM
    39167U,	// VRFIN
    40722U,	// VRFIP
    46599U,	// VRFIZ
    1073777433U,	// VRLB
    1073778249U,	// VRLD
    1073779671U,	// VRLDMI
    1073780646U,	// VRLDNM
    1073779164U,	// VRLH
    1073783762U,	// VRLQ
    1073779695U,	// VRLQMI
    1073780662U,	// VRLQNM
    1073786342U,	// VRLW
    1073779791U,	// VRLWMI
    1073780670U,	// VRLWNM
    40655U,	// VRSQRTEFP
    45749U,	// VSBOX
    1073780176U,	// VSEL
    1073778010U,	// VSHASIGMAD
    1073786149U,	// VSHASIGMAW
    1073780243U,	// VSL
    1073777439U,	// VSLB
    1073778255U,	// VSLD
    1073779451U,	// VSLDBI
    1073779820U,	// VSLDOI
    1073779170U,	// VSLH
    1073781345U,	// VSLO
    1073783768U,	// VSLQ
    1073785766U,	// VSLV
    1073786349U,	// VSLW
    1375767484U,	// VSPLTB
    1375767484U,	// VSPLTBs
    1375769175U,	// VSPLTH
    1375769175U,	// VSPLTHs
    335580017U,	// VSPLTISB
    335581720U,	// VSPLTISH
    335589158U,	// VSPLTISW
    1375776636U,	// VSPLTW
    1073784290U,	// VSR
    1073777338U,	// VSRAB
    1073778022U,	// VSRAD
    1073779108U,	// VSRAH
    1073783675U,	// VSRAQ
    1073786161U,	// VSRAW
    1073777489U,	// VSRB
    1073778357U,	// VSRD
    1073779459U,	// VSRDBI
    1073779192U,	// VSRH
    1073781466U,	// VSRO
    1073783790U,	// VSRQ
    1073785794U,	// VSRV
    1073786604U,	// VSRW
    38303U,	// VSTRIBL
    33793U,	// VSTRIBL_rec
    42169U,	// VSTRIBR
    34319U,	// VSTRIBR_rec
    38372U,	// VSTRIHL
    33827U,	// VSTRIHL_rec
    42289U,	// VSTRIHR
    34346U,	// VSTRIHR_rec
    1073783860U,	// VSUBCUQ
    1073786802U,	// VSUBCUW
    1073783890U,	// VSUBECUQ
    1073780728U,	// VSUBEUQM
    1073782418U,	// VSUBFP
    1073784413U,	// VSUBSBS
    1073784665U,	// VSUBSHS
    1073784990U,	// VSUBSWS
    1073780367U,	// VSUBUBM
    1073784441U,	// VSUBUBS
    1073780439U,	// VSUBUDM
    1073780555U,	// VSUBUHM
    1073784716U,	// VSUBUHS
    1073780710U,	// VSUBUQM
    1073780822U,	// VSUBUWM
    1073785017U,	// VSUBUWS
    1073784980U,	// VSUM2SWS
    1073784403U,	// VSUM4SBS
    1073784655U,	// VSUM4SHS
    1073784431U,	// VSUM4UBS
    1073785008U,	// VSUMSWS
    45838U,	// VUPKHPX
    35688U,	// VUPKHSB
    37391U,	// VUPKHSH
    44820U,	// VUPKHSW
    45854U,	// VUPKLPX
    35707U,	// VUPKLSB
    37410U,	// VUPKLSH
    44848U,	// VUPKLSW
    1073784243U,	// VXOR
    1308665267U,	// V_SET0
    1308665267U,	// V_SET0B
    1308665267U,	// V_SET0H
    18919206U,	// V_SETALLONES
    18919206U,	// V_SETALLONESB
    18919206U,	// V_SETALLONESH
    567779U,	// WAIT
    1085452U,	// WRTEE
    1086333U,	// WRTEEI
    1073784220U,	// XOR
    1073784220U,	// XOR8
    1073776192U,	// XOR8_rec
    1073779860U,	// XORI
    1073779860U,	// XORI8
    1073784781U,	// XORIS
    1073784781U,	// XORIS8
    1073776192U,	// XOR_rec
    40345U,	// XSABSDP
    41174U,	// XSABSQP
    1073781682U,	// XSADDDP
    1073782848U,	// XSADDQP
    1073781425U,	// XSADDQPO
    1073783168U,	// XSADDSP
    1073782127U,	// XSCMPEQDP
    1073782095U,	// XSCMPEXPDP
    1073782946U,	// XSCMPEXPQP
    1073781744U,	// XSCMPGEDP
    1073782187U,	// XSCMPGTDP
    1073782025U,	// XSCMPODP
    1073782916U,	// XSCMPOQP
    1073782251U,	// XSCMPUDP
    1073783017U,	// XSCMPUQP
    1073781985U,	// XSCPSGNDP
    1073782905U,	// XSCPSGNQP
    40702U,	// XSCVDPHP
    41102U,	// XSCVDPQP
    41606U,	// XSCVDPSP
    39338U,	// XSCVDPSPN
    42709U,	// XSCVDPSXDS
    42709U,	// XSCVDPSXDSs
    43220U,	// XSCVDPSXWS
    43220U,	// XSCVDPSXWSs
    42745U,	// XSCVDPUXDS
    42745U,	// XSCVDPUXDSs
    43256U,	// XSCVDPUXWS
    43256U,	// XSCVDPUXWSs
    40211U,	// XSCVHPDP
    40221U,	// XSCVQPDP
    39527U,	// XSCVQPDPO
    46571U,	// XSCVQPSDZ
    46696U,	// XSCVQPSQZ
    46768U,	// XSCVQPSWZ
    46582U,	// XSCVQPUDZ
    46707U,	// XSCVQPUQZ
    46779U,	// XSCVQPUWZ
    41033U,	// XSCVSDQP
    40231U,	// XSCVSPDP
    39286U,	// XSCVSPDPN
    41144U,	// XSCVSQQP
    39876U,	// XSCVSXDDP
    41362U,	// XSCVSXDSP
    41043U,	// XSCVUDQP
    41154U,	// XSCVUQQP
    39898U,	// XSCVUXDDP
    41384U,	// XSCVUXDSP
    1073782261U,	// XSDIVDP
    1073783027U,	// XSDIVQP
    1073781456U,	// XSDIVQPO
    1073783582U,	// XSDIVSP
    1073782075U,	// XSIEXPDP
    1073782936U,	// XSIEXPQP
    2449513312U,	// XSMADDADP
    2449514818U,	// XSMADDASP
    2449513675U,	// XSMADDMDP
    2449515100U,	// XSMADDMSP
    2449514550U,	// XSMADDQP
    2449513126U,	// XSMADDQPO
    1073781672U,	// XSMAXCDP
    1073782321U,	// XSMAXDP
    1073781865U,	// XSMAXJDP
    1073781662U,	// XSMINCDP
    1073782007U,	// XSMINDP
    1073781855U,	// XSMINJDP
    2449513266U,	// XSMSUBADP
    2449514772U,	// XSMSUBASP
    2449513629U,	// XSMSUBMDP
    2449515054U,	// XSMSUBMSP
    2449514509U,	// XSMSUBQP
    2449513093U,	// XSMSUBQPO
    1073781875U,	// XSMULDP
    1073782896U,	// XSMULQP
    1073781435U,	// XSMULQPO
    1073783300U,	// XSMULSP
    40325U,	// XSNABSDP
    41164U,	// XSNABSQP
    39982U,	// XSNEGDP
    41053U,	// XSNEGQP
    2449513288U,	// XSNMADDADP
    2449514794U,	// XSNMADDASP
    2449513651U,	// XSNMADDMDP
    2449515076U,	// XSNMADDMSP
    2449514539U,	// XSNMADDQP
    2449513114U,	// XSNMADDQPO
    2449513242U,	// XSNMSUBADP
    2449514748U,	// XSNMSUBASP
    2449513605U,	// XSNMSUBMDP
    2449515030U,	// XSNMSUBMSP
    2449514498U,	// XSNMSUBQP
    2449513081U,	// XSNMSUBQPO
    38004U,	// XSRDPI
    36070U,	// XSRDPIC
    38789U,	// XSRDPIM
    40729U,	// XSRDPIP
    46606U,	// XSRDPIZ
    39942U,	// XSREDP
    41417U,	// XSRESP
    595076U,	// XSRQPI
    602638U,	// XSRQPIX
    598888U,	// XSRQPXP
    41673U,	// XSRSP
    39958U,	// XSRSQRTEDP
    41433U,	// XSRSQRTESP
    40385U,	// XSSQRTDP
    41183U,	// XSSQRTQP
    39621U,	// XSSQRTQPO
    41727U,	// XSSQRTSP
    1073781622U,	// XSSUBDP
    1073782807U,	// XSSUBQP
    1073781392U,	// XSSUBQPO
    1073783128U,	// XSSUBSP
    1073782270U,	// XSTDIVDP
    40395U,	// XSTSQRTDP
    302029704U,	// XSTSTDCDP
    302030880U,	// XSTSTDCQP
    302031210U,	// XSTSTDCSP
    40283U,	// XSXEXPDP
    41134U,	// XSXEXPQP
    40000U,	// XSXSIGDP
    41062U,	// XSXSIGQP
    40354U,	// XVABSDP
    41690U,	// XVABSSP
    1073781691U,	// XVADDDP
    1073783177U,	// XVADDSP
    1073776755U,	// XVBF16GER2
    2449512734U,	// XVBF16GER2NN
    2449514308U,	// XVBF16GER2NP
    2449512793U,	// XVBF16GER2PN
    2449514367U,	// XVBF16GER2PP
    1073782138U,	// XVCMPEQDP
    1073775965U,	// XVCMPEQDP_rec
    1073783480U,	// XVCMPEQSP
    1073776051U,	// XVCMPEQSP_rec
    1073781755U,	// XVCMPGEDP
    1073775953U,	// XVCMPGEDP_rec
    1073783230U,	// XVCMPGESP
    1073776039U,	// XVCMPGESP_rec
    1073782198U,	// XVCMPGTDP
    1073775977U,	// XVCMPGTDP_rec
    1073783540U,	// XVCMPGTSP
    1073776070U,	// XVCMPGTSP_rec
    1073781996U,	// XVCPSGNDP
    1073783410U,	// XVCPSGNSP
    39325U,	// XVCVBF16SPN
    41616U,	// XVCVDPSP
    42721U,	// XVCVDPSXDS
    43232U,	// XVCVDPSXWS
    42757U,	// XVCVDPUXDS
    43268U,	// XVCVDPUXWS
    41626U,	// XVCVHPSP
    35003U,	// XVCVSPBF16
    40241U,	// XVCVSPDP
    40712U,	// XVCVSPHP
    42733U,	// XVCVSPSXDS
    43244U,	// XVCVSPSXWS
    42769U,	// XVCVSPUXDS
    43280U,	// XVCVSPUXWS
    39887U,	// XVCVSXDDP
    41373U,	// XVCVSXDSP
    40475U,	// XVCVSXWDP
    41786U,	// XVCVSXWSP
    39909U,	// XVCVUXDDP
    41395U,	// XVCVUXDSP
    40486U,	// XVCVUXWDP
    41797U,	// XVCVUXWSP
    1073782290U,	// XVDIVDP
    1073783601U,	// XVDIVSP
    1073776769U,	// XVF16GER2
    2449512750U,	// XVF16GER2NN
    2449514324U,	// XVF16GER2NP
    2449512809U,	// XVF16GER2PN
    2449514383U,	// XVF16GER2PP
    1073784072U,	// XVF32GER
    2449512765U,	// XVF32GERNN
    2449514339U,	// XVF32GERNP
    2449512835U,	// XVF32GERPN
    2449514441U,	// XVF32GERPP
    1073784084U,	// XVF64GER
    2449512779U,	// XVF64GERNN
    2449514353U,	// XVF64GERNP
    2449512849U,	// XVF64GERPN
    2449514455U,	// XVF64GERPP
    1073776782U,	// XVI16GER2
    2449514398U,	// XVI16GER2PP
    1073784318U,	// XVI16GER2S
    2449514469U,	// XVI16GER2SPP
    1073776883U,	// XVI4GER8
    2449514427U,	// XVI4GER8PP
    1073776795U,	// XVI8GER4
    2449514413U,	// XVI8GER4PP
    2449514485U,	// XVI8GER4SPP
    1073782085U,	// XVIEXPDP
    1073783460U,	// XVIEXPSP
    2449513323U,	// XVMADDADP
    2449514829U,	// XVMADDASP
    2449513686U,	// XVMADDMDP
    2449515111U,	// XVMADDMSP
    1073782330U,	// XVMAXDP
    1073783632U,	// XVMAXSP
    1073782016U,	// XVMINDP
    1073783421U,	// XVMINSP
    2449513277U,	// XVMSUBADP
    2449514783U,	// XVMSUBASP
    2449513640U,	// XVMSUBMDP
    2449515065U,	// XVMSUBMSP
    1073781884U,	// XVMULDP
    1073783309U,	// XVMULSP
    40335U,	// XVNABSDP
    41680U,	// XVNABSSP
    39991U,	// XVNEGDP
    41457U,	// XVNEGSP
    2449513300U,	// XVNMADDADP
    2449514806U,	// XVNMADDASP
    2449513663U,	// XVNMADDMDP
    2449515088U,	// XVNMADDMSP
    2449513254U,	// XVNMSUBADP
    2449514760U,	// XVNMSUBASP
    2449513617U,	// XVNMSUBMDP
    2449515042U,	// XVNMSUBMSP
    38012U,	// XVRDPI
    36079U,	// XVRDPIC
    38798U,	// XVRDPIM
    40738U,	// XVRDPIP
    46615U,	// XVRDPIZ
    39950U,	// XVREDP
    41425U,	// XVRESP
    38028U,	// XVRSPI
    36088U,	// XVRSPIC
    38807U,	// XVRSPIM
    40747U,	// XVRSPIP
    46624U,	// XVRSPIZ
    39970U,	// XVRSQRTEDP
    41445U,	// XVRSQRTESP
    40417U,	// XVSQRTDP
    41748U,	// XVSQRTSP
    1073781631U,	// XVSUBDP
    1073783137U,	// XVSUBSP
    1073782280U,	// XVTDIVDP
    1073783591U,	// XVTDIVSP
    35537U,	// XVTLSBB
    40406U,	// XVTSQRTDP
    41737U,	// XVTSQRTSP
    302029715U,	// XVTSTDCDP
    302031221U,	// XVTSTDCSP
    40293U,	// XVXEXPDP
    41646U,	// XVXEXPSP
    40010U,	// XVXSIGDP
    41466U,	// XVXSIGSP
    1073777759U,	// XXBLENDVB
    1073778614U,	// XXBLENDVD
    1073779404U,	// XXBLENDVH
    1073786950U,	// XXBLENDVW
    36516U,	// XXBRD
    37361U,	// XXBRH
    41959U,	// XXBRQ
    44773U,	// XXBRW
    1073780119U,	// XXEVAL
    1073786911U,	// XXEXTRACTUW
    1073780395U,	// XXGENPCVBM
    1073780467U,	// XXGENPCVDM
    1073780594U,	// XXGENPCVHM
    1073780849U,	// XXGENPCVWM
    1375776673U,	// XXINSERTW
    1073778279U,	// XXLAND
    1073777833U,	// XXLANDC
    1073785772U,	// XXLEQV
    1308666796U,	// XXLEQVOnes
    1073778287U,	// XXLNAND
    1073784183U,	// XXLNOR
    1073784176U,	// XXLOR
    1073777941U,	// XXLORC
    1073784176U,	// XXLORf
    1073784217U,	// XXLXOR
    1308665241U,	// XXLXORdpz
    1308665241U,	// XXLXORspz
    1308665241U,	// XXLXORz
    1445009U,	// XXMFACC
    1073786268U,	// XXMRGHW
    1073786318U,	// XXMRGLW
    1084570U,	// XXMTACC
    1073780755U,	// XXPERM
    1073779527U,	// XXPERMDI
    1073779527U,	// XXPERMDIs
    1073784167U,	// XXPERMR
    1073787564U,	// XXPERMX
    1073780182U,	// XXSEL
    1095101U,	// XXSETACCZ
    1073779995U,	// XXSLDWI
    1073779995U,	// XXSLDWIs
    838906140U,	// XXSPLTI32DX
    872450815U,	// XXSPLTIB
    40020U,	// XXSPLTIDP
    44476U,	// XXSPLTIW
    1073786756U,	// XXSPLTW
    1073786756U,	// XXSPLTWs
    1074105478U,	// gBC
    1074104763U,	// gBCA
    20562440U,	// gBCAat
    1074111975U,	// gBCCTR
    1074107907U,	// gBCCTRL
    1074107816U,	// gBCL
    1074104962U,	// gBCLA
    20562456U,	// gBCLAat
    1074111802U,	// gBCLR
    1074107900U,	// gBCLRL
    21611146U,	// gBCLat
    21611045U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_INSTR_REF
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// BUILD_UACC
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDI_rec
    516U,	// CLRLSLWI
    516U,	// CLRLSLWI_rec
    128U,	// CLRRDI
    128U,	// CLRRDI_rec
    132U,	// CLRRWI
    132U,	// CLRRWI_rec
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    0U,	// CP_PASTE_LAST
    0U,	// CP_PASTEx
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFPS
    0U,	// DCBFx
    0U,	// DCBSTPS
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDI_rec
    516U,	// EXTLWI
    516U,	// EXTLWI_rec
    0U,	// EXTRDI
    0U,	// EXTRDI_rec
    516U,	// EXTRWI
    516U,	// EXTRWI_rec
    516U,	// INSLWI
    516U,	// INSLWI_rec
    0U,	// INSRDI
    0U,	// INSRDI_rec
    516U,	// INSRWI
    516U,	// INSRWI_rec
    0U,	// KILL_PAIR
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    1028U,	// RLWIMIbm
    1028U,	// RLWIMIbm_rec
    1028U,	// RLWINMbm
    1028U,	// RLWINMbm_rec
    1028U,	// RLWNMbm
    1028U,	// RLWNMbm_rec
    128U,	// ROTRDI
    128U,	// ROTRDI_rec
    132U,	// ROTRWI
    132U,	// ROTRWI_rec
    128U,	// SLDI
    128U,	// SLDI_rec
    132U,	// SLWI
    132U,	// SLWI_rec
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    128U,	// SRDI
    128U,	// SRDI_rec
    132U,	// SRWI
    132U,	// SRWI_rec
    0U,	// STIWX
    8U,	// SUBI
    8U,	// SUBIC
    8U,	// SUBIC_rec
    8U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    140U,	// ADD4
    140U,	// ADD4O
    140U,	// ADD4O_rec
    140U,	// ADD4TLS
    140U,	// ADD4_rec
    140U,	// ADD8
    140U,	// ADD8O
    140U,	// ADD8O_rec
    140U,	// ADD8TLS
    140U,	// ADD8TLS_
    140U,	// ADD8_rec
    140U,	// ADDC
    140U,	// ADDC8
    140U,	// ADDC8O
    140U,	// ADDC8O_rec
    140U,	// ADDC8_rec
    140U,	// ADDCO
    140U,	// ADDCO_rec
    140U,	// ADDC_rec
    140U,	// ADDE
    140U,	// ADDE8
    140U,	// ADDE8O
    140U,	// ADDE8O_rec
    140U,	// ADDE8_rec
    140U,	// ADDEO
    140U,	// ADDEO_rec
    140U,	// ADDE_rec
    8U,	// ADDI
    8U,	// ADDI8
    8U,	// ADDIC
    8U,	// ADDIC8
    8U,	// ADDIC_rec
    8U,	// ADDIS
    8U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIStocHA8
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8O
    0U,	// ADDME8O_rec
    0U,	// ADDME8_rec
    0U,	// ADDMEO
    0U,	// ADDMEO_rec
    0U,	// ADDME_rec
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8O
    0U,	// ADDZE8O_rec
    0U,	// ADDZE8_rec
    0U,	// ADDZEO
    0U,	// ADDZEO_rec
    0U,	// ADDZE_rec
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    140U,	// AND
    140U,	// AND8
    140U,	// AND8_rec
    140U,	// ANDC
    140U,	// ANDC8
    140U,	// ANDC8_rec
    140U,	// ANDC_rec
    16U,	// ANDI8_rec
    16U,	// ANDIS8_rec
    16U,	// ANDIS_rec
    16U,	// ANDI_rec
    0U,	// ANDI_rec_1_EQ_BIT
    0U,	// ANDI_rec_1_EQ_BIT8
    0U,	// ANDI_rec_1_GT_BIT
    0U,	// ANDI_rec_1_GT_BIT8
    140U,	// AND_rec
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    148U,	// BCDCFN_rec
    148U,	// BCDCFSQ_rec
    148U,	// BCDCFZ_rec
    140U,	// BCDCPSGN_rec
    0U,	// BCDCTN_rec
    0U,	// BCDCTSQ_rec
    148U,	// BCDCTZ_rec
    148U,	// BCDSETSGN_rec
    1548U,	// BCDSR_rec
    1548U,	// BCDS_rec
    1548U,	// BCDTRUNC_rec
    140U,	// BCDUS_rec
    140U,	// BCDUTRUNC_rec
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCTRL_LWZinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_NOTOC
    0U,	// BL8_NOTOC_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_TLS
    140U,	// BPERMD
    140U,	// BRINC
    140U,	// CFUGED
    0U,	// CLRBHRB
    140U,	// CMPB
    140U,	// CMPB8
    140U,	// CMPD
    8U,	// CMPDI
    140U,	// CMPEQB
    140U,	// CMPLD
    16U,	// CMPLDI
    140U,	// CMPLW
    16U,	// CMPLWI
    1036U,	// CMPRB
    1036U,	// CMPRB8
    140U,	// CMPW
    8U,	// CMPWI
    0U,	// CNTLZD
    140U,	// CNTLZDM
    0U,	// CNTLZD_rec
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8_rec
    0U,	// CNTLZW_rec
    0U,	// CNTTZD
    140U,	// CNTTZDM
    0U,	// CNTTZD_rec
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8_rec
    0U,	// CNTTZW_rec
    0U,	// CP_ABORT
    148U,	// CP_COPY
    148U,	// CP_COPY8
    148U,	// CP_PASTE
    148U,	// CP_PASTE8
    148U,	// CP_PASTE8_rec
    148U,	// CP_PASTE_rec
    0U,	// CR6SET
    0U,	// CR6UNSET
    140U,	// CRAND
    140U,	// CRANDC
    140U,	// CREQV
    140U,	// CRNAND
    140U,	// CRNOR
    140U,	// CROR
    140U,	// CRORC
    24U,	// CRSET
    24U,	// CRUNSET
    140U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    140U,	// DIVD
    140U,	// DIVDE
    140U,	// DIVDEO
    140U,	// DIVDEO_rec
    140U,	// DIVDEU
    140U,	// DIVDEUO
    140U,	// DIVDEUO_rec
    140U,	// DIVDEU_rec
    140U,	// DIVDE_rec
    140U,	// DIVDO
    140U,	// DIVDO_rec
    140U,	// DIVDU
    140U,	// DIVDUO
    140U,	// DIVDUO_rec
    140U,	// DIVDU_rec
    140U,	// DIVD_rec
    140U,	// DIVW
    140U,	// DIVWE
    140U,	// DIVWEO
    140U,	// DIVWEO_rec
    140U,	// DIVWEU
    140U,	// DIVWEUO
    140U,	// DIVWEUO_rec
    140U,	// DIVWEU_rec
    140U,	// DIVWE_rec
    140U,	// DIVWO
    140U,	// DIVWO_rec
    140U,	// DIVWU
    140U,	// DIVWUO
    140U,	// DIVWUO_rec
    140U,	// DIVWU_rec
    140U,	// DIVW_rec
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    140U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    140U,	// EFDCMPEQ
    140U,	// EFDCMPGT
    140U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    140U,	// EFDDIV
    140U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    140U,	// EFDSUB
    140U,	// EFDTSTEQ
    140U,	// EFDTSTGT
    140U,	// EFDTSTLT
    0U,	// EFSABS
    140U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    140U,	// EFSCMPEQ
    140U,	// EFSCMPGT
    140U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    140U,	// EFSDIV
    140U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    140U,	// EFSSUB
    140U,	// EFSTSTEQ
    140U,	// EFSTSTGT
    140U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    140U,	// EQV
    140U,	// EQV8
    140U,	// EQV8_rec
    140U,	// EQV_rec
    0U,	// EVABS
    156U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    140U,	// EVADDW
    140U,	// EVAND
    140U,	// EVANDC
    140U,	// EVCMPEQ
    140U,	// EVCMPGTS
    140U,	// EVCMPGTU
    140U,	// EVCMPLTS
    140U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    140U,	// EVDIVWS
    140U,	// EVDIVWU
    140U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    140U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    140U,	// EVFSCMPEQ
    140U,	// EVFSCMPGT
    140U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    140U,	// EVFSDIV
    140U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    140U,	// EVFSSUB
    140U,	// EVFSTSTEQ
    140U,	// EVFSTSTGT
    140U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    140U,	// EVMERGEHI
    140U,	// EVMERGEHILO
    140U,	// EVMERGELO
    140U,	// EVMERGELOHI
    140U,	// EVMHEGSMFAA
    140U,	// EVMHEGSMFAN
    140U,	// EVMHEGSMIAA
    140U,	// EVMHEGSMIAN
    140U,	// EVMHEGUMIAA
    140U,	// EVMHEGUMIAN
    140U,	// EVMHESMF
    140U,	// EVMHESMFA
    140U,	// EVMHESMFAAW
    140U,	// EVMHESMFANW
    140U,	// EVMHESMI
    140U,	// EVMHESMIA
    140U,	// EVMHESMIAAW
    140U,	// EVMHESMIANW
    140U,	// EVMHESSF
    140U,	// EVMHESSFA
    140U,	// EVMHESSFAAW
    140U,	// EVMHESSFANW
    140U,	// EVMHESSIAAW
    140U,	// EVMHESSIANW
    140U,	// EVMHEUMI
    140U,	// EVMHEUMIA
    140U,	// EVMHEUMIAAW
    140U,	// EVMHEUMIANW
    140U,	// EVMHEUSIAAW
    140U,	// EVMHEUSIANW
    140U,	// EVMHOGSMFAA
    140U,	// EVMHOGSMFAN
    140U,	// EVMHOGSMIAA
    140U,	// EVMHOGSMIAN
    140U,	// EVMHOGUMIAA
    140U,	// EVMHOGUMIAN
    140U,	// EVMHOSMF
    140U,	// EVMHOSMFA
    140U,	// EVMHOSMFAAW
    140U,	// EVMHOSMFANW
    140U,	// EVMHOSMI
    140U,	// EVMHOSMIA
    140U,	// EVMHOSMIAAW
    140U,	// EVMHOSMIANW
    140U,	// EVMHOSSF
    140U,	// EVMHOSSFA
    140U,	// EVMHOSSFAAW
    140U,	// EVMHOSSFANW
    140U,	// EVMHOSSIAAW
    140U,	// EVMHOSSIANW
    140U,	// EVMHOUMI
    140U,	// EVMHOUMIA
    140U,	// EVMHOUMIAAW
    140U,	// EVMHOUMIANW
    140U,	// EVMHOUSIAAW
    140U,	// EVMHOUSIANW
    0U,	// EVMRA
    140U,	// EVMWHSMF
    140U,	// EVMWHSMFA
    140U,	// EVMWHSMI
    140U,	// EVMWHSMIA
    140U,	// EVMWHSSF
    140U,	// EVMWHSSFA
    140U,	// EVMWHUMI
    140U,	// EVMWHUMIA
    140U,	// EVMWLSMIAAW
    140U,	// EVMWLSMIANW
    140U,	// EVMWLSSIAAW
    140U,	// EVMWLSSIANW
    140U,	// EVMWLUMI
    140U,	// EVMWLUMIA
    140U,	// EVMWLUMIAAW
    140U,	// EVMWLUMIANW
    140U,	// EVMWLUSIAAW
    140U,	// EVMWLUSIANW
    140U,	// EVMWSMF
    140U,	// EVMWSMFA
    140U,	// EVMWSMFAA
    140U,	// EVMWSMFAN
    140U,	// EVMWSMI
    140U,	// EVMWSMIA
    140U,	// EVMWSMIAA
    140U,	// EVMWSMIAN
    140U,	// EVMWSSF
    140U,	// EVMWSSFA
    140U,	// EVMWSSFAA
    140U,	// EVMWSSFAN
    140U,	// EVMWUMI
    140U,	// EVMWUMIA
    140U,	// EVMWUMIAA
    140U,	// EVMWUMIAN
    140U,	// EVNAND
    0U,	// EVNEG
    140U,	// EVNOR
    140U,	// EVOR
    140U,	// EVORC
    140U,	// EVRLW
    132U,	// EVRLWI
    0U,	// EVRNDW
    1U,	// EVSEL
    140U,	// EVSLW
    132U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    132U,	// EVSRWIS
    132U,	// EVSRWIU
    140U,	// EVSRWS
    140U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    140U,	// EVSUBFW
    0U,	// EVSUBIFW
    140U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8_rec
    0U,	// EXTSB_rec
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8_rec
    0U,	// EXTSH_rec
    0U,	// EXTSW
    128U,	// EXTSWSLI
    128U,	// EXTSWSLI_32_64
    128U,	// EXTSWSLI_32_64_rec
    128U,	// EXTSWSLI_rec
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64_rec
    0U,	// EXTSW_rec
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSD_rec
    0U,	// FABSS
    0U,	// FABSS_rec
    140U,	// FADD
    140U,	// FADDS
    140U,	// FADDS_rec
    140U,	// FADD_rec
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDS_rec
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUS_rec
    0U,	// FCFIDU_rec
    0U,	// FCFID_rec
    140U,	// FCMPOD
    140U,	// FCMPOS
    140U,	// FCMPUD
    140U,	// FCMPUS
    140U,	// FCPSGND
    140U,	// FCPSGND_rec
    140U,	// FCPSGNS
    140U,	// FCPSGNS_rec
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZ_rec
    0U,	// FCTIDU_rec
    0U,	// FCTIDZ
    0U,	// FCTIDZ_rec
    0U,	// FCTID_rec
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZ_rec
    0U,	// FCTIWU_rec
    0U,	// FCTIWZ
    0U,	// FCTIWZ_rec
    0U,	// FCTIW_rec
    140U,	// FDIV
    140U,	// FDIVS
    140U,	// FDIVS_rec
    140U,	// FDIV_rec
    1036U,	// FMADD
    1036U,	// FMADDS
    1036U,	// FMADDS_rec
    1036U,	// FMADD_rec
    0U,	// FMR
    0U,	// FMR_rec
    1036U,	// FMSUB
    1036U,	// FMSUBS
    1036U,	// FMSUBS_rec
    1036U,	// FMSUB_rec
    140U,	// FMUL
    140U,	// FMULS
    140U,	// FMULS_rec
    140U,	// FMUL_rec
    0U,	// FNABSD
    0U,	// FNABSD_rec
    0U,	// FNABSS
    0U,	// FNABSS_rec
    0U,	// FNEGD
    0U,	// FNEGD_rec
    0U,	// FNEGS
    0U,	// FNEGS_rec
    1036U,	// FNMADD
    1036U,	// FNMADDS
    1036U,	// FNMADDS_rec
    1036U,	// FNMADD_rec
    1036U,	// FNMSUB
    1036U,	// FNMSUBS
    1036U,	// FNMSUBS_rec
    1036U,	// FNMSUB_rec
    0U,	// FRE
    0U,	// FRES
    0U,	// FRES_rec
    0U,	// FRE_rec
    0U,	// FRIMD
    0U,	// FRIMD_rec
    0U,	// FRIMS
    0U,	// FRIMS_rec
    0U,	// FRIND
    0U,	// FRIND_rec
    0U,	// FRINS
    0U,	// FRINS_rec
    0U,	// FRIPD
    0U,	// FRIPD_rec
    0U,	// FRIPS
    0U,	// FRIPS_rec
    0U,	// FRIZD
    0U,	// FRIZD_rec
    0U,	// FRIZS
    0U,	// FRIZS_rec
    0U,	// FRSP
    0U,	// FRSP_rec
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTES_rec
    0U,	// FRSQRTE_rec
    1036U,	// FSELD
    1036U,	// FSELD_rec
    1036U,	// FSELS
    1036U,	// FSELS_rec
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTS_rec
    0U,	// FSQRT_rec
    140U,	// FSUB
    140U,	// FSUBS
    140U,	// FSUBS_rec
    140U,	// FSUB_rec
    140U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsADDRPCREL
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// GETtlsldADDRPCREL
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    1036U,	// ISEL
    1036U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    1U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    140U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    140U,	// LBZXTLS
    140U,	// LBZXTLS_
    140U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    1U,	// LDARXL
    132U,	// LDAT
    0U,	// LDBRX
    140U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    140U,	// LDXTLS
    140U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    1U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    140U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    140U,	// LHZXTLS
    140U,	// LHZXTLS_
    140U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    132U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    1U,	// LWARXL
    132U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    140U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    140U,	// LWZXTLS
    140U,	// LWZXTLS_
    140U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LWZtocL
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    140U,	// LXVL
    140U,	// LXVLL
    0U,	// LXVP
    0U,	// LXVPX
    0U,	// LXVRBX
    0U,	// LXVRDX
    0U,	// LXVRHX
    0U,	// LXVRWX
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    1036U,	// MADDHD
    1036U,	// MADDHDU
    1036U,	// MADDLD
    1036U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFS_rec
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVRWZ
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    140U,	// MODSD
    140U,	// MODSW
    140U,	// MODUD
    140U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    1044U,	// MTFSF
    140U,	// MTFSFI
    140U,	// MTFSFI_rec
    1044U,	// MTFSF_rec
    0U,	// MTFSFb
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRD
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVRWA
    0U,	// MTVRWZ
    0U,	// MTVSCR
    0U,	// MTVSRBM
    0U,	// MTVSRBMI
    0U,	// MTVSRD
    140U,	// MTVSRDD
    0U,	// MTVSRDM
    0U,	// MTVSRHM
    0U,	// MTVSRQM
    0U,	// MTVSRWA
    0U,	// MTVSRWM
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    140U,	// MULHD
    140U,	// MULHDU
    140U,	// MULHDU_rec
    140U,	// MULHD_rec
    140U,	// MULHW
    140U,	// MULHWU
    140U,	// MULHWU_rec
    140U,	// MULHW_rec
    140U,	// MULLD
    140U,	// MULLDO
    140U,	// MULLDO_rec
    140U,	// MULLD_rec
    8U,	// MULLI
    8U,	// MULLI8
    140U,	// MULLW
    140U,	// MULLWO
    140U,	// MULLWO_rec
    140U,	// MULLW_rec
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    140U,	// NAND
    140U,	// NAND8
    140U,	// NAND8_rec
    140U,	// NAND_rec
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8O
    0U,	// NEG8O_rec
    0U,	// NEG8_rec
    0U,	// NEGO
    0U,	// NEGO_rec
    0U,	// NEG_rec
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    140U,	// NOR
    140U,	// NOR8
    140U,	// NOR8_rec
    140U,	// NOR_rec
    140U,	// OR
    140U,	// OR8
    140U,	// OR8_rec
    140U,	// ORC
    140U,	// ORC8
    140U,	// ORC8_rec
    140U,	// ORC_rec
    16U,	// ORI
    16U,	// ORI8
    16U,	// ORIS
    16U,	// ORIS8
    140U,	// OR_rec
    32U,	// PADDI
    32U,	// PADDI8
    0U,	// PADDI8pc
    0U,	// PADDIdtprel
    0U,	// PADDIpc
    140U,	// PDEPD
    140U,	// PEXTD
    0U,	// PLBZ
    0U,	// PLBZ8
    0U,	// PLBZ8pc
    0U,	// PLBZpc
    0U,	// PLD
    0U,	// PLDpc
    0U,	// PLFD
    0U,	// PLFDpc
    0U,	// PLFS
    0U,	// PLFSpc
    0U,	// PLHA
    0U,	// PLHA8
    0U,	// PLHA8pc
    0U,	// PLHApc
    0U,	// PLHZ
    0U,	// PLHZ8
    0U,	// PLHZ8pc
    0U,	// PLHZpc
    0U,	// PLI
    0U,	// PLI8
    0U,	// PLWA
    0U,	// PLWA8
    0U,	// PLWA8pc
    0U,	// PLWApc
    0U,	// PLWZ
    0U,	// PLWZ8
    0U,	// PLWZ8pc
    0U,	// PLWZpc
    0U,	// PLXSD
    0U,	// PLXSDpc
    0U,	// PLXSSP
    0U,	// PLXSSPpc
    0U,	// PLXV
    0U,	// PLXVP
    0U,	// PLXVPpc
    0U,	// PLXVpc
    10252U,	// PMXVBF16GER2
    19237U,	// PMXVBF16GER2NN
    19237U,	// PMXVBF16GER2NP
    19237U,	// PMXVBF16GER2PN
    19237U,	// PMXVBF16GER2PP
    10252U,	// PMXVF16GER2
    19237U,	// PMXVF16GER2NN
    19237U,	// PMXVF16GER2NP
    19237U,	// PMXVF16GER2PN
    19237U,	// PMXVF16GER2PP
    10252U,	// PMXVF32GER
    3365U,	// PMXVF32GERNN
    3365U,	// PMXVF32GERNP
    3365U,	// PMXVF32GERPN
    3365U,	// PMXVF32GERPP
    10252U,	// PMXVF64GER
    421U,	// PMXVF64GERNN
    421U,	// PMXVF64GERNP
    421U,	// PMXVF64GERPN
    421U,	// PMXVF64GERPP
    10252U,	// PMXVI16GER2
    19237U,	// PMXVI16GER2PP
    10252U,	// PMXVI16GER2S
    19237U,	// PMXVI16GER2SPP
    10252U,	// PMXVI4GER8
    27429U,	// PMXVI4GER8PP
    10252U,	// PMXVI8GER4
    35621U,	// PMXVI8GER4PP
    35621U,	// PMXVI8GER4SPP
    0U,	// POPCNTB
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    0U,	// PREPARE_PROBED_ALLOCA_32
    0U,	// PREPARE_PROBED_ALLOCA_64
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    0U,	// PROBED_ALLOCA_32
    0U,	// PROBED_ALLOCA_64
    0U,	// PROBED_STACKALLOC_32
    0U,	// PROBED_STACKALLOC_64
    0U,	// PSTB
    0U,	// PSTB8
    0U,	// PSTB8pc
    0U,	// PSTBpc
    0U,	// PSTD
    0U,	// PSTDpc
    0U,	// PSTFD
    0U,	// PSTFDpc
    0U,	// PSTFS
    0U,	// PSTFSpc
    0U,	// PSTH
    0U,	// PSTH8
    0U,	// PSTH8pc
    0U,	// PSTHpc
    0U,	// PSTW
    0U,	// PSTW8
    0U,	// PSTW8pc
    0U,	// PSTWpc
    0U,	// PSTXSD
    0U,	// PSTXSDpc
    0U,	// PSTXSSP
    0U,	// PSTXSSPpc
    0U,	// PSTXV
    0U,	// PSTXVP
    0U,	// PSTXVPpc
    0U,	// PSTXVpc
    0U,	// RESTORE_ACC
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_UACC
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    12U,	// RLDCL
    12U,	// RLDCL_rec
    12U,	// RLDCR
    12U,	// RLDCR_rec
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32_rec
    0U,	// RLDICL_rec
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICR_rec
    0U,	// RLDIC_rec
    1U,	// RLDIMI
    1U,	// RLDIMI_rec
    2U,	// RLWIMI
    2U,	// RLWIMI8
    2U,	// RLWIMI8_rec
    2U,	// RLWIMI_rec
    8708U,	// RLWINM
    8708U,	// RLWINM8
    8708U,	// RLWINM8_rec
    8708U,	// RLWINM_rec
    8716U,	// RLWNM
    8716U,	// RLWNM8
    8716U,	// RLWNM8_rec
    8716U,	// RLWNM_rec
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETBC
    0U,	// SETBC8
    0U,	// SETBCR
    0U,	// SETBCR8
    0U,	// SETFLM
    0U,	// SETNBC
    0U,	// SETNBC8
    0U,	// SETNBCR
    0U,	// SETNBCR8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEE_rec
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    140U,	// SLD
    140U,	// SLD_rec
    140U,	// SLW
    140U,	// SLW8
    140U,	// SLW8_rec
    140U,	// SLW_rec
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_ACC
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_UACC
    140U,	// SRAD
    128U,	// SRADI
    128U,	// SRADI_32
    128U,	// SRADI_rec
    140U,	// SRAD_rec
    140U,	// SRAW
    132U,	// SRAWI
    132U,	// SRAWI_rec
    140U,	// SRAW_rec
    140U,	// SRD
    140U,	// SRD_rec
    140U,	// SRW
    140U,	// SRW8
    140U,	// SRW8_rec
    140U,	// SRW_rec
    0U,	// STB
    0U,	// STB8
    140U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    140U,	// STBXTLS
    140U,	// STBXTLS_
    140U,	// STBXTLS_32
    0U,	// STD
    132U,	// STDAT
    0U,	// STDBRX
    140U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    140U,	// STDXTLS
    140U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    140U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    140U,	// STHXTLS
    140U,	// STHXTLS_
    140U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    132U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    132U,	// STWAT
    0U,	// STWBRX
    140U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    140U,	// STWXTLS
    140U,	// STWXTLS_
    140U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    140U,	// STXVL
    140U,	// STXVLL
    0U,	// STXVP
    0U,	// STXVPX
    0U,	// STXVRBX
    0U,	// STXVRDX
    0U,	// STXVRHX
    0U,	// STXVRWX
    0U,	// STXVW4X
    0U,	// STXVX
    140U,	// SUBF
    140U,	// SUBF8
    140U,	// SUBF8O
    140U,	// SUBF8O_rec
    140U,	// SUBF8_rec
    140U,	// SUBFC
    140U,	// SUBFC8
    140U,	// SUBFC8O
    140U,	// SUBFC8O_rec
    140U,	// SUBFC8_rec
    140U,	// SUBFCO
    140U,	// SUBFCO_rec
    140U,	// SUBFC_rec
    140U,	// SUBFE
    140U,	// SUBFE8
    140U,	// SUBFE8O
    140U,	// SUBFE8O_rec
    140U,	// SUBFE8_rec
    140U,	// SUBFEO
    140U,	// SUBFEO_rec
    140U,	// SUBFE_rec
    8U,	// SUBFIC
    8U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8O
    0U,	// SUBFME8O_rec
    0U,	// SUBFME8_rec
    0U,	// SUBFMEO
    0U,	// SUBFMEO_rec
    0U,	// SUBFME_rec
    140U,	// SUBFO
    140U,	// SUBFO_rec
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8O
    0U,	// SUBFZE8O_rec
    0U,	// SUBFZE8_rec
    0U,	// SUBFZEO
    0U,	// SUBFZEO_rec
    0U,	// SUBFZE_rec
    140U,	// SUBF_rec
    0U,	// SYNC
    0U,	// TABORT
    140U,	// TABORTDC
    132U,	// TABORTDCI
    140U,	// TABORTWC
    132U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    140U,	// TD
    8U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    140U,	// TLBRE2
    0U,	// TLBSX
    140U,	// TLBSX2
    140U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    140U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    140U,	// TW
    8U,	// TWI
    0U,	// UNENCODED_NOP
    0U,	// UpdateGBR
    140U,	// VABSDUB
    140U,	// VABSDUH
    140U,	// VABSDUW
    140U,	// VADDCUQ
    140U,	// VADDCUW
    1036U,	// VADDECUQ
    1036U,	// VADDEUQM
    140U,	// VADDFP
    140U,	// VADDSBS
    140U,	// VADDSHS
    140U,	// VADDSWS
    140U,	// VADDUBM
    140U,	// VADDUBS
    140U,	// VADDUDM
    140U,	// VADDUHM
    140U,	// VADDUHS
    140U,	// VADDUQM
    140U,	// VADDUWM
    140U,	// VADDUWS
    140U,	// VAND
    140U,	// VANDC
    140U,	// VAVGSB
    140U,	// VAVGSH
    140U,	// VAVGSW
    140U,	// VAVGUB
    140U,	// VAVGUH
    140U,	// VAVGUW
    140U,	// VBPERMD
    140U,	// VBPERMQ
    2U,	// VCFSX
    2U,	// VCFSX_0
    140U,	// VCFUGED
    2U,	// VCFUX
    2U,	// VCFUX_0
    140U,	// VCIPHER
    140U,	// VCIPHERLAST
    140U,	// VCLRLB
    140U,	// VCLRRB
    0U,	// VCLZB
    0U,	// VCLZD
    140U,	// VCLZDM
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    140U,	// VCMPBFP
    140U,	// VCMPBFP_rec
    140U,	// VCMPEQFP
    140U,	// VCMPEQFP_rec
    140U,	// VCMPEQUB
    140U,	// VCMPEQUB_rec
    140U,	// VCMPEQUD
    140U,	// VCMPEQUD_rec
    140U,	// VCMPEQUH
    140U,	// VCMPEQUH_rec
    140U,	// VCMPEQUQ
    140U,	// VCMPEQUQ_rec
    140U,	// VCMPEQUW
    140U,	// VCMPEQUW_rec
    140U,	// VCMPGEFP
    140U,	// VCMPGEFP_rec
    140U,	// VCMPGTFP
    140U,	// VCMPGTFP_rec
    140U,	// VCMPGTSB
    140U,	// VCMPGTSB_rec
    140U,	// VCMPGTSD
    140U,	// VCMPGTSD_rec
    140U,	// VCMPGTSH
    140U,	// VCMPGTSH_rec
    140U,	// VCMPGTSQ
    140U,	// VCMPGTSQ_rec
    140U,	// VCMPGTSW
    140U,	// VCMPGTSW_rec
    140U,	// VCMPGTUB
    140U,	// VCMPGTUB_rec
    140U,	// VCMPGTUD
    140U,	// VCMPGTUD_rec
    140U,	// VCMPGTUH
    140U,	// VCMPGTUH_rec
    140U,	// VCMPGTUQ
    140U,	// VCMPGTUQ_rec
    140U,	// VCMPGTUW
    140U,	// VCMPGTUW_rec
    140U,	// VCMPNEB
    140U,	// VCMPNEB_rec
    140U,	// VCMPNEH
    140U,	// VCMPNEH_rec
    140U,	// VCMPNEW
    140U,	// VCMPNEW_rec
    140U,	// VCMPNEZB
    140U,	// VCMPNEZB_rec
    140U,	// VCMPNEZH
    140U,	// VCMPNEZH_rec
    140U,	// VCMPNEZW
    140U,	// VCMPNEZW_rec
    140U,	// VCMPSQ
    140U,	// VCMPUQ
    148U,	// VCNTMBB
    148U,	// VCNTMBD
    148U,	// VCNTMBH
    148U,	// VCNTMBW
    2U,	// VCTSXS
    2U,	// VCTSXS_0
    2U,	// VCTUXS
    2U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    140U,	// VCTZDM
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    140U,	// VDIVESD
    140U,	// VDIVESQ
    140U,	// VDIVESW
    140U,	// VDIVEUD
    140U,	// VDIVEUQ
    140U,	// VDIVEUW
    140U,	// VDIVSD
    140U,	// VDIVSQ
    140U,	// VDIVSW
    140U,	// VDIVUD
    140U,	// VDIVUQ
    140U,	// VDIVUW
    140U,	// VEQV
    0U,	// VEXPANDBM
    0U,	// VEXPANDDM
    0U,	// VEXPANDHM
    0U,	// VEXPANDQM
    0U,	// VEXPANDWM
    0U,	// VEXPTEFP
    1036U,	// VEXTDDVLX
    1036U,	// VEXTDDVRX
    1036U,	// VEXTDUBVLX
    1036U,	// VEXTDUBVRX
    1036U,	// VEXTDUHVLX
    1036U,	// VEXTDUHVRX
    1036U,	// VEXTDUWVLX
    1036U,	// VEXTDUWVRX
    0U,	// VEXTRACTBM
    2U,	// VEXTRACTD
    0U,	// VEXTRACTDM
    0U,	// VEXTRACTHM
    0U,	// VEXTRACTQM
    2U,	// VEXTRACTUB
    2U,	// VEXTRACTUH
    2U,	// VEXTRACTUW
    0U,	// VEXTRACTWM
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSD2Q
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    140U,	// VEXTUBLX
    140U,	// VEXTUBRX
    140U,	// VEXTUHLX
    140U,	// VEXTUHRX
    140U,	// VEXTUWLX
    140U,	// VEXTUWRX
    0U,	// VGBBD
    40U,	// VGNB
    45U,	// VINSBLX
    45U,	// VINSBRX
    45U,	// VINSBVLX
    45U,	// VINSBVRX
    0U,	// VINSD
    45U,	// VINSDLX
    45U,	// VINSDRX
    0U,	// VINSERTB
    2U,	// VINSERTD
    0U,	// VINSERTH
    2U,	// VINSERTW
    45U,	// VINSHLX
    45U,	// VINSHRX
    45U,	// VINSHVLX
    45U,	// VINSHVRX
    0U,	// VINSW
    45U,	// VINSWLX
    45U,	// VINSWRX
    45U,	// VINSWVLX
    45U,	// VINSWVRX
    0U,	// VLOGEFP
    1036U,	// VMADDFP
    140U,	// VMAXFP
    140U,	// VMAXSB
    140U,	// VMAXSD
    140U,	// VMAXSH
    140U,	// VMAXSW
    140U,	// VMAXUB
    140U,	// VMAXUD
    140U,	// VMAXUH
    140U,	// VMAXUW
    1036U,	// VMHADDSHS
    1036U,	// VMHRADDSHS
    140U,	// VMINFP
    140U,	// VMINSB
    140U,	// VMINSD
    140U,	// VMINSH
    140U,	// VMINSW
    140U,	// VMINUB
    140U,	// VMINUD
    140U,	// VMINUH
    140U,	// VMINUW
    1036U,	// VMLADDUHM
    140U,	// VMODSD
    140U,	// VMODSQ
    140U,	// VMODSW
    140U,	// VMODUD
    140U,	// VMODUQ
    140U,	// VMODUW
    140U,	// VMRGEW
    140U,	// VMRGHB
    140U,	// VMRGHH
    140U,	// VMRGHW
    140U,	// VMRGLB
    140U,	// VMRGLH
    140U,	// VMRGLW
    140U,	// VMRGOW
    1036U,	// VMSUMCUD
    1036U,	// VMSUMMBM
    1036U,	// VMSUMSHM
    1036U,	// VMSUMSHS
    1036U,	// VMSUMUBM
    1036U,	// VMSUMUDM
    1036U,	// VMSUMUHM
    1036U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    140U,	// VMUL10ECUQ
    140U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    140U,	// VMULESB
    140U,	// VMULESD
    140U,	// VMULESH
    140U,	// VMULESW
    140U,	// VMULEUB
    140U,	// VMULEUD
    140U,	// VMULEUH
    140U,	// VMULEUW
    140U,	// VMULHSD
    140U,	// VMULHSW
    140U,	// VMULHUD
    140U,	// VMULHUW
    140U,	// VMULLD
    140U,	// VMULOSB
    140U,	// VMULOSD
    140U,	// VMULOSH
    140U,	// VMULOSW
    140U,	// VMULOUB
    140U,	// VMULOUD
    140U,	// VMULOUH
    140U,	// VMULOUW
    140U,	// VMULUWM
    140U,	// VNAND
    140U,	// VNCIPHER
    140U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    1036U,	// VNMSUBFP
    140U,	// VNOR
    140U,	// VOR
    140U,	// VORC
    140U,	// VPDEPD
    1036U,	// VPERM
    1036U,	// VPERMR
    1036U,	// VPERMXOR
    140U,	// VPEXTD
    140U,	// VPKPX
    140U,	// VPKSDSS
    140U,	// VPKSDUS
    140U,	// VPKSHSS
    140U,	// VPKSHUS
    140U,	// VPKSWSS
    140U,	// VPKSWUS
    140U,	// VPKUDUM
    140U,	// VPKUDUS
    140U,	// VPKUHUM
    140U,	// VPKUHUS
    140U,	// VPKUWUM
    140U,	// VPKUWUS
    140U,	// VPMSUMB
    140U,	// VPMSUMD
    140U,	// VPMSUMH
    140U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    140U,	// VRLB
    140U,	// VRLD
    140U,	// VRLDMI
    140U,	// VRLDNM
    140U,	// VRLH
    140U,	// VRLQ
    140U,	// VRLQMI
    140U,	// VRLQNM
    140U,	// VRLW
    140U,	// VRLWMI
    140U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    1036U,	// VSEL
    2068U,	// VSHASIGMAD
    2068U,	// VSHASIGMAW
    140U,	// VSL
    140U,	// VSLB
    140U,	// VSLD
    3596U,	// VSLDBI
    2060U,	// VSLDOI
    140U,	// VSLH
    140U,	// VSLO
    140U,	// VSLQ
    140U,	// VSLV
    140U,	// VSLW
    2U,	// VSPLTB
    2U,	// VSPLTBs
    2U,	// VSPLTH
    2U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    2U,	// VSPLTW
    140U,	// VSR
    140U,	// VSRAB
    140U,	// VSRAD
    140U,	// VSRAH
    140U,	// VSRAQ
    140U,	// VSRAW
    140U,	// VSRB
    140U,	// VSRD
    3596U,	// VSRDBI
    140U,	// VSRH
    140U,	// VSRO
    140U,	// VSRQ
    140U,	// VSRV
    140U,	// VSRW
    0U,	// VSTRIBL
    0U,	// VSTRIBL_rec
    0U,	// VSTRIBR
    0U,	// VSTRIBR_rec
    0U,	// VSTRIHL
    0U,	// VSTRIHL_rec
    0U,	// VSTRIHR
    0U,	// VSTRIHR_rec
    140U,	// VSUBCUQ
    140U,	// VSUBCUW
    1036U,	// VSUBECUQ
    1036U,	// VSUBEUQM
    140U,	// VSUBFP
    140U,	// VSUBSBS
    140U,	// VSUBSHS
    140U,	// VSUBSWS
    140U,	// VSUBUBM
    140U,	// VSUBUBS
    140U,	// VSUBUDM
    140U,	// VSUBUHM
    140U,	// VSUBUHS
    140U,	// VSUBUQM
    140U,	// VSUBUWM
    140U,	// VSUBUWS
    140U,	// VSUM2SWS
    140U,	// VSUM4SBS
    140U,	// VSUM4SHS
    140U,	// VSUM4UBS
    140U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    140U,	// VXOR
    24U,	// V_SET0
    24U,	// V_SET0B
    24U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    140U,	// XOR
    140U,	// XOR8
    140U,	// XOR8_rec
    16U,	// XORI
    16U,	// XORI8
    16U,	// XORIS
    16U,	// XORIS8
    140U,	// XOR_rec
    0U,	// XSABSDP
    0U,	// XSABSQP
    140U,	// XSADDDP
    140U,	// XSADDQP
    140U,	// XSADDQPO
    140U,	// XSADDSP
    140U,	// XSCMPEQDP
    140U,	// XSCMPEXPDP
    140U,	// XSCMPEXPQP
    140U,	// XSCMPGEDP
    140U,	// XSCMPGTDP
    140U,	// XSCMPODP
    140U,	// XSCMPOQP
    140U,	// XSCMPUDP
    140U,	// XSCMPUQP
    140U,	// XSCPSGNDP
    140U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSQZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUQZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSQQP
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUQQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    140U,	// XSDIVDP
    140U,	// XSDIVQP
    140U,	// XSDIVQPO
    140U,	// XSDIVSP
    140U,	// XSIEXPDP
    140U,	// XSIEXPQP
    45U,	// XSMADDADP
    45U,	// XSMADDASP
    45U,	// XSMADDMDP
    45U,	// XSMADDMSP
    45U,	// XSMADDQP
    45U,	// XSMADDQPO
    140U,	// XSMAXCDP
    140U,	// XSMAXDP
    140U,	// XSMAXJDP
    140U,	// XSMINCDP
    140U,	// XSMINDP
    140U,	// XSMINJDP
    45U,	// XSMSUBADP
    45U,	// XSMSUBASP
    45U,	// XSMSUBMDP
    45U,	// XSMSUBMSP
    45U,	// XSMSUBQP
    45U,	// XSMSUBQPO
    140U,	// XSMULDP
    140U,	// XSMULQP
    140U,	// XSMULQPO
    140U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    45U,	// XSNMADDADP
    45U,	// XSNMADDASP
    45U,	// XSNMADDMDP
    45U,	// XSNMADDMSP
    45U,	// XSNMADDQP
    45U,	// XSNMADDQPO
    45U,	// XSNMSUBADP
    45U,	// XSNMSUBASP
    45U,	// XSNMSUBMDP
    45U,	// XSNMSUBMSP
    45U,	// XSNMSUBQP
    45U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    140U,	// XSSUBDP
    140U,	// XSSUBQP
    140U,	// XSSUBQPO
    140U,	// XSSUBSP
    140U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    3U,	// XSTSTDCDP
    3U,	// XSTSTDCQP
    3U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    140U,	// XVADDDP
    140U,	// XVADDSP
    140U,	// XVBF16GER2
    45U,	// XVBF16GER2NN
    45U,	// XVBF16GER2NP
    45U,	// XVBF16GER2PN
    45U,	// XVBF16GER2PP
    140U,	// XVCMPEQDP
    140U,	// XVCMPEQDP_rec
    140U,	// XVCMPEQSP
    140U,	// XVCMPEQSP_rec
    140U,	// XVCMPGEDP
    140U,	// XVCMPGEDP_rec
    140U,	// XVCMPGESP
    140U,	// XVCMPGESP_rec
    140U,	// XVCMPGTDP
    140U,	// XVCMPGTDP_rec
    140U,	// XVCMPGTSP
    140U,	// XVCMPGTSP_rec
    140U,	// XVCPSGNDP
    140U,	// XVCPSGNSP
    0U,	// XVCVBF16SPN
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPBF16
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    140U,	// XVDIVDP
    140U,	// XVDIVSP
    140U,	// XVF16GER2
    45U,	// XVF16GER2NN
    45U,	// XVF16GER2NP
    45U,	// XVF16GER2PN
    45U,	// XVF16GER2PP
    140U,	// XVF32GER
    45U,	// XVF32GERNN
    45U,	// XVF32GERNP
    45U,	// XVF32GERPN
    45U,	// XVF32GERPP
    140U,	// XVF64GER
    45U,	// XVF64GERNN
    45U,	// XVF64GERNP
    45U,	// XVF64GERPN
    45U,	// XVF64GERPP
    140U,	// XVI16GER2
    45U,	// XVI16GER2PP
    140U,	// XVI16GER2S
    45U,	// XVI16GER2SPP
    140U,	// XVI4GER8
    45U,	// XVI4GER8PP
    140U,	// XVI8GER4
    45U,	// XVI8GER4PP
    45U,	// XVI8GER4SPP
    140U,	// XVIEXPDP
    140U,	// XVIEXPSP
    45U,	// XVMADDADP
    45U,	// XVMADDASP
    45U,	// XVMADDMDP
    45U,	// XVMADDMSP
    140U,	// XVMAXDP
    140U,	// XVMAXSP
    140U,	// XVMINDP
    140U,	// XVMINSP
    45U,	// XVMSUBADP
    45U,	// XVMSUBASP
    45U,	// XVMSUBMDP
    45U,	// XVMSUBMSP
    140U,	// XVMULDP
    140U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    45U,	// XVNMADDADP
    45U,	// XVNMADDASP
    45U,	// XVNMADDMDP
    45U,	// XVNMADDMSP
    45U,	// XVNMSUBADP
    45U,	// XVNMSUBASP
    45U,	// XVNMSUBMDP
    45U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    140U,	// XVSUBDP
    140U,	// XVSUBSP
    140U,	// XVTDIVDP
    140U,	// XVTDIVSP
    0U,	// XVTLSBB
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    3U,	// XVTSTDCDP
    3U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    1036U,	// XXBLENDVB
    1036U,	// XXBLENDVD
    1036U,	// XXBLENDVH
    1036U,	// XXBLENDVW
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    9228U,	// XXEVAL
    48U,	// XXEXTRACTUW
    52U,	// XXGENPCVBM
    52U,	// XXGENPCVDM
    52U,	// XXGENPCVHM
    52U,	// XXGENPCVWM
    3U,	// XXINSERTW
    140U,	// XXLAND
    140U,	// XXLANDC
    140U,	// XXLEQV
    24U,	// XXLEQVOnes
    140U,	// XXLNAND
    140U,	// XXLNOR
    140U,	// XXLOR
    140U,	// XXLORC
    140U,	// XXLORf
    140U,	// XXLXOR
    24U,	// XXLXORdpz
    24U,	// XXLXORspz
    24U,	// XXLXORz
    0U,	// XXMFACC
    140U,	// XXMRGHW
    140U,	// XXMRGLW
    0U,	// XXMTACC
    140U,	// XXPERM
    4108U,	// XXPERMDI
    4636U,	// XXPERMDIs
    140U,	// XXPERMR
    9228U,	// XXPERMX
    1036U,	// XXSEL
    0U,	// XXSETACCZ
    4108U,	// XXSLDWI
    4636U,	// XXSLDWIs
    0U,	// XXSPLTI32DX
    0U,	// XXSPLTIB
    0U,	// XXSPLTIDP
    0U,	// XXSPLTIW
    56U,	// XXSPLTW
    56U,	// XXSPLTWs
    60U,	// gBC
    64U,	// gBCA
    0U,	// gBCAat
    140U,	// gBCCTR
    140U,	// gBCCTRL
    60U,	// gBCL
    64U,	// gBCLA
    0U,	// gBCLAat
    140U,	// gBCLR
    140U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_INSTR_REF
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// BUILD_UACC
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDI_rec
    0U,	// CLRLSLWI
    0U,	// CLRLSLWI_rec
    0U,	// CLRRDI
    0U,	// CLRRDI_rec
    0U,	// CLRRWI
    0U,	// CLRRWI_rec
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    0U,	// CP_PASTE_LAST
    0U,	// CP_PASTEx
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFPS
    0U,	// DCBFx
    0U,	// DCBSTPS
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDI_rec
    0U,	// EXTLWI
    0U,	// EXTLWI_rec
    0U,	// EXTRDI
    0U,	// EXTRDI_rec
    0U,	// EXTRWI
    0U,	// EXTRWI_rec
    0U,	// INSLWI
    0U,	// INSLWI_rec
    0U,	// INSRDI
    0U,	// INSRDI_rec
    0U,	// INSRWI
    0U,	// INSRWI_rec
    0U,	// KILL_PAIR
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    0U,	// RLWIMIbm
    0U,	// RLWIMIbm_rec
    0U,	// RLWINMbm
    0U,	// RLWINMbm_rec
    0U,	// RLWNMbm
    0U,	// RLWNMbm_rec
    0U,	// ROTRDI
    0U,	// ROTRDI_rec
    0U,	// ROTRWI
    0U,	// ROTRWI_rec
    0U,	// SLDI
    0U,	// SLDI_rec
    0U,	// SLWI
    0U,	// SLWI_rec
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    0U,	// SRDI
    0U,	// SRDI_rec
    0U,	// SRWI
    0U,	// SRWI_rec
    0U,	// STIWX
    0U,	// SUBI
    0U,	// SUBIC
    0U,	// SUBIC_rec
    0U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    0U,	// ADD4
    0U,	// ADD4O
    0U,	// ADD4O_rec
    0U,	// ADD4TLS
    0U,	// ADD4_rec
    0U,	// ADD8
    0U,	// ADD8O
    0U,	// ADD8O_rec
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8_rec
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8O
    0U,	// ADDC8O_rec
    0U,	// ADDC8_rec
    0U,	// ADDCO
    0U,	// ADDCO_rec
    0U,	// ADDC_rec
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8O
    0U,	// ADDE8O_rec
    0U,	// ADDE8_rec
    0U,	// ADDEO
    0U,	// ADDEO_rec
    0U,	// ADDE_rec
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDIC_rec
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIStocHA8
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8O
    0U,	// ADDME8O_rec
    0U,	// ADDME8_rec
    0U,	// ADDMEO
    0U,	// ADDMEO_rec
    0U,	// ADDME_rec
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8O
    0U,	// ADDZE8O_rec
    0U,	// ADDZE8_rec
    0U,	// ADDZEO
    0U,	// ADDZEO_rec
    0U,	// ADDZE_rec
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8_rec
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8_rec
    0U,	// ANDC_rec
    0U,	// ANDI8_rec
    0U,	// ANDIS8_rec
    0U,	// ANDIS_rec
    0U,	// ANDI_rec
    0U,	// ANDI_rec_1_EQ_BIT
    0U,	// ANDI_rec_1_EQ_BIT8
    0U,	// ANDI_rec_1_GT_BIT
    0U,	// ANDI_rec_1_GT_BIT8
    0U,	// AND_rec
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    0U,	// BCDCFN_rec
    0U,	// BCDCFSQ_rec
    0U,	// BCDCFZ_rec
    0U,	// BCDCPSGN_rec
    0U,	// BCDCTN_rec
    0U,	// BCDCTSQ_rec
    0U,	// BCDCTZ_rec
    0U,	// BCDSETSGN_rec
    0U,	// BCDSR_rec
    0U,	// BCDS_rec
    0U,	// BCDTRUNC_rec
    0U,	// BCDUS_rec
    0U,	// BCDUTRUNC_rec
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCTRL_LWZinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_NOTOC
    0U,	// BL8_NOTOC_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CFUGED
    0U,	// CLRBHRB
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPEQB
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDM
    0U,	// CNTLZD_rec
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8_rec
    0U,	// CNTLZW_rec
    0U,	// CNTTZD
    0U,	// CNTTZDM
    0U,	// CNTTZD_rec
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8_rec
    0U,	// CNTTZW_rec
    0U,	// CP_ABORT
    0U,	// CP_COPY
    0U,	// CP_COPY8
    0U,	// CP_PASTE
    0U,	// CP_PASTE8
    0U,	// CP_PASTE8_rec
    0U,	// CP_PASTE_rec
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEO
    0U,	// DIVDEO_rec
    0U,	// DIVDEU
    0U,	// DIVDEUO
    0U,	// DIVDEUO_rec
    0U,	// DIVDEU_rec
    0U,	// DIVDE_rec
    0U,	// DIVDO
    0U,	// DIVDO_rec
    0U,	// DIVDU
    0U,	// DIVDUO
    0U,	// DIVDUO_rec
    0U,	// DIVDU_rec
    0U,	// DIVD_rec
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEO
    0U,	// DIVWEO_rec
    0U,	// DIVWEU
    0U,	// DIVWEUO
    0U,	// DIVWEUO_rec
    0U,	// DIVWEU_rec
    0U,	// DIVWE_rec
    0U,	// DIVWO
    0U,	// DIVWO_rec
    0U,	// DIVWU
    0U,	// DIVWUO
    0U,	// DIVWUO_rec
    0U,	// DIVWU_rec
    0U,	// DIVW_rec
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    0U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    0U,	// EFDCMPEQ
    0U,	// EFDCMPGT
    0U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    0U,	// EFDDIV
    0U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    0U,	// EFDSUB
    0U,	// EFDTSTEQ
    0U,	// EFDTSTGT
    0U,	// EFDTSTLT
    0U,	// EFSABS
    0U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    0U,	// EFSCMPEQ
    0U,	// EFSCMPGT
    0U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    0U,	// EFSDIV
    0U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    0U,	// EFSSUB
    0U,	// EFSTSTEQ
    0U,	// EFSTSTGT
    0U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8_rec
    0U,	// EQV_rec
    0U,	// EVABS
    0U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    0U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    0U,	// EVFSCMPEQ
    0U,	// EVFSCMPGT
    0U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    0U,	// EVFSDIV
    0U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    0U,	// EVFSSUB
    0U,	// EVFSTSTEQ
    0U,	// EVFSTSTGT
    0U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    0U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    0U,	// EVSLW
    0U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    0U,	// EVSRWIS
    0U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8_rec
    0U,	// EXTSB_rec
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8_rec
    0U,	// EXTSH_rec
    0U,	// EXTSW
    0U,	// EXTSWSLI
    0U,	// EXTSWSLI_32_64
    0U,	// EXTSWSLI_32_64_rec
    0U,	// EXTSWSLI_rec
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64_rec
    0U,	// EXTSW_rec
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSD_rec
    0U,	// FABSS
    0U,	// FABSS_rec
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDS_rec
    0U,	// FADD_rec
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDS_rec
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUS_rec
    0U,	// FCFIDU_rec
    0U,	// FCFID_rec
    0U,	// FCMPOD
    0U,	// FCMPOS
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGND_rec
    0U,	// FCPSGNS
    0U,	// FCPSGNS_rec
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZ_rec
    0U,	// FCTIDU_rec
    0U,	// FCTIDZ
    0U,	// FCTIDZ_rec
    0U,	// FCTID_rec
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZ_rec
    0U,	// FCTIWU_rec
    0U,	// FCTIWZ
    0U,	// FCTIWZ_rec
    0U,	// FCTIW_rec
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVS_rec
    0U,	// FDIV_rec
    0U,	// FMADD
    0U,	// FMADDS
    0U,	// FMADDS_rec
    0U,	// FMADD_rec
    0U,	// FMR
    0U,	// FMR_rec
    0U,	// FMSUB
    0U,	// FMSUBS
    0U,	// FMSUBS_rec
    0U,	// FMSUB_rec
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULS_rec
    0U,	// FMUL_rec
    0U,	// FNABSD
    0U,	// FNABSD_rec
    0U,	// FNABSS
    0U,	// FNABSS_rec
    0U,	// FNEGD
    0U,	// FNEGD_rec
    0U,	// FNEGS
    0U,	// FNEGS_rec
    0U,	// FNMADD
    0U,	// FNMADDS
    0U,	// FNMADDS_rec
    0U,	// FNMADD_rec
    0U,	// FNMSUB
    0U,	// FNMSUBS
    0U,	// FNMSUBS_rec
    0U,	// FNMSUB_rec
    0U,	// FRE
    0U,	// FRES
    0U,	// FRES_rec
    0U,	// FRE_rec
    0U,	// FRIMD
    0U,	// FRIMD_rec
    0U,	// FRIMS
    0U,	// FRIMS_rec
    0U,	// FRIND
    0U,	// FRIND_rec
    0U,	// FRINS
    0U,	// FRINS_rec
    0U,	// FRIPD
    0U,	// FRIPD_rec
    0U,	// FRIPS
    0U,	// FRIPS_rec
    0U,	// FRIZD
    0U,	// FRIZD_rec
    0U,	// FRIZS
    0U,	// FRIZS_rec
    0U,	// FRSP
    0U,	// FRSP_rec
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTES_rec
    0U,	// FRSQRTE_rec
    0U,	// FSELD
    0U,	// FSELD_rec
    0U,	// FSELS
    0U,	// FSELS_rec
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTS_rec
    0U,	// FSQRT_rec
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBS_rec
    0U,	// FSUB_rec
    0U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsADDRPCREL
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// GETtlsldADDRPCREL
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    0U,	// ISEL
    0U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LBZXTLS
    0U,	// LBZXTLS_
    0U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    0U,	// LDAT
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDXTLS
    0U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LHZXTLS
    0U,	// LHZXTLS_
    0U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    0U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZXTLS
    0U,	// LWZXTLS_
    0U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LWZtocL
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    0U,	// LXVL
    0U,	// LXVLL
    0U,	// LXVP
    0U,	// LXVPX
    0U,	// LXVRBX
    0U,	// LXVRDX
    0U,	// LXVRHX
    0U,	// LXVRWX
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    0U,	// MADDHD
    0U,	// MADDHDU
    0U,	// MADDLD
    0U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFS_rec
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVRWZ
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    0U,	// MODSD
    0U,	// MODSW
    0U,	// MODUD
    0U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFI_rec
    0U,	// MTFSF_rec
    0U,	// MTFSFb
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRD
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVRWA
    0U,	// MTVRWZ
    0U,	// MTVSCR
    0U,	// MTVSRBM
    0U,	// MTVSRBMI
    0U,	// MTVSRD
    0U,	// MTVSRDD
    0U,	// MTVSRDM
    0U,	// MTVSRHM
    0U,	// MTVSRQM
    0U,	// MTVSRWA
    0U,	// MTVSRWM
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDU_rec
    0U,	// MULHD_rec
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWU_rec
    0U,	// MULHW_rec
    0U,	// MULLD
    0U,	// MULLDO
    0U,	// MULLDO_rec
    0U,	// MULLD_rec
    0U,	// MULLI
    0U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWO
    0U,	// MULLWO_rec
    0U,	// MULLW_rec
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8_rec
    0U,	// NAND_rec
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8O
    0U,	// NEG8O_rec
    0U,	// NEG8_rec
    0U,	// NEGO
    0U,	// NEGO_rec
    0U,	// NEG_rec
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8_rec
    0U,	// NOR_rec
    0U,	// OR
    0U,	// OR8
    0U,	// OR8_rec
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8_rec
    0U,	// ORC_rec
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// OR_rec
    0U,	// PADDI
    0U,	// PADDI8
    0U,	// PADDI8pc
    0U,	// PADDIdtprel
    0U,	// PADDIpc
    0U,	// PDEPD
    0U,	// PEXTD
    0U,	// PLBZ
    0U,	// PLBZ8
    0U,	// PLBZ8pc
    0U,	// PLBZpc
    0U,	// PLD
    0U,	// PLDpc
    0U,	// PLFD
    0U,	// PLFDpc
    0U,	// PLFS
    0U,	// PLFSpc
    0U,	// PLHA
    0U,	// PLHA8
    0U,	// PLHA8pc
    0U,	// PLHApc
    0U,	// PLHZ
    0U,	// PLHZ8
    0U,	// PLHZ8pc
    0U,	// PLHZpc
    0U,	// PLI
    0U,	// PLI8
    0U,	// PLWA
    0U,	// PLWA8
    0U,	// PLWA8pc
    0U,	// PLWApc
    0U,	// PLWZ
    0U,	// PLWZ8
    0U,	// PLWZ8pc
    0U,	// PLWZpc
    0U,	// PLXSD
    0U,	// PLXSDpc
    0U,	// PLXSSP
    0U,	// PLXSSPpc
    0U,	// PLXV
    0U,	// PLXVP
    0U,	// PLXVPpc
    0U,	// PLXVpc
    0U,	// PMXVBF16GER2
    0U,	// PMXVBF16GER2NN
    0U,	// PMXVBF16GER2NP
    0U,	// PMXVBF16GER2PN
    0U,	// PMXVBF16GER2PP
    0U,	// PMXVF16GER2
    0U,	// PMXVF16GER2NN
    0U,	// PMXVF16GER2NP
    0U,	// PMXVF16GER2PN
    0U,	// PMXVF16GER2PP
    8U,	// PMXVF32GER
    0U,	// PMXVF32GERNN
    0U,	// PMXVF32GERNP
    0U,	// PMXVF32GERPN
    0U,	// PMXVF32GERPP
    1U,	// PMXVF64GER
    0U,	// PMXVF64GERNN
    0U,	// PMXVF64GERNP
    0U,	// PMXVF64GERPN
    0U,	// PMXVF64GERPP
    0U,	// PMXVI16GER2
    0U,	// PMXVI16GER2PP
    0U,	// PMXVI16GER2S
    0U,	// PMXVI16GER2SPP
    16U,	// PMXVI4GER8
    0U,	// PMXVI4GER8PP
    32U,	// PMXVI8GER4
    0U,	// PMXVI8GER4PP
    0U,	// PMXVI8GER4SPP
    0U,	// POPCNTB
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    0U,	// PREPARE_PROBED_ALLOCA_32
    0U,	// PREPARE_PROBED_ALLOCA_64
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_32
    0U,	// PREPARE_PROBED_ALLOCA_NEGSIZE_SAME_REG_64
    0U,	// PROBED_ALLOCA_32
    0U,	// PROBED_ALLOCA_64
    0U,	// PROBED_STACKALLOC_32
    0U,	// PROBED_STACKALLOC_64
    0U,	// PSTB
    0U,	// PSTB8
    0U,	// PSTB8pc
    0U,	// PSTBpc
    0U,	// PSTD
    0U,	// PSTDpc
    0U,	// PSTFD
    0U,	// PSTFDpc
    0U,	// PSTFS
    0U,	// PSTFSpc
    0U,	// PSTH
    0U,	// PSTH8
    0U,	// PSTH8pc
    0U,	// PSTHpc
    0U,	// PSTW
    0U,	// PSTW8
    0U,	// PSTW8pc
    0U,	// PSTWpc
    0U,	// PSTXSD
    0U,	// PSTXSDpc
    0U,	// PSTXSSP
    0U,	// PSTXSSPpc
    0U,	// PSTXV
    0U,	// PSTXVP
    0U,	// PSTXVPpc
    0U,	// PSTXVpc
    0U,	// RESTORE_ACC
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_UACC
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    0U,	// RLDCL
    0U,	// RLDCL_rec
    0U,	// RLDCR
    0U,	// RLDCR_rec
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32_rec
    0U,	// RLDICL_rec
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICR_rec
    0U,	// RLDIC_rec
    0U,	// RLDIMI
    0U,	// RLDIMI_rec
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8_rec
    0U,	// RLWIMI_rec
    2U,	// RLWINM
    2U,	// RLWINM8
    2U,	// RLWINM8_rec
    2U,	// RLWINM_rec
    2U,	// RLWNM
    2U,	// RLWNM8
    2U,	// RLWNM8_rec
    2U,	// RLWNM_rec
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETBC
    0U,	// SETBC8
    0U,	// SETBCR
    0U,	// SETBCR8
    0U,	// SETFLM
    0U,	// SETNBC
    0U,	// SETNBC8
    0U,	// SETNBCR
    0U,	// SETNBCR8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEE_rec
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    0U,	// SLD
    0U,	// SLD_rec
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8_rec
    0U,	// SLW_rec
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_ACC
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_UACC
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRADI_32
    0U,	// SRADI_rec
    0U,	// SRAD_rec
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRAWI_rec
    0U,	// SRAW_rec
    0U,	// SRD
    0U,	// SRD_rec
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8_rec
    0U,	// SRW_rec
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STBXTLS
    0U,	// STBXTLS_
    0U,	// STBXTLS_32
    0U,	// STD
    0U,	// STDAT
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STDXTLS
    0U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STHXTLS
    0U,	// STHXTLS_
    0U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    0U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWAT
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STWXTLS
    0U,	// STWXTLS_
    0U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    0U,	// STXVL
    0U,	// STXVLL
    0U,	// STXVP
    0U,	// STXVPX
    0U,	// STXVRBX
    0U,	// STXVRDX
    0U,	// STXVRHX
    0U,	// STXVRWX
    0U,	// STXVW4X
    0U,	// STXVX
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8O
    0U,	// SUBF8O_rec
    0U,	// SUBF8_rec
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8O
    0U,	// SUBFC8O_rec
    0U,	// SUBFC8_rec
    0U,	// SUBFCO
    0U,	// SUBFCO_rec
    0U,	// SUBFC_rec
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8O
    0U,	// SUBFE8O_rec
    0U,	// SUBFE8_rec
    0U,	// SUBFEO
    0U,	// SUBFEO_rec
    0U,	// SUBFE_rec
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8O
    0U,	// SUBFME8O_rec
    0U,	// SUBFME8_rec
    0U,	// SUBFMEO
    0U,	// SUBFMEO_rec
    0U,	// SUBFME_rec
    0U,	// SUBFO
    0U,	// SUBFO_rec
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8O
    0U,	// SUBFZE8O_rec
    0U,	// SUBFZE8_rec
    0U,	// SUBFZEO
    0U,	// SUBFZEO_rec
    0U,	// SUBFZE_rec
    0U,	// SUBF_rec
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    0U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    0U,	// TWI
    0U,	// UNENCODED_NOP
    0U,	// UpdateGBR
    0U,	// VABSDUB
    0U,	// VABSDUH
    0U,	// VABSDUW
    0U,	// VADDCUQ
    0U,	// VADDCUW
    0U,	// VADDECUQ
    0U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMD
    0U,	// VBPERMQ
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUGED
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLRLB
    0U,	// VCLRRB
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZDM
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFP_rec
    0U,	// VCMPEQFP
    0U,	// VCMPEQFP_rec
    0U,	// VCMPEQUB
    0U,	// VCMPEQUB_rec
    0U,	// VCMPEQUD
    0U,	// VCMPEQUD_rec
    0U,	// VCMPEQUH
    0U,	// VCMPEQUH_rec
    0U,	// VCMPEQUQ
    0U,	// VCMPEQUQ_rec
    0U,	// VCMPEQUW
    0U,	// VCMPEQUW_rec
    0U,	// VCMPGEFP
    0U,	// VCMPGEFP_rec
    0U,	// VCMPGTFP
    0U,	// VCMPGTFP_rec
    0U,	// VCMPGTSB
    0U,	// VCMPGTSB_rec
    0U,	// VCMPGTSD
    0U,	// VCMPGTSD_rec
    0U,	// VCMPGTSH
    0U,	// VCMPGTSH_rec
    0U,	// VCMPGTSQ
    0U,	// VCMPGTSQ_rec
    0U,	// VCMPGTSW
    0U,	// VCMPGTSW_rec
    0U,	// VCMPGTUB
    0U,	// VCMPGTUB_rec
    0U,	// VCMPGTUD
    0U,	// VCMPGTUD_rec
    0U,	// VCMPGTUH
    0U,	// VCMPGTUH_rec
    0U,	// VCMPGTUQ
    0U,	// VCMPGTUQ_rec
    0U,	// VCMPGTUW
    0U,	// VCMPGTUW_rec
    0U,	// VCMPNEB
    0U,	// VCMPNEB_rec
    0U,	// VCMPNEH
    0U,	// VCMPNEH_rec
    0U,	// VCMPNEW
    0U,	// VCMPNEW_rec
    0U,	// VCMPNEZB
    0U,	// VCMPNEZB_rec
    0U,	// VCMPNEZH
    0U,	// VCMPNEZH_rec
    0U,	// VCMPNEZW
    0U,	// VCMPNEZW_rec
    0U,	// VCMPSQ
    0U,	// VCMPUQ
    0U,	// VCNTMBB
    0U,	// VCNTMBD
    0U,	// VCNTMBH
    0U,	// VCNTMBW
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZDM
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    0U,	// VDIVESD
    0U,	// VDIVESQ
    0U,	// VDIVESW
    0U,	// VDIVEUD
    0U,	// VDIVEUQ
    0U,	// VDIVEUW
    0U,	// VDIVSD
    0U,	// VDIVSQ
    0U,	// VDIVSW
    0U,	// VDIVUD
    0U,	// VDIVUQ
    0U,	// VDIVUW
    0U,	// VEQV
    0U,	// VEXPANDBM
    0U,	// VEXPANDDM
    0U,	// VEXPANDHM
    0U,	// VEXPANDQM
    0U,	// VEXPANDWM
    0U,	// VEXPTEFP
    0U,	// VEXTDDVLX
    0U,	// VEXTDDVRX
    0U,	// VEXTDUBVLX
    0U,	// VEXTDUBVRX
    0U,	// VEXTDUHVLX
    0U,	// VEXTDUHVRX
    0U,	// VEXTDUWVLX
    0U,	// VEXTDUWVRX
    0U,	// VEXTRACTBM
    0U,	// VEXTRACTD
    0U,	// VEXTRACTDM
    0U,	// VEXTRACTHM
    0U,	// VEXTRACTQM
    0U,	// VEXTRACTUB
    0U,	// VEXTRACTUH
    0U,	// VEXTRACTUW
    0U,	// VEXTRACTWM
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSD2Q
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    0U,	// VEXTUBLX
    0U,	// VEXTUBRX
    0U,	// VEXTUHLX
    0U,	// VEXTUHRX
    0U,	// VEXTUWLX
    0U,	// VEXTUWRX
    0U,	// VGBBD
    0U,	// VGNB
    0U,	// VINSBLX
    0U,	// VINSBRX
    0U,	// VINSBVLX
    0U,	// VINSBVRX
    0U,	// VINSD
    0U,	// VINSDLX
    0U,	// VINSDRX
    0U,	// VINSERTB
    0U,	// VINSERTD
    0U,	// VINSERTH
    0U,	// VINSERTW
    0U,	// VINSHLX
    0U,	// VINSHRX
    0U,	// VINSHVLX
    0U,	// VINSHVRX
    0U,	// VINSW
    0U,	// VINSWLX
    0U,	// VINSWRX
    0U,	// VINSWVLX
    0U,	// VINSWVRX
    0U,	// VLOGEFP
    0U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    0U,	// VMHADDSHS
    0U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    0U,	// VMLADDUHM
    0U,	// VMODSD
    0U,	// VMODSQ
    0U,	// VMODSW
    0U,	// VMODUD
    0U,	// VMODUQ
    0U,	// VMODUW
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    0U,	// VMSUMCUD
    0U,	// VMSUMMBM
    0U,	// VMSUMSHM
    0U,	// VMSUMSHS
    0U,	// VMSUMUBM
    0U,	// VMSUMUDM
    0U,	// VMSUMUHM
    0U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    0U,	// VMUL10ECUQ
    0U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    0U,	// VMULESB
    0U,	// VMULESD
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUD
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULHSD
    0U,	// VMULHSW
    0U,	// VMULHUD
    0U,	// VMULHUW
    0U,	// VMULLD
    0U,	// VMULOSB
    0U,	// VMULOSD
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUD
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    0U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    0U,	// VPDEPD
    0U,	// VPERM
    0U,	// VPERMR
    0U,	// VPERMXOR
    0U,	// VPEXTD
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLDMI
    0U,	// VRLDNM
    0U,	// VRLH
    0U,	// VRLQ
    0U,	// VRLQMI
    0U,	// VRLQNM
    0U,	// VRLW
    0U,	// VRLWMI
    0U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    0U,	// VSEL
    0U,	// VSHASIGMAD
    0U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    0U,	// VSLDBI
    0U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLQ
    0U,	// VSLV
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTBs
    0U,	// VSPLTH
    0U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAQ
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRDBI
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRQ
    0U,	// VSRV
    0U,	// VSRW
    0U,	// VSTRIBL
    0U,	// VSTRIBL_rec
    0U,	// VSTRIBR
    0U,	// VSTRIBR_rec
    0U,	// VSTRIHL
    0U,	// VSTRIHL_rec
    0U,	// VSTRIHR
    0U,	// VSTRIHR_rec
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    0U,	// VSUBECUQ
    0U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SET0B
    0U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8_rec
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U,	// XOR_rec
    0U,	// XSABSDP
    0U,	// XSABSQP
    0U,	// XSADDDP
    0U,	// XSADDQP
    0U,	// XSADDQPO
    0U,	// XSADDSP
    0U,	// XSCMPEQDP
    0U,	// XSCMPEXPDP
    0U,	// XSCMPEXPQP
    0U,	// XSCMPGEDP
    0U,	// XSCMPGTDP
    0U,	// XSCMPODP
    0U,	// XSCMPOQP
    0U,	// XSCMPUDP
    0U,	// XSCMPUQP
    0U,	// XSCPSGNDP
    0U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSQZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUQZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSQQP
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUQQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVQP
    0U,	// XSDIVQPO
    0U,	// XSDIVSP
    0U,	// XSIEXPDP
    0U,	// XSIEXPQP
    0U,	// XSMADDADP
    0U,	// XSMADDASP
    0U,	// XSMADDMDP
    0U,	// XSMADDMSP
    0U,	// XSMADDQP
    0U,	// XSMADDQPO
    0U,	// XSMAXCDP
    0U,	// XSMAXDP
    0U,	// XSMAXJDP
    0U,	// XSMINCDP
    0U,	// XSMINDP
    0U,	// XSMINJDP
    0U,	// XSMSUBADP
    0U,	// XSMSUBASP
    0U,	// XSMSUBMDP
    0U,	// XSMSUBMSP
    0U,	// XSMSUBQP
    0U,	// XSMSUBQPO
    0U,	// XSMULDP
    0U,	// XSMULQP
    0U,	// XSMULQPO
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    0U,	// XSNMADDADP
    0U,	// XSNMADDASP
    0U,	// XSNMADDMDP
    0U,	// XSNMADDMSP
    0U,	// XSNMADDQP
    0U,	// XSNMADDQPO
    0U,	// XSNMSUBADP
    0U,	// XSNMSUBASP
    0U,	// XSNMSUBMDP
    0U,	// XSNMSUBMSP
    0U,	// XSNMSUBQP
    0U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBQP
    0U,	// XSSUBQPO
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    0U,	// XSTSTDCDP
    0U,	// XSTSTDCQP
    0U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVBF16GER2
    0U,	// XVBF16GER2NN
    0U,	// XVBF16GER2NP
    0U,	// XVBF16GER2PN
    0U,	// XVBF16GER2PP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDP_rec
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSP_rec
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDP_rec
    0U,	// XVCMPGESP
    0U,	// XVCMPGESP_rec
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDP_rec
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSP_rec
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVBF16SPN
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPBF16
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVF16GER2
    0U,	// XVF16GER2NN
    0U,	// XVF16GER2NP
    0U,	// XVF16GER2PN
    0U,	// XVF16GER2PP
    0U,	// XVF32GER
    0U,	// XVF32GERNN
    0U,	// XVF32GERNP
    0U,	// XVF32GERPN
    0U,	// XVF32GERPP
    0U,	// XVF64GER
    0U,	// XVF64GERNN
    0U,	// XVF64GERNP
    0U,	// XVF64GERPN
    0U,	// XVF64GERPP
    0U,	// XVI16GER2
    0U,	// XVI16GER2PP
    0U,	// XVI16GER2S
    0U,	// XVI16GER2SPP
    0U,	// XVI4GER8
    0U,	// XVI4GER8PP
    0U,	// XVI8GER4
    0U,	// XVI8GER4PP
    0U,	// XVI8GER4SPP
    0U,	// XVIEXPDP
    0U,	// XVIEXPSP
    0U,	// XVMADDADP
    0U,	// XVMADDASP
    0U,	// XVMADDMDP
    0U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    0U,	// XVMSUBADP
    0U,	// XVMSUBASP
    0U,	// XVMSUBMDP
    0U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    0U,	// XVNMADDADP
    0U,	// XVNMADDASP
    0U,	// XVNMADDMDP
    0U,	// XVNMADDMSP
    0U,	// XVNMSUBADP
    0U,	// XVNMSUBASP
    0U,	// XVNMSUBMDP
    0U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTLSBB
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    0U,	// XVTSTDCDP
    0U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBLENDVB
    0U,	// XXBLENDVD
    0U,	// XXBLENDVH
    0U,	// XXBLENDVW
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    3U,	// XXEVAL
    0U,	// XXEXTRACTUW
    0U,	// XXGENPCVBM
    0U,	// XXGENPCVDM
    0U,	// XXGENPCVHM
    0U,	// XXGENPCVWM
    0U,	// XXINSERTW
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLEQVOnes
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    0U,	// XXLXORdpz
    0U,	// XXLXORspz
    0U,	// XXLXORz
    0U,	// XXMFACC
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    0U,	// XXMTACC
    0U,	// XXPERM
    0U,	// XXPERMDI
    0U,	// XXPERMDIs
    0U,	// XXPERMR
    4U,	// XXPERMX
    0U,	// XXSEL
    0U,	// XXSETACCZ
    0U,	// XXSLDWI
    0U,	// XXSLDWIs
    0U,	// XXSPLTI32DX
    0U,	// XXSPLTIB
    0U,	// XXSPLTIDP
    0U,	// XXSPLTIW
    0U,	// XXSPLTW
    0U,	// XXSPLTWs
    0U,	// gBC
    0U,	// gBCA
    0U,	// gBCAat
    0U,	// gBCCTR
    0U,	// gBCCTRL
    0U,	// gBCL
    0U,	// gBCLA
    0U,	// gBCLAat
    0U,	// gBCLR
    0U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  return {AsmStrs+(Bits & 32767)-1, Bits};

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &O) {
  O << "\t";

  auto MnemonicInfo = getMnemonic(MI);

  O << MnemonicInfo.first;

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 15) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_INSTR_REF, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_...
    return;
    break;
  case 1:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // DCBFL, DCBFLP, DCBFPS, DCBFx, DCBSTPS, DCBTCT, DCBTDS, DCBTSTCT, DCBTS...
    printMemRegReg(MI, 0, STI, O);
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, STI, O);
    O << ' ';
    printU16ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 4:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, Address, 0, STI, O);
    break;
  case 5:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, STI, O);
    break;
  case 6:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, STI, O, "cc");
    break;
  case 7:
    // BCTRL8_LDinto_toc, BCTRL_LWZinto_toc
    printMemRegImm(MI, 0, STI, O);
    return;
    break;
  case 8:
    // BL8_NOP_TLS, BL8_NOTOC_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, STI, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, STI, O);
    O << ", ";
    break;
  case 10:
    // DCBTEP, DCBTSTEP
    printU5ImmOperand(MI, 2, STI, O);
    O << ", ";
    printMemRegReg(MI, 0, STI, O);
    return;
    break;
  case 11:
    // DSS, MBAR, MTFSB0, MTFSB1, TABORTDC, TABORTDCI, TABORTWC, TABORTWCI, T...
    printU5ImmOperand(MI, 0, STI, O);
    break;
  case 12:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, STI, O);
    break;
  case 13:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, STI, O);
    O << ", ";
    printMemRegReg(MI, 1, STI, O);
    return;
    break;
  case 14:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 15:
    // MTSR
    printU4ImmOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 16:
    // RFEBB, TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 0, STI, O);
    return;
    break;
  case 17:
    // SYNC, WAIT
    printU2ImmOperand(MI, 0, STI, O);
    return;
    break;
  case 18:
    // XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printU2ImmOperand(MI, 3, STI, O);
    return;
    break;
  case 19:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, STI, O);
    O << ' ';
    printU5ImmOperand(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 21 unique commands.
  switch ((Bits >> 20) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    O << ", ";
    break;
  case 1:
    // DCBFL, DCBFLP, DCBFPS, DCBFx, DCBSTPS, DCBTSTT, DCBTSTx, DCBTT, DCBTx,...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    O << ' ';
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    O << ", ";
    printBranchOperand(MI, Address, 2, STI, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, STI, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    O << ", ";
    printBranchOperand(MI, Address, 2, STI, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, STI, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, STI, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, STI, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP, BL_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // DCBF
    printU3ImmOperand(MI, 0, STI, O);
    return;
    break;
  case 14:
    // DCBT, DCBTST
    printU5ImmOperand(MI, 0, STI, O);
    return;
    break;
  case 15:
    // EVSEL, TLBIE
    O << ',';
    break;
  case 16:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 17:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 18:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 19:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, STI, O);
    return;
    break;
  case 20:
    // gBCLat, gBCat
    printBranchOperand(MI, Address, 3, STI, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 25) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CL...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, STI, O);
    break;
  case 2:
    // LAx, EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVL...
    printMemRegImm(MI, 1, STI, O);
    return;
    break;
  case 3:
    // SUBPCIS, LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, EVLDDX, EVLDHX, EVLDWX, EVLH...
    printMemRegReg(MI, 1, STI, O);
    break;
  case 5:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, Address, 1, STI, O);
    return;
    break;
  case 6:
    // CMPRB, CMPRB8, MTMSR, MTMSRD
    printU1ImmOperand(MI, 1, STI, O);
    break;
  case 7:
    // CRSET, CRUNSET, MTDCR, TLBIE, V_SET0, V_SET0B, V_SET0H, XXLEQVOnes, XX...
    printOperand(MI, 0, STI, O);
    break;
  case 8:
    // DARN, MFFSCRNI
    printU2ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, PMXVBF16GE...
    printOperand(MI, 2, STI, O);
    O << ", ";
    break;
  case 10:
    // EVSPLATFI, EVSPLATI, VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 11:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 12:
    // LA
    printS16ImmOperand(MI, 2, STI, O);
    O << '(';
    printOperand(MI, 1, STI, O);
    O << ')';
    return;
    break;
  case 13:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, STI, O);
    return;
    break;
  case 14:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, STI, O);
    return;
    break;
  case 15:
    // MFBHRBE
    printU10ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 16:
    // MFFSCDRNI
    printU3ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 17:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, STI, O);
    return;
    break;
  case 18:
    // MFSR
    printU4ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 19:
    // MTVSRBMI
    printU16ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 20:
    // PADDI8pc, PADDIpc
    printImmZeroOperand(MI, 1, STI, O);
    O << ", ";
    printS34ImmOperand(MI, 2, STI, O);
    O << ", 1";
    return;
    break;
  case 21:
    // PLBZ, PLBZ8, PLD, PLFD, PLFS, PLHA, PLHA8, PLHZ, PLHZ8, PLWA, PLWA8, P...
    printMemRegImm34(MI, 1, STI, O);
    O << ", 0";
    return;
    break;
  case 22:
    // PLBZ8pc, PLBZpc, PLDpc, PLFDpc, PLFSpc, PLHA8pc, PLHApc, PLHZ8pc, PLHZ...
    printMemRegImm34PCRel(MI, 1, STI, O);
    O << ", 1";
    return;
    break;
  case 23:
    // PLI, PLI8
    printS34ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 24:
    // VINSD, VINSERTB, VINSERTH, VINSW
    printOperand(MI, 3, STI, O);
    O << ", ";
    printU4ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 25:
    // XXSPLTI32DX
    printU1ImmOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 26:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, STI, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 30) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BUILD_UACC, CP_COPY_FIRST, CP_COPYx, CP_PASTE_LAST, CP_PASTEx, DCBTCT,...
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, CLRRDI, CLRRDI_rec, CL...
    O << ", ";
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, STI, O);
    O << ' ';
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, STI, O);
    return;
    break;
  case 4:
    // EVSEL
    O << ',';
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 5:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 6:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printOperand(MI, 3, STI, O);
    break;
  case 7:
    // RLDIMI, RLDIMI_rec
    printU6ImmOperand(MI, 3, STI, O);
    O << ", ";
    printU6ImmOperand(MI, 4, STI, O);
    return;
    break;
  case 8:
    // RLWIMI, RLWIMI8, RLWIMI8_rec, RLWIMI_rec
    printU5ImmOperand(MI, 3, STI, O);
    O << ", ";
    printU5ImmOperand(MI, 4, STI, O);
    O << ", ";
    printU5ImmOperand(MI, 5, STI, O);
    return;
    break;
  case 9:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 10:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 11:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTD, VINSERTW
    printU4ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 12:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, STI, O);
    return;
    break;
  case 13:
    // XXINSERTW
    printU4ImmOperand(MI, 3, STI, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 34) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDI_rec, CLRRDI, CLRRDI_rec, EXTLDI, EXTLDI_rec, EXTRDI...
    printU6ImmOperand(MI, 2, STI, O);
    break;
  case 1:
    // CLRLSLWI, CLRLSLWI_rec, CLRRWI, CLRRWI_rec, EXTLWI, EXTLWI_rec, EXTRWI...
    printU5ImmOperand(MI, 2, STI, O);
    break;
  case 2:
    // SUBI, SUBIC, SUBIC_rec, SUBIS, ADDI, ADDI8, ADDIC, ADDIC8, ADDIC_rec, ...
    printS16ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 3:
    // ADD4, ADD4O, ADD4O_rec, ADD4TLS, ADD4_rec, ADD8, ADD8O, ADD8O_rec, ADD...
    printOperand(MI, 2, STI, O);
    break;
  case 4:
    // ANDI8_rec, ANDIS8_rec, ANDIS_rec, ANDI_rec, CMPLDI, CMPLWI, ORI, ORI8,...
    printU16ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 5:
    // BCDCFN_rec, BCDCFSQ_rec, BCDCFZ_rec, BCDCTZ_rec, BCDSETSGN_rec, CP_COP...
    printU1ImmOperand(MI, 2, STI, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLEQVOnes, XXLXORdpz, XXLXO...
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs, XXSLDWIs
    printOperand(MI, 1, STI, O);
    break;
  case 8:
    // PADDI, PADDI8
    printS34ImmOperand(MI, 2, STI, O);
    O << ", 0";
    return;
    break;
  case 9:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    O << ", ";
    printU4ImmOperand(MI, 4, STI, O);
    O << ", ";
    break;
  case 10:
    // VGNB
    printU3ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 11:
    // VINSBLX, VINSBRX, VINSBVLX, VINSBVRX, VINSDLX, VINSDRX, VINSHLX, VINSH...
    return;
    break;
  case 12:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 13:
    // XXGENPCVBM, XXGENPCVDM, XXGENPCVHM, XXGENPCVWM
    printS5ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 14:
    // XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, STI, O);
    return;
    break;
  case 15:
    // gBC, gBCL
    printBranchOperand(MI, Address, 2, STI, O);
    return;
    break;
  case 16:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 39) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDI_rec, CLRLSLWI, CLRLSLWI_rec, EXTLDI, EXTLDI_rec, EX...
    O << ", ";
    break;
  case 1:
    // CLRRDI, CLRRDI_rec, CLRRWI, CLRRWI_rec, ROTRDI, ROTRDI_rec, ROTRWI, RO...
    return;
    break;
  case 2:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printU4ImmOperand(MI, 5, STI, O);
    break;
  case 3:
    // PMXVF64GERNN, PMXVF64GERNP, PMXVF64GERPN, PMXVF64GERPP
    printU2ImmOperand(MI, 5, STI, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDI_rec, EXTLDI, EXTLDI_rec, EXTRDI, EXTRDI_rec, INSRDI...
    printU6ImmOperand(MI, 3, STI, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWI_rec, EXTLWI, EXTLWI_rec, EXTRWI, EXTRWI_rec, INSLWI...
    printU5ImmOperand(MI, 3, STI, O);
    break;
  case 2:
    // RLWIMIbm, RLWIMIbm_rec, RLWINMbm, RLWINMbm_rec, RLWNMbm, RLWNMbm_rec, ...
    printOperand(MI, 3, STI, O);
    break;
  case 3:
    // BCDSR_rec, BCDS_rec, BCDTRUNC_rec
    printU1ImmOperand(MI, 3, STI, O);
    return;
    break;
  case 4:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVF64GER, PMXVI16GER2, PMXVI1...
    printU4ImmOperand(MI, 3, STI, O);
    break;
  case 5:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    O << ", ";
    break;
  case 6:
    // PMXVF32GERNN, PMXVF32GERNP, PMXVF32GERPN, PMXVF32GERPP
    return;
    break;
  case 7:
    // VSLDBI, VSRDBI
    printU3ImmOperand(MI, 3, STI, O);
    return;
    break;
  case 8:
    // XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, STI, O);
    return;
    break;
  case 9:
    // XXPERMDIs, XXSLDWIs
    printU2ImmOperand(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 7 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 45) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLWI, CLRLSLWI_rec, EXTLWI, EXTLWI_rec, EXTRWI, EXTRWI_rec, INSLWI...
    return;
    break;
  case 1:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVF64GER, PMXVI16GER2, PMXVI1...
    O << ", ";
    break;
  case 2:
    // PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN, PMXVBF16GER2PP, PMXVF1...
    printU2ImmOperand(MI, 6, STI, O);
    return;
    break;
  case 3:
    // PMXVI4GER8PP
    printU8ImmOperand(MI, 6, STI, O);
    return;
    break;
  case 4:
    // PMXVI8GER4PP, PMXVI8GER4SPP
    printU4ImmOperand(MI, 6, STI, O);
    return;
    break;
  }


  // Fragment 8 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 48) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PMXVBF16GER2, PMXVF16GER2, PMXVF32GER, PMXVI16GER2, PMXVI16GER2S, PMXV...
    printU4ImmOperand(MI, 4, STI, O);
    break;
  case 1:
    // PMXVF64GER
    printU2ImmOperand(MI, 4, STI, O);
    return;
    break;
  case 2:
    // RLWINM, RLWINM8, RLWINM8_rec, RLWINM_rec, RLWNM, RLWNM8, RLWNM8_rec, R...
    printU5ImmOperand(MI, 4, STI, O);
    return;
    break;
  case 3:
    // XXEVAL
    printU8ImmOperand(MI, 4, STI, O);
    return;
    break;
  case 4:
    // XXPERMX
    printU3ImmOperand(MI, 4, STI, O);
    return;
    break;
  }


  // Fragment 9 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 51) & 1) {
    // PMXVF32GER
    return;
  } else {
    // PMXVBF16GER2, PMXVF16GER2, PMXVI16GER2, PMXVI16GER2S, PMXVI4GER8, PMXV...
    O << ", ";
  }


  // Fragment 10 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 52) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PMXVBF16GER2, PMXVF16GER2, PMXVI16GER2, PMXVI16GER2S
    printU2ImmOperand(MI, 5, STI, O);
    return;
    break;
  case 1:
    // PMXVI4GER8
    printU8ImmOperand(MI, 5, STI, O);
    return;
    break;
  case 2:
    // PMXVI8GER4
    printU4ImmOperand(MI, 5, STI, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 360 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "**ROUNDING MODE**\0"
  /* 18 */ "**FRAME POINTER**\0"
  /* 36 */ "**BASE POINTER**\0"
  /* 53 */ "f10\0"
  /* 57 */ "vsp10\0"
  /* 63 */ "r10\0"
  /* 67 */ "vs10\0"
  /* 72 */ "v10\0"
  /* 76 */ "f20\0"
  /* 80 */ "vsp20\0"
  /* 86 */ "r20\0"
  /* 90 */ "vs20\0"
  /* 95 */ "v20\0"
  /* 99 */ "f30\0"
  /* 103 */ "vsp30\0"
  /* 109 */ "r30\0"
  /* 113 */ "vs30\0"
  /* 118 */ "v30\0"
  /* 122 */ "vsp40\0"
  /* 128 */ "vs40\0"
  /* 133 */ "vsp50\0"
  /* 139 */ "vs50\0"
  /* 144 */ "vsp60\0"
  /* 150 */ "vs60\0"
  /* 155 */ "acc0\0"
  /* 160 */ "f0\0"
  /* 163 */ "vsp0\0"
  /* 168 */ "cr0\0"
  /* 172 */ "vs0\0"
  /* 176 */ "v0\0"
  /* 179 */ "f11\0"
  /* 183 */ "r11\0"
  /* 187 */ "vs11\0"
  /* 192 */ "v11\0"
  /* 196 */ "f21\0"
  /* 200 */ "r21\0"
  /* 204 */ "vs21\0"
  /* 209 */ "v21\0"
  /* 213 */ "f31\0"
  /* 217 */ "r31\0"
  /* 221 */ "vs31\0"
  /* 226 */ "v31\0"
  /* 230 */ "vs41\0"
  /* 235 */ "vs51\0"
  /* 240 */ "vs61\0"
  /* 245 */ "acc1\0"
  /* 250 */ "f1\0"
  /* 253 */ "cr1\0"
  /* 257 */ "vs1\0"
  /* 261 */ "v1\0"
  /* 264 */ "f12\0"
  /* 268 */ "vsp12\0"
  /* 274 */ "r12\0"
  /* 278 */ "vs12\0"
  /* 283 */ "v12\0"
  /* 287 */ "f22\0"
  /* 291 */ "vsp22\0"
  /* 297 */ "r22\0"
  /* 301 */ "vs22\0"
  /* 306 */ "v22\0"
  /* 310 */ "vsp32\0"
  /* 316 */ "vs32\0"
  /* 321 */ "vsp42\0"
  /* 327 */ "vs42\0"
  /* 332 */ "vsp52\0"
  /* 338 */ "vs52\0"
  /* 343 */ "vsp62\0"
  /* 349 */ "vs62\0"
  /* 354 */ "acc2\0"
  /* 359 */ "f2\0"
  /* 362 */ "vsp2\0"
  /* 367 */ "cr2\0"
  /* 371 */ "vs2\0"
  /* 375 */ "v2\0"
  /* 378 */ "f13\0"
  /* 382 */ "r13\0"
  /* 386 */ "vs13\0"
  /* 391 */ "v13\0"
  /* 395 */ "f23\0"
  /* 399 */ "r23\0"
  /* 403 */ "vs23\0"
  /* 408 */ "v23\0"
  /* 412 */ "vs33\0"
  /* 417 */ "vs43\0"
  /* 422 */ "vs53\0"
  /* 427 */ "vs63\0"
  /* 432 */ "acc3\0"
  /* 437 */ "f3\0"
  /* 440 */ "cr3\0"
  /* 444 */ "vs3\0"
  /* 448 */ "v3\0"
  /* 451 */ "f14\0"
  /* 455 */ "vsp14\0"
  /* 461 */ "r14\0"
  /* 465 */ "vs14\0"
  /* 470 */ "v14\0"
  /* 474 */ "f24\0"
  /* 478 */ "vsp24\0"
  /* 484 */ "r24\0"
  /* 488 */ "vs24\0"
  /* 493 */ "v24\0"
  /* 497 */ "vsp34\0"
  /* 503 */ "vs34\0"
  /* 508 */ "vsp44\0"
  /* 514 */ "vs44\0"
  /* 519 */ "vsp54\0"
  /* 525 */ "vs54\0"
  /* 530 */ "acc4\0"
  /* 535 */ "f4\0"
  /* 538 */ "vsp4\0"
  /* 543 */ "cr4\0"
  /* 547 */ "vs4\0"
  /* 551 */ "v4\0"
  /* 554 */ "f15\0"
  /* 558 */ "r15\0"
  /* 562 */ "vs15\0"
  /* 567 */ "v15\0"
  /* 571 */ "f25\0"
  /* 575 */ "r25\0"
  /* 579 */ "vs25\0"
  /* 584 */ "v25\0"
  /* 588 */ "vs35\0"
  /* 593 */ "vs45\0"
  /* 598 */ "vs55\0"
  /* 603 */ "acc5\0"
  /* 608 */ "f5\0"
  /* 611 */ "cr5\0"
  /* 615 */ "vs5\0"
  /* 619 */ "v5\0"
  /* 622 */ "f16\0"
  /* 626 */ "vsp16\0"
  /* 632 */ "r16\0"
  /* 636 */ "vs16\0"
  /* 641 */ "v16\0"
  /* 645 */ "f26\0"
  /* 649 */ "vsp26\0"
  /* 655 */ "r26\0"
  /* 659 */ "vs26\0"
  /* 664 */ "v26\0"
  /* 668 */ "vsp36\0"
  /* 674 */ "vs36\0"
  /* 679 */ "vsp46\0"
  /* 685 */ "vs46\0"
  /* 690 */ "vsp56\0"
  /* 696 */ "vs56\0"
  /* 701 */ "acc6\0"
  /* 706 */ "f6\0"
  /* 709 */ "vsp6\0"
  /* 714 */ "cr6\0"
  /* 718 */ "vs6\0"
  /* 722 */ "v6\0"
  /* 725 */ "f17\0"
  /* 729 */ "r17\0"
  /* 733 */ "vs17\0"
  /* 738 */ "v17\0"
  /* 742 */ "f27\0"
  /* 746 */ "r27\0"
  /* 750 */ "vs27\0"
  /* 755 */ "v27\0"
  /* 759 */ "vs37\0"
  /* 764 */ "vs47\0"
  /* 769 */ "vs57\0"
  /* 774 */ "acc7\0"
  /* 779 */ "f7\0"
  /* 782 */ "cr7\0"
  /* 786 */ "vs7\0"
  /* 790 */ "v7\0"
  /* 793 */ "f18\0"
  /* 797 */ "vsp18\0"
  /* 803 */ "r18\0"
  /* 807 */ "vs18\0"
  /* 812 */ "v18\0"
  /* 816 */ "f28\0"
  /* 820 */ "vsp28\0"
  /* 826 */ "r28\0"
  /* 830 */ "vs28\0"
  /* 835 */ "v28\0"
  /* 839 */ "vsp38\0"
  /* 845 */ "vs38\0"
  /* 850 */ "vsp48\0"
  /* 856 */ "vs48\0"
  /* 861 */ "vsp58\0"
  /* 867 */ "vs58\0"
  /* 872 */ "f8\0"
  /* 875 */ "vsp8\0"
  /* 880 */ "r8\0"
  /* 883 */ "vs8\0"
  /* 887 */ "v8\0"
  /* 890 */ "f19\0"
  /* 894 */ "r19\0"
  /* 898 */ "vs19\0"
  /* 903 */ "v19\0"
  /* 907 */ "f29\0"
  /* 911 */ "r29\0"
  /* 915 */ "vs29\0"
  /* 920 */ "v29\0"
  /* 924 */ "vs39\0"
  /* 929 */ "vs49\0"
  /* 934 */ "vs59\0"
  /* 939 */ "f9\0"
  /* 942 */ "r9\0"
  /* 945 */ "vs9\0"
  /* 949 */ "v9\0"
  /* 952 */ "vrsave\0"
  /* 959 */ "spefscr\0"
  /* 967 */ "xer\0"
  /* 971 */ "lr\0"
  /* 974 */ "ctr\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t RegAsmOffset[] = {
    36, 967, 974, 18, 971, 0, 959, 952, 967, 55, 155, 245, 354, 432, 
    530, 603, 701, 774, 36, 168, 253, 367, 440, 543, 611, 714, 782, 974, 
    160, 250, 359, 437, 535, 608, 706, 779, 872, 939, 53, 179, 264, 378, 
    451, 554, 622, 725, 793, 890, 76, 196, 287, 395, 474, 571, 645, 742, 
    816, 907, 99, 213, 18, 971, 169, 254, 368, 441, 544, 612, 715, 783, 
    880, 942, 63, 183, 274, 382, 461, 558, 632, 729, 803, 894, 86, 200, 
    297, 399, 484, 575, 655, 746, 826, 911, 109, 217, 169, 254, 368, 441, 
    544, 612, 715, 783, 880, 942, 63, 183, 274, 382, 461, 558, 632, 729, 
    803, 894, 86, 200, 297, 399, 484, 575, 655, 746, 826, 911, 109, 217, 
    155, 245, 354, 432, 530, 603, 701, 774, 176, 261, 375, 448, 551, 619, 
    722, 790, 887, 949, 72, 192, 283, 391, 470, 567, 641, 738, 812, 903, 
    95, 209, 306, 408, 493, 584, 664, 755, 835, 920, 118, 226, 176, 261, 
    375, 448, 551, 619, 722, 790, 887, 949, 72, 192, 283, 391, 470, 567, 
    641, 738, 812, 903, 95, 209, 306, 408, 493, 584, 664, 755, 835, 920, 
    118, 226, 172, 257, 371, 444, 547, 615, 718, 786, 883, 945, 67, 187, 
    278, 386, 465, 562, 636, 733, 807, 898, 90, 204, 301, 403, 488, 579, 
    659, 750, 830, 915, 113, 221, 163, 362, 538, 709, 875, 57, 268, 455, 
    626, 797, 80, 291, 478, 649, 820, 103, 310, 497, 668, 839, 122, 321, 
    508, 679, 850, 133, 332, 519, 690, 861, 144, 343, 316, 412, 503, 588, 
    674, 759, 845, 924, 128, 230, 327, 417, 514, 593, 685, 764, 856, 929, 
    139, 235, 338, 422, 525, 598, 696, 769, 867, 934, 150, 240, 349, 427, 
    169, 254, 368, 441, 544, 612, 715, 783, 880, 942, 63, 183, 274, 382, 
    461, 558, 632, 729, 803, 894, 86, 200, 297, 399, 484, 575, 655, 746, 
    826, 911, 109, 217, 55, 266, 624, 54, 452, 794, 288, 646, 100, 181, 
    556, 892, 379, 726, 197, 572, 908, 55, 453, 795, 265, 623, 77, 475, 
    817, 380, 727, 180, 555, 891, 396, 743, 214, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {PPC::ADDI, 0, 1 },
    {PPC::ADDI8, 1, 1 },
    {PPC::ADDIS, 2, 1 },
    {PPC::ADDIS8, 3, 1 },
    {PPC::ADDPCIS, 4, 1 },
    {PPC::BCC, 5, 24 },
    {PPC::BCCA, 29, 24 },
    {PPC::BCCCTR, 53, 24 },
    {PPC::BCCCTRL, 77, 24 },
    {PPC::BCCL, 101, 24 },
    {PPC::BCCLA, 125, 24 },
    {PPC::BCCLR, 149, 24 },
    {PPC::BCCLRL, 173, 24 },
    {PPC::CMPD, 197, 1 },
    {PPC::CMPDI, 198, 1 },
    {PPC::CMPLD, 199, 1 },
    {PPC::CMPLDI, 200, 1 },
    {PPC::CMPLW, 201, 1 },
    {PPC::CMPLWI, 202, 1 },
    {PPC::CMPW, 203, 1 },
    {PPC::CMPWI, 204, 1 },
    {PPC::CNTLZW, 205, 1 },
    {PPC::CNTLZW8, 206, 1 },
    {PPC::CNTLZW8_rec, 207, 1 },
    {PPC::CNTLZW_rec, 208, 1 },
    {PPC::CREQV, 209, 1 },
    {PPC::CRNOR, 210, 1 },
    {PPC::CROR, 211, 1 },
    {PPC::CRXOR, 212, 1 },
    {PPC::ISEL, 213, 3 },
    {PPC::ISEL8, 216, 3 },
    {PPC::MBAR, 219, 1 },
    {PPC::MFDCR, 220, 8 },
    {PPC::MFSPR, 228, 46 },
    {PPC::MFSPR8, 274, 19 },
    {PPC::MFTB, 293, 1 },
    {PPC::MFVRSAVE, 294, 1 },
    {PPC::MFVSRD, 295, 1 },
    {PPC::MFVSRWZ, 296, 1 },
    {PPC::MTCRF, 297, 1 },
    {PPC::MTCRF8, 298, 1 },
    {PPC::MTDCR, 299, 8 },
    {PPC::MTFSF, 307, 1 },
    {PPC::MTFSFI, 308, 1 },
    {PPC::MTFSFI_rec, 309, 1 },
    {PPC::MTFSF_rec, 310, 1 },
    {PPC::MTMSR, 311, 1 },
    {PPC::MTMSRD, 312, 1 },
    {PPC::MTSPR, 313, 45 },
    {PPC::MTSPR8, 358, 18 },
    {PPC::MTVRSAVE, 376, 1 },
    {PPC::MTVSRD, 377, 1 },
    {PPC::MTVSRWA, 378, 1 },
    {PPC::MTVSRWZ, 379, 1 },
    {PPC::NOR, 380, 1 },
    {PPC::NOR8, 381, 1 },
    {PPC::NOR8_rec, 382, 1 },
    {PPC::NOR_rec, 383, 1 },
    {PPC::OR, 384, 1 },
    {PPC::OR8, 385, 1 },
    {PPC::OR8_rec, 386, 1 },
    {PPC::ORI, 387, 1 },
    {PPC::ORI8, 388, 1 },
    {PPC::OR_rec, 389, 1 },
    {PPC::RFEBB, 390, 1 },
    {PPC::RLDCL, 391, 1 },
    {PPC::RLDCL_rec, 392, 1 },
    {PPC::RLDICL, 393, 2 },
    {PPC::RLDICL_32_64, 395, 2 },
    {PPC::RLDICL_rec, 397, 2 },
    {PPC::RLWINM, 399, 2 },
    {PPC::RLWINM8, 401, 2 },
    {PPC::RLWINM8_rec, 403, 2 },
    {PPC::RLWINM_rec, 405, 2 },
    {PPC::RLWNM, 407, 1 },
    {PPC::RLWNM8, 408, 1 },
    {PPC::RLWNM8_rec, 409, 1 },
    {PPC::RLWNM_rec, 410, 1 },
    {PPC::SC, 411, 1 },
    {PPC::SUBF, 412, 1 },
    {PPC::SUBF8, 413, 1 },
    {PPC::SUBF8_rec, 414, 1 },
    {PPC::SUBFC, 415, 1 },
    {PPC::SUBFC8, 416, 1 },
    {PPC::SUBFC8_rec, 417, 1 },
    {PPC::SUBFC_rec, 418, 1 },
    {PPC::SUBF_rec, 419, 1 },
    {PPC::SYNC, 420, 3 },
    {PPC::TD, 423, 7 },
    {PPC::TDI, 430, 7 },
    {PPC::TEND, 437, 2 },
    {PPC::TLBIE, 439, 1 },
    {PPC::TLBRE2, 440, 2 },
    {PPC::TLBWE2, 442, 2 },
    {PPC::TSR, 444, 2 },
    {PPC::TW, 446, 8 },
    {PPC::TWI, 454, 7 },
    {PPC::VNOR, 461, 1 },
    {PPC::VOR, 462, 1 },
    {PPC::WAIT, 463, 3 },
    {PPC::XORI, 466, 1 },
    {PPC::XORI8, 467, 1 },
    {PPC::XVCPSGNDP, 468, 1 },
    {PPC::XVCPSGNSP, 469, 1 },
    {PPC::XXPERMDI, 470, 5 },
    {PPC::XXPERMDIs, 475, 3 },
    {PPC::gBC, 478, 10 },
    {PPC::gBCA, 488, 10 },
    {PPC::gBCAat, 498, 2 },
    {PPC::gBCCTR, 500, 7 },
    {PPC::gBCCTRL, 507, 7 },
    {PPC::gBCL, 514, 10 },
    {PPC::gBCLA, 524, 10 },
    {PPC::gBCLAat, 534, 2 },
    {PPC::gBCLR, 536, 11 },
    {PPC::gBCLRL, 547, 11 },
    {PPC::gBCLat, 558, 2 },
    {PPC::gBCat, 560, 2 },
  };

  static const AliasPattern Patterns[] = {
    // PPC::ADDI - 0
    {0, 0, 3, 2 },
    // PPC::ADDI8 - 1
    {0, 2, 3, 2 },
    // PPC::ADDIS - 2
    {12, 4, 3, 2 },
    // PPC::ADDIS8 - 3
    {12, 6, 3, 2 },
    // PPC::ADDPCIS - 4
    {25, 8, 2, 2 },
    // PPC::BCC - 5
    {33, 10, 3, 2 },
    {46, 12, 3, 2 },
    {55, 14, 3, 2 },
    {69, 16, 3, 2 },
    {79, 18, 3, 2 },
    {93, 20, 3, 2 },
    {103, 22, 3, 2 },
    {116, 24, 3, 2 },
    {125, 26, 3, 2 },
    {139, 28, 3, 2 },
    {149, 30, 3, 2 },
    {163, 32, 3, 2 },
    {173, 34, 3, 2 },
    {186, 36, 3, 2 },
    {195, 38, 3, 2 },
    {209, 40, 3, 2 },
    {219, 42, 3, 2 },
    {233, 44, 3, 2 },
    {243, 46, 3, 2 },
    {256, 48, 3, 2 },
    {265, 50, 3, 2 },
    {279, 52, 3, 2 },
    {289, 54, 3, 2 },
    {303, 56, 3, 2 },
    // PPC::BCCA - 29
    {313, 58, 3, 2 },
    {327, 60, 3, 2 },
    {337, 62, 3, 2 },
    {352, 64, 3, 2 },
    {363, 66, 3, 2 },
    {378, 68, 3, 2 },
    {389, 70, 3, 2 },
    {403, 72, 3, 2 },
    {413, 74, 3, 2 },
    {428, 76, 3, 2 },
    {439, 78, 3, 2 },
    {454, 80, 3, 2 },
    {465, 82, 3, 2 },
    {479, 84, 3, 2 },
    {489, 86, 3, 2 },
    {504, 88, 3, 2 },
    {515, 90, 3, 2 },
    {530, 92, 3, 2 },
    {541, 94, 3, 2 },
    {555, 96, 3, 2 },
    {565, 98, 3, 2 },
    {580, 100, 3, 2 },
    {591, 102, 3, 2 },
    {606, 104, 3, 2 },
    // PPC::BCCCTR - 53
    {617, 106, 2, 2 },
    {627, 108, 2, 2 },
    {634, 110, 2, 2 },
    {645, 112, 2, 2 },
    {653, 114, 2, 2 },
    {664, 116, 2, 2 },
    {672, 118, 2, 2 },
    {682, 120, 2, 2 },
    {689, 122, 2, 2 },
    {700, 124, 2, 2 },
    {708, 126, 2, 2 },
    {719, 128, 2, 2 },
    {727, 130, 2, 2 },
    {737, 132, 2, 2 },
    {744, 134, 2, 2 },
    {755, 136, 2, 2 },
    {763, 138, 2, 2 },
    {774, 140, 2, 2 },
    {782, 142, 2, 2 },
    {792, 144, 2, 2 },
    {799, 146, 2, 2 },
    {810, 148, 2, 2 },
    {818, 150, 2, 2 },
    {829, 152, 2, 2 },
    // PPC::BCCCTRL - 77
    {837, 154, 2, 2 },
    {848, 156, 2, 2 },
    {856, 158, 2, 2 },
    {868, 160, 2, 2 },
    {877, 162, 2, 2 },
    {889, 164, 2, 2 },
    {898, 166, 2, 2 },
    {909, 168, 2, 2 },
    {917, 170, 2, 2 },
    {929, 172, 2, 2 },
    {938, 174, 2, 2 },
    {950, 176, 2, 2 },
    {959, 178, 2, 2 },
    {970, 180, 2, 2 },
    {978, 182, 2, 2 },
    {990, 184, 2, 2 },
    {999, 186, 2, 2 },
    {1011, 188, 2, 2 },
    {1020, 190, 2, 2 },
    {1031, 192, 2, 2 },
    {1039, 194, 2, 2 },
    {1051, 196, 2, 2 },
    {1060, 198, 2, 2 },
    {1072, 200, 2, 2 },
    // PPC::BCCL - 101
    {1081, 202, 3, 2 },
    {1095, 204, 3, 2 },
    {1105, 206, 3, 2 },
    {1120, 208, 3, 2 },
    {1131, 210, 3, 2 },
    {1146, 212, 3, 2 },
    {1157, 214, 3, 2 },
    {1171, 216, 3, 2 },
    {1181, 218, 3, 2 },
    {1196, 220, 3, 2 },
    {1207, 222, 3, 2 },
    {1222, 224, 3, 2 },
    {1233, 226, 3, 2 },
    {1247, 228, 3, 2 },
    {1257, 230, 3, 2 },
    {1272, 232, 3, 2 },
    {1283, 234, 3, 2 },
    {1298, 236, 3, 2 },
    {1309, 238, 3, 2 },
    {1323, 240, 3, 2 },
    {1333, 242, 3, 2 },
    {1348, 244, 3, 2 },
    {1359, 246, 3, 2 },
    {1374, 248, 3, 2 },
    // PPC::BCCLA - 125
    {1385, 250, 3, 2 },
    {1400, 252, 3, 2 },
    {1411, 254, 3, 2 },
    {1427, 256, 3, 2 },
    {1439, 258, 3, 2 },
    {1455, 260, 3, 2 },
    {1467, 262, 3, 2 },
    {1482, 264, 3, 2 },
    {1493, 266, 3, 2 },
    {1509, 268, 3, 2 },
    {1521, 270, 3, 2 },
    {1537, 272, 3, 2 },
    {1549, 274, 3, 2 },
    {1564, 276, 3, 2 },
    {1575, 278, 3, 2 },
    {1591, 280, 3, 2 },
    {1603, 282, 3, 2 },
    {1619, 284, 3, 2 },
    {1631, 286, 3, 2 },
    {1646, 288, 3, 2 },
    {1657, 290, 3, 2 },
    {1673, 292, 3, 2 },
    {1685, 294, 3, 2 },
    {1701, 296, 3, 2 },
    // PPC::BCCLR - 149
    {1713, 298, 2, 2 },
    {1722, 300, 2, 2 },
    {1728, 302, 2, 2 },
    {1738, 304, 2, 2 },
    {1745, 306, 2, 2 },
    {1755, 308, 2, 2 },
    {1762, 310, 2, 2 },
    {1771, 312, 2, 2 },
    {1777, 314, 2, 2 },
    {1787, 316, 2, 2 },
    {1794, 318, 2, 2 },
    {1804, 320, 2, 2 },
    {1811, 322, 2, 2 },
    {1820, 324, 2, 2 },
    {1826, 326, 2, 2 },
    {1836, 328, 2, 2 },
    {1843, 330, 2, 2 },
    {1853, 332, 2, 2 },
    {1860, 334, 2, 2 },
    {1869, 336, 2, 2 },
    {1875, 338, 2, 2 },
    {1885, 340, 2, 2 },
    {1892, 342, 2, 2 },
    {1902, 344, 2, 2 },
    // PPC::BCCLRL - 173
    {1909, 346, 2, 2 },
    {1919, 348, 2, 2 },
    {1926, 350, 2, 2 },
    {1937, 352, 2, 2 },
    {1945, 354, 2, 2 },
    {1956, 356, 2, 2 },
    {1964, 358, 2, 2 },
    {1974, 360, 2, 2 },
    {1981, 362, 2, 2 },
    {1992, 364, 2, 2 },
    {2000, 366, 2, 2 },
    {2011, 368, 2, 2 },
    {2019, 370, 2, 2 },
    {2029, 372, 2, 2 },
    {2036, 374, 2, 2 },
    {2047, 376, 2, 2 },
    {2055, 378, 2, 2 },
    {2066, 380, 2, 2 },
    {2074, 382, 2, 2 },
    {2084, 384, 2, 2 },
    {2091, 386, 2, 2 },
    {2102, 388, 2, 2 },
    {2110, 390, 2, 2 },
    {2121, 392, 2, 2 },
    // PPC::CMPD - 197
    {2129, 394, 3, 3 },
    // PPC::CMPDI - 198
    {2141, 397, 3, 2 },
    // PPC::CMPLD - 199
    {2156, 399, 3, 3 },
    // PPC::CMPLDI - 200
    {2169, 402, 3, 2 },
    // PPC::CMPLW - 201
    {2185, 404, 3, 3 },
    // PPC::CMPLWI - 202
    {2198, 407, 3, 2 },
    // PPC::CMPW - 203
    {2214, 409, 3, 3 },
    // PPC::CMPWI - 204
    {2226, 412, 3, 2 },
    // PPC::CNTLZW - 205
    {2241, 414, 2, 2 },
    // PPC::CNTLZW8 - 206
    {2241, 416, 2, 2 },
    // PPC::CNTLZW8_rec - 207
    {2255, 418, 2, 2 },
    // PPC::CNTLZW_rec - 208
    {2255, 420, 2, 2 },
    // PPC::CREQV - 209
    {2270, 422, 3, 3 },
    // PPC::CRNOR - 210
    {2279, 425, 3, 3 },
    // PPC::CROR - 211
    {2292, 428, 3, 3 },
    // PPC::CRXOR - 212
    {2306, 431, 3, 3 },
    // PPC::ISEL - 213
    {2315, 434, 4, 4 },
    {2333, 438, 4, 4 },
    {2351, 442, 4, 4 },
    // PPC::ISEL8 - 216
    {2315, 446, 4, 4 },
    {2333, 450, 4, 4 },
    {2351, 454, 4, 4 },
    // PPC::MBAR - 219
    {2369, 458, 1, 1 },
    // PPC::MFDCR - 220
    {2374, 459, 2, 2 },
    {2383, 461, 2, 2 },
    {2392, 463, 2, 2 },
    {2401, 465, 2, 2 },
    {2410, 467, 2, 2 },
    {2419, 469, 2, 2 },
    {2428, 471, 2, 2 },
    {2437, 473, 2, 2 },
    // PPC::MFSPR - 228
    {2446, 475, 2, 2 },
    {2455, 477, 2, 5 },
    {2466, 482, 2, 2 },
    {2476, 484, 2, 2 },
    {2486, 486, 2, 2 },
    {2494, 488, 2, 2 },
    {2503, 490, 2, 2 },
    {2513, 492, 2, 2 },
    {2523, 494, 2, 2 },
    {2534, 496, 2, 2 },
    {2543, 498, 2, 2 },
    {2552, 500, 2, 2 },
    {2562, 502, 2, 2 },
    {2572, 504, 2, 2 },
    {2582, 506, 2, 2 },
    {2592, 508, 2, 2 },
    {2601, 510, 2, 2 },
    {2610, 512, 2, 2 },
    {2619, 514, 2, 2 },
    {2628, 516, 2, 2 },
    {2641, 518, 2, 2 },
    {2655, 520, 2, 2 },
    {2669, 522, 2, 2 },
    {2683, 524, 2, 2 },
    {2697, 526, 2, 2 },
    {2711, 528, 2, 2 },
    {2725, 530, 2, 2 },
    {2739, 532, 2, 2 },
    {2753, 534, 2, 2 },
    {2767, 536, 2, 2 },
    {2781, 538, 2, 2 },
    {2795, 540, 2, 2 },
    {2809, 542, 2, 2 },
    {2823, 544, 2, 2 },
    {2837, 546, 2, 2 },
    {2851, 548, 2, 2 },
    {2865, 550, 2, 2 },
    {2874, 552, 2, 2 },
    {2883, 554, 2, 2 },
    {2893, 556, 2, 2 },
    {2902, 558, 2, 2 },
    {2912, 560, 2, 2 },
    {2922, 562, 2, 2 },
    {2932, 564, 2, 2 },
    {2942, 566, 2, 2 },
    {2952, 568, 2, 2 },
    // PPC::MFSPR8 - 274
    {2446, 570, 2, 2 },
    {2455, 572, 2, 5 },
    {2466, 577, 2, 2 },
    {2476, 579, 2, 2 },
    {2486, 581, 2, 2 },
    {2494, 583, 2, 2 },
    {2503, 585, 2, 2 },
    {2513, 587, 2, 2 },
    {2523, 589, 2, 2 },
    {2534, 591, 2, 2 },
    {2543, 593, 2, 2 },
    {2552, 595, 2, 2 },
    {2562, 597, 2, 2 },
    {2572, 599, 2, 2 },
    {2582, 601, 2, 2 },
    {2592, 603, 2, 2 },
    {2610, 605, 2, 2 },
    {2619, 607, 2, 2 },
    {2628, 609, 2, 2 },
    // PPC::MFTB - 293
    {2962, 611, 2, 2 },
    // PPC::MFVRSAVE - 294
    {2971, 613, 1, 1 },
    // PPC::MFVSRD - 295
    {2983, 614, 2, 2 },
    // PPC::MFVSRWZ - 296
    {2997, 616, 2, 2 },
    // PPC::MTCRF - 297
    {3012, 618, 2, 2 },
    // PPC::MTCRF8 - 298
    {3012, 620, 2, 2 },
    // PPC::MTDCR - 299
    {3020, 622, 2, 2 },
    {3029, 624, 2, 2 },
    {3038, 626, 2, 2 },
    {3047, 628, 2, 2 },
    {3056, 630, 2, 2 },
    {3065, 632, 2, 2 },
    {3074, 634, 2, 2 },
    {3083, 636, 2, 2 },
    // PPC::MTFSF - 307
    {3092, 638, 4, 4 },
    // PPC::MTFSFI - 308
    {3105, 642, 3, 3 },
    // PPC::MTFSFI_rec - 309
    {3119, 645, 3, 3 },
    // PPC::MTFSF_rec - 310
    {3134, 648, 4, 4 },
    // PPC::MTMSR - 311
    {3148, 652, 2, 2 },
    // PPC::MTMSRD - 312
    {3157, 654, 2, 2 },
    // PPC::MTSPR - 313
    {3167, 656, 2, 2 },
    {3176, 658, 2, 5 },
    {3187, 663, 2, 2 },
    {3195, 665, 2, 2 },
    {3204, 667, 2, 2 },
    {3214, 669, 2, 2 },
    {3224, 671, 2, 2 },
    {3235, 673, 2, 2 },
    {3244, 675, 2, 2 },
    {3253, 677, 2, 2 },
    {3263, 679, 2, 2 },
    {3273, 681, 2, 2 },
    {3283, 683, 2, 2 },
    {3293, 685, 2, 2 },
    {3302, 687, 2, 2 },
    {3311, 689, 2, 2 },
    {3320, 691, 2, 2 },
    {3329, 693, 2, 2 },
    {3338, 695, 2, 2 },
    {3351, 697, 2, 2 },
    {3365, 699, 2, 2 },
    {3379, 701, 2, 2 },
    {3393, 703, 2, 2 },
    {3407, 705, 2, 2 },
    {3421, 707, 2, 2 },
    {3435, 709, 2, 2 },
    {3449, 711, 2, 2 },
    {3463, 713, 2, 2 },
    {3477, 715, 2, 2 },
    {3491, 717, 2, 2 },
    {3505, 719, 2, 2 },
    {3519, 721, 2, 2 },
    {3533, 723, 2, 2 },
    {3547, 725, 2, 2 },
    {3561, 727, 2, 2 },
    {3575, 729, 2, 2 },
    {3584, 731, 2, 2 },
    {3593, 733, 2, 2 },
    {3603, 735, 2, 2 },
    {3612, 737, 2, 2 },
    {3622, 739, 2, 2 },
    {3632, 741, 2, 2 },
    {3642, 743, 2, 2 },
    {3652, 745, 2, 2 },
    {3662, 747, 2, 2 },
    // PPC::MTSPR8 - 358
    {3167, 749, 2, 2 },
    {3176, 751, 2, 5 },
    {3187, 756, 2, 2 },
    {3195, 758, 2, 2 },
    {3204, 760, 2, 2 },
    {3214, 762, 2, 2 },
    {3224, 764, 2, 2 },
    {3235, 766, 2, 2 },
    {3244, 768, 2, 2 },
    {3253, 770, 2, 2 },
    {3263, 772, 2, 2 },
    {3273, 774, 2, 2 },
    {3283, 776, 2, 2 },
    {3293, 778, 2, 2 },
    {3311, 780, 2, 2 },
    {3320, 782, 2, 2 },
    {3329, 784, 2, 2 },
    {3338, 786, 2, 2 },
    // PPC::MTVRSAVE - 376
    {3672, 788, 1, 1 },
    // PPC::MTVSRD - 377
    {3684, 789, 2, 2 },
    // PPC::MTVSRWA - 378
    {3698, 791, 2, 2 },
    // PPC::MTVSRWZ - 379
    {3713, 793, 2, 2 },
    // PPC::NOR - 380
    {3728, 795, 3, 3 },
    // PPC::NOR8 - 381
    {3728, 798, 3, 3 },
    // PPC::NOR8_rec - 382
    {3739, 801, 3, 3 },
    // PPC::NOR_rec - 383
    {3739, 804, 3, 3 },
    // PPC::OR - 384
    {3751, 807, 3, 3 },
    // PPC::OR8 - 385
    {3751, 810, 3, 3 },
    // PPC::OR8_rec - 386
    {3761, 813, 3, 3 },
    // PPC::ORI - 387
    {3772, 816, 3, 3 },
    // PPC::ORI8 - 388
    {3772, 819, 3, 3 },
    // PPC::OR_rec - 389
    {3761, 822, 3, 3 },
    // PPC::RFEBB - 390
    {3776, 825, 1, 1 },
    // PPC::RLDCL - 391
    {3782, 826, 4, 4 },
    // PPC::RLDCL_rec - 392
    {3799, 830, 4, 4 },
    // PPC::RLDICL - 393
    {3817, 834, 4, 4 },
    {3837, 838, 4, 3 },
    // PPC::RLDICL_32_64 - 395
    {3817, 841, 4, 4 },
    {3837, 845, 4, 3 },
    // PPC::RLDICL_rec - 397
    {3857, 848, 4, 4 },
    {3878, 852, 4, 3 },
    // PPC::RLWINM - 399
    {3899, 855, 5, 5 },
    {3919, 860, 5, 5 },
    // PPC::RLWINM8 - 401
    {3899, 865, 5, 5 },
    {3919, 870, 5, 5 },
    // PPC::RLWINM8_rec - 403
    {3939, 875, 5, 5 },
    {3960, 880, 5, 5 },
    // PPC::RLWINM_rec - 405
    {3939, 885, 5, 5 },
    {3960, 890, 5, 5 },
    // PPC::RLWNM - 407
    {3981, 895, 5, 5 },
    // PPC::RLWNM8 - 408
    {3981, 900, 5, 5 },
    // PPC::RLWNM8_rec - 409
    {3998, 905, 5, 5 },
    // PPC::RLWNM_rec - 410
    {3998, 910, 5, 5 },
    // PPC::SC - 411
    {4016, 915, 1, 1 },
    // PPC::SUBF - 412
    {4019, 916, 3, 3 },
    // PPC::SUBF8 - 413
    {4019, 919, 3, 3 },
    // PPC::SUBF8_rec - 414
    {4034, 922, 3, 3 },
    // PPC::SUBFC - 415
    {4050, 925, 3, 3 },
    // PPC::SUBFC8 - 416
    {4050, 928, 3, 3 },
    // PPC::SUBFC8_rec - 417
    {4066, 931, 3, 3 },
    // PPC::SUBFC_rec - 418
    {4066, 934, 3, 3 },
    // PPC::SUBF_rec - 419
    {4034, 937, 3, 3 },
    // PPC::SYNC - 420
    {4083, 940, 1, 1 },
    {4088, 941, 1, 1 },
    {4095, 942, 1, 1 },
    // PPC::TD - 423
    {4103, 943, 3, 3 },
    {4115, 946, 3, 3 },
    {4127, 949, 3, 3 },
    {4139, 952, 3, 3 },
    {4151, 955, 3, 3 },
    {4164, 958, 3, 3 },
    {4177, 961, 3, 3 },
    // PPC::TDI - 430
    {4188, 964, 3, 2 },
    {4203, 966, 3, 2 },
    {4218, 968, 3, 2 },
    {4233, 970, 3, 2 },
    {4248, 972, 3, 2 },
    {4264, 974, 3, 2 },
    {4280, 976, 3, 2 },
    // PPC::TEND - 437
    {4294, 978, 1, 1 },
    {4300, 979, 1, 1 },
    // PPC::TLBIE - 439
    {4309, 980, 2, 2 },
    // PPC::TLBRE2 - 440
    {4318, 982, 3, 3 },
    {4333, 985, 3, 3 },
    // PPC::TLBWE2 - 442
    {4348, 988, 3, 3 },
    {4363, 991, 3, 3 },
    // PPC::TSR - 444
    {4378, 994, 1, 1 },
    {4388, 995, 1, 1 },
    // PPC::TW - 446
    {4397, 996, 3, 3 },
    {4402, 999, 3, 3 },
    {4414, 1002, 3, 3 },
    {4426, 1005, 3, 3 },
    {4438, 1008, 3, 3 },
    {4450, 1011, 3, 3 },
    {4463, 1014, 3, 3 },
    {4476, 1017, 3, 3 },
    // PPC::TWI - 454
    {4487, 1020, 3, 2 },
    {4502, 1022, 3, 2 },
    {4517, 1024, 3, 2 },
    {4532, 1026, 3, 2 },
    {4547, 1028, 3, 2 },
    {4563, 1030, 3, 2 },
    {4579, 1032, 3, 2 },
    // PPC::VNOR - 461
    {4593, 1034, 3, 3 },
    // PPC::VOR - 462
    {4605, 1037, 3, 3 },
    // PPC::WAIT - 463
    {4616, 1040, 1, 1 },
    {4621, 1041, 1, 1 },
    {4629, 1042, 1, 1 },
    // PPC::XORI - 466
    {4638, 1043, 3, 3 },
    // PPC::XORI8 - 467
    {4638, 1046, 3, 3 },
    // PPC::XVCPSGNDP - 468
    {4643, 1049, 3, 3 },
    // PPC::XVCPSGNSP - 469
    {4658, 1052, 3, 3 },
    // PPC::XXPERMDI - 470
    {4673, 1055, 4, 7 },
    {4691, 1062, 4, 7 },
    {4709, 1069, 4, 4 },
    {4728, 1073, 4, 4 },
    {4747, 1077, 4, 4 },
    // PPC::XXPERMDIs - 475
    {4673, 1081, 3, 6 },
    {4691, 1087, 3, 6 },
    {4747, 1093, 3, 3 },
    // PPC::gBC - 478
    {4762, 1096, 3, 2 },
    {4774, 1098, 3, 2 },
    {4786, 1100, 3, 2 },
    {4799, 1102, 3, 2 },
    {4812, 1104, 3, 2 },
    {4825, 1106, 3, 2 },
    {4838, 1108, 3, 2 },
    {4853, 1110, 3, 2 },
    {4868, 1112, 3, 2 },
    {4882, 1114, 3, 2 },
    // PPC::gBCA - 488
    {4896, 1116, 3, 2 },
    {4909, 1118, 3, 2 },
    {4922, 1120, 3, 2 },
    {4936, 1122, 3, 2 },
    {4950, 1124, 3, 2 },
    {4964, 1126, 3, 2 },
    {4978, 1128, 3, 2 },
    {4994, 1130, 3, 2 },
    {5010, 1132, 3, 2 },
    {5025, 1134, 3, 2 },
    // PPC::gBCAat - 498
    {5040, 1136, 4, 3 },
    {5060, 1139, 4, 3 },
    // PPC::gBCCTR - 500
    {5080, 1142, 3, 3 },
    {5095, 1145, 3, 3 },
    {5104, 1148, 3, 3 },
    {5113, 1151, 3, 3 },
    {5123, 1154, 3, 3 },
    {5133, 1157, 3, 3 },
    {5143, 1160, 3, 3 },
    // PPC::gBCCTRL - 507
    {5153, 1163, 3, 3 },
    {5169, 1166, 3, 3 },
    {5179, 1169, 3, 3 },
    {5189, 1172, 3, 3 },
    {5200, 1175, 3, 3 },
    {5211, 1178, 3, 3 },
    {5222, 1181, 3, 3 },
    // PPC::gBCL - 514
    {5233, 1184, 3, 2 },
    {5246, 1186, 3, 2 },
    {5259, 1188, 3, 2 },
    {5273, 1190, 3, 2 },
    {5287, 1192, 3, 2 },
    {5301, 1194, 3, 2 },
    {5315, 1196, 3, 2 },
    {5331, 1198, 3, 2 },
    {5347, 1200, 3, 2 },
    {5362, 1202, 3, 2 },
    // PPC::gBCLA - 524
    {5377, 1204, 3, 2 },
    {5391, 1206, 3, 2 },
    {5405, 1208, 3, 2 },
    {5420, 1210, 3, 2 },
    {5435, 1212, 3, 2 },
    {5450, 1214, 3, 2 },
    {5465, 1216, 3, 2 },
    {5482, 1218, 3, 2 },
    {5499, 1220, 3, 2 },
    {5515, 1222, 3, 2 },
    // PPC::gBCLAat - 534
    {5531, 1224, 4, 3 },
    {5552, 1227, 4, 3 },
    // PPC::gBCLR - 536
    {5573, 1230, 3, 3 },
    {5587, 1233, 3, 3 },
    {5595, 1236, 3, 3 },
    {5603, 1239, 3, 3 },
    {5612, 1242, 3, 3 },
    {5621, 1245, 3, 3 },
    {5630, 1248, 3, 3 },
    {5639, 1251, 3, 3 },
    {5650, 1254, 3, 3 },
    {5661, 1257, 3, 3 },
    {5671, 1260, 3, 3 },
    // PPC::gBCLRL - 547
    {5681, 1263, 3, 3 },
    {5696, 1266, 3, 3 },
    {5705, 1269, 3, 3 },
    {5714, 1272, 3, 3 },
    {5724, 1275, 3, 3 },
    {5734, 1278, 3, 3 },
    {5744, 1281, 3, 3 },
    {5754, 1284, 3, 3 },
    {5766, 1287, 3, 3 },
    {5778, 1290, 3, 3 },
    {5789, 1293, 3, 3 },
    // PPC::gBCLat - 558
    {5800, 1296, 4, 3 },
    {5820, 1299, 4, 3 },
    // PPC::gBCat - 560
    {5840, 1302, 4, 3 },
    {5859, 1305, 4, 3 },
  };

  static const AliasPatternCond Conds[] = {
    // (ADDI gprc:$rD, ZERO, s16imm:$imm) - 0
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Reg, PPC::ZERO},
    // (ADDI8 g8rc:$rD, ZERO8, s16imm64:$imm) - 2
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Reg, PPC::ZERO8},
    // (ADDIS gprc:$rD, ZERO, s17imm:$imm) - 4
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Reg, PPC::ZERO},
    // (ADDIS8 g8rc:$rD, ZERO8, s17imm64:$imm) - 6
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Reg, PPC::ZERO8},
    // (ADDPCIS g8rc:$RT, 0) - 8
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCC 12, crrc:$cc, condbrtarget:$dst) - 10
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 12, CR0, condbrtarget:$dst) - 12
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 14, crrc:$cc, condbrtarget:$dst) - 14
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 14, CR0, condbrtarget:$dst) - 16
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 15, crrc:$cc, condbrtarget:$dst) - 18
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 15, CR0, condbrtarget:$dst) - 20
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 44, crrc:$cc, condbrtarget:$dst) - 22
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 44, CR0, condbrtarget:$dst) - 24
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 46, crrc:$cc, condbrtarget:$dst) - 26
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 46, CR0, condbrtarget:$dst) - 28
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 47, crrc:$cc, condbrtarget:$dst) - 30
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 47, CR0, condbrtarget:$dst) - 32
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 76, crrc:$cc, condbrtarget:$dst) - 34
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 76, CR0, condbrtarget:$dst) - 36
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 78, crrc:$cc, condbrtarget:$dst) - 38
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 78, CR0, condbrtarget:$dst) - 40
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 79, crrc:$cc, condbrtarget:$dst) - 42
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 79, CR0, condbrtarget:$dst) - 44
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 68, crrc:$cc, condbrtarget:$dst) - 46
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 68, CR0, condbrtarget:$dst) - 48
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 70, crrc:$cc, condbrtarget:$dst) - 50
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 70, CR0, condbrtarget:$dst) - 52
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCC 71, crrc:$cc, condbrtarget:$dst) - 54
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCC 71, CR0, condbrtarget:$dst) - 56
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 12, crrc:$cc, abscondbrtarget:$dst) - 58
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 12, CR0, abscondbrtarget:$dst) - 60
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 14, crrc:$cc, abscondbrtarget:$dst) - 62
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 14, CR0, abscondbrtarget:$dst) - 64
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 15, crrc:$cc, abscondbrtarget:$dst) - 66
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 15, CR0, abscondbrtarget:$dst) - 68
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 44, crrc:$cc, abscondbrtarget:$dst) - 70
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 44, CR0, abscondbrtarget:$dst) - 72
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 46, crrc:$cc, abscondbrtarget:$dst) - 74
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 46, CR0, abscondbrtarget:$dst) - 76
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 47, crrc:$cc, abscondbrtarget:$dst) - 78
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 47, CR0, abscondbrtarget:$dst) - 80
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 76, crrc:$cc, abscondbrtarget:$dst) - 82
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 76, CR0, abscondbrtarget:$dst) - 84
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 78, crrc:$cc, abscondbrtarget:$dst) - 86
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 78, CR0, abscondbrtarget:$dst) - 88
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 79, crrc:$cc, abscondbrtarget:$dst) - 90
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 79, CR0, abscondbrtarget:$dst) - 92
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 68, crrc:$cc, abscondbrtarget:$dst) - 94
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 68, CR0, abscondbrtarget:$dst) - 96
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 70, crrc:$cc, abscondbrtarget:$dst) - 98
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 70, CR0, abscondbrtarget:$dst) - 100
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCA 71, crrc:$cc, abscondbrtarget:$dst) - 102
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCA 71, CR0, abscondbrtarget:$dst) - 104
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 12, crrc:$cc) - 106
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 12, CR0) - 108
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 14, crrc:$cc) - 110
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 14, CR0) - 112
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 15, crrc:$cc) - 114
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 15, CR0) - 116
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 44, crrc:$cc) - 118
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 44, CR0) - 120
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 46, crrc:$cc) - 122
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 46, CR0) - 124
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 47, crrc:$cc) - 126
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 47, CR0) - 128
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 76, crrc:$cc) - 130
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 76, CR0) - 132
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 78, crrc:$cc) - 134
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 78, CR0) - 136
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 79, crrc:$cc) - 138
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 79, CR0) - 140
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 68, crrc:$cc) - 142
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 68, CR0) - 144
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 70, crrc:$cc) - 146
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 70, CR0) - 148
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTR 71, crrc:$cc) - 150
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTR 71, CR0) - 152
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 12, crrc:$cc) - 154
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 12, CR0) - 156
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 14, crrc:$cc) - 158
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 14, CR0) - 160
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 15, crrc:$cc) - 162
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 15, CR0) - 164
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 44, crrc:$cc) - 166
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 44, CR0) - 168
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 46, crrc:$cc) - 170
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 46, CR0) - 172
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 47, crrc:$cc) - 174
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 47, CR0) - 176
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 76, crrc:$cc) - 178
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 76, CR0) - 180
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 78, crrc:$cc) - 182
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 78, CR0) - 184
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 79, crrc:$cc) - 186
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 79, CR0) - 188
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 68, crrc:$cc) - 190
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 68, CR0) - 192
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 70, crrc:$cc) - 194
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 70, CR0) - 196
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCCTRL 71, crrc:$cc) - 198
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCCTRL 71, CR0) - 200
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 12, crrc:$cc, condbrtarget:$dst) - 202
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 12, CR0, condbrtarget:$dst) - 204
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 14, crrc:$cc, condbrtarget:$dst) - 206
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 14, CR0, condbrtarget:$dst) - 208
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 15, crrc:$cc, condbrtarget:$dst) - 210
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 15, CR0, condbrtarget:$dst) - 212
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 44, crrc:$cc, condbrtarget:$dst) - 214
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 44, CR0, condbrtarget:$dst) - 216
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 46, crrc:$cc, condbrtarget:$dst) - 218
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 46, CR0, condbrtarget:$dst) - 220
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 47, crrc:$cc, condbrtarget:$dst) - 222
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 47, CR0, condbrtarget:$dst) - 224
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 76, crrc:$cc, condbrtarget:$dst) - 226
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 76, CR0, condbrtarget:$dst) - 228
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 78, crrc:$cc, condbrtarget:$dst) - 230
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 78, CR0, condbrtarget:$dst) - 232
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 79, crrc:$cc, condbrtarget:$dst) - 234
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 79, CR0, condbrtarget:$dst) - 236
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 68, crrc:$cc, condbrtarget:$dst) - 238
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 68, CR0, condbrtarget:$dst) - 240
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 70, crrc:$cc, condbrtarget:$dst) - 242
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 70, CR0, condbrtarget:$dst) - 244
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCL 71, crrc:$cc, condbrtarget:$dst) - 246
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCL 71, CR0, condbrtarget:$dst) - 248
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst) - 250
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 12, CR0, abscondbrtarget:$dst) - 252
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst) - 254
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 14, CR0, abscondbrtarget:$dst) - 256
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst) - 258
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 15, CR0, abscondbrtarget:$dst) - 260
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst) - 262
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 44, CR0, abscondbrtarget:$dst) - 264
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst) - 266
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 46, CR0, abscondbrtarget:$dst) - 268
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst) - 270
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 47, CR0, abscondbrtarget:$dst) - 272
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst) - 274
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 76, CR0, abscondbrtarget:$dst) - 276
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst) - 278
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 78, CR0, abscondbrtarget:$dst) - 280
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst) - 282
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 79, CR0, abscondbrtarget:$dst) - 284
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst) - 286
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 68, CR0, abscondbrtarget:$dst) - 288
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst) - 290
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 70, CR0, abscondbrtarget:$dst) - 292
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst) - 294
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLA 71, CR0, abscondbrtarget:$dst) - 296
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 12, crrc:$cc) - 298
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 12, CR0) - 300
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 14, crrc:$cc) - 302
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 14, CR0) - 304
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 15, crrc:$cc) - 306
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 15, CR0) - 308
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 44, crrc:$cc) - 310
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 44, CR0) - 312
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 46, crrc:$cc) - 314
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 46, CR0) - 316
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 47, crrc:$cc) - 318
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 47, CR0) - 320
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 76, crrc:$cc) - 322
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 76, CR0) - 324
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 78, crrc:$cc) - 326
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 78, CR0) - 328
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 79, crrc:$cc) - 330
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 79, CR0) - 332
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 68, crrc:$cc) - 334
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 68, CR0) - 336
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 70, crrc:$cc) - 338
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 70, CR0) - 340
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLR 71, crrc:$cc) - 342
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLR 71, CR0) - 344
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 12, crrc:$cc) - 346
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 12, CR0) - 348
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 14, crrc:$cc) - 350
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 14, CR0) - 352
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 15, crrc:$cc) - 354
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 15, CR0) - 356
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 44, crrc:$cc) - 358
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 44, CR0) - 360
    {AliasPatternCond::K_Imm, uint32_t(44)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 46, crrc:$cc) - 362
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 46, CR0) - 364
    {AliasPatternCond::K_Imm, uint32_t(46)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 47, crrc:$cc) - 366
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 47, CR0) - 368
    {AliasPatternCond::K_Imm, uint32_t(47)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 76, crrc:$cc) - 370
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 76, CR0) - 372
    {AliasPatternCond::K_Imm, uint32_t(76)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 78, crrc:$cc) - 374
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 78, CR0) - 376
    {AliasPatternCond::K_Imm, uint32_t(78)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 79, crrc:$cc) - 378
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 79, CR0) - 380
    {AliasPatternCond::K_Imm, uint32_t(79)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 68, crrc:$cc) - 382
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 68, CR0) - 384
    {AliasPatternCond::K_Imm, uint32_t(68)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 70, crrc:$cc) - 386
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 70, CR0) - 388
    {AliasPatternCond::K_Imm, uint32_t(70)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (BCCLRL 71, crrc:$cc) - 390
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    // (BCCLRL 71, CR0) - 392
    {AliasPatternCond::K_Imm, uint32_t(71)},
    {AliasPatternCond::K_Reg, PPC::CR0},
    // (CMPD CR0, g8rc:$rA, g8rc:$rB) - 394
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CMPDI CR0, g8rc:$rA, s16imm64:$imm) - 397
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CMPLD CR0, g8rc:$rA, g8rc:$rB) - 399
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm) - 402
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CMPLW CR0, gprc:$rA, gprc:$rB) - 404
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CMPLWI CR0, gprc:$rA, u16imm:$imm) - 407
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CMPW CR0, gprc:$rA, gprc:$rB) - 409
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CMPWI CR0, gprc:$rA, s16imm:$imm) - 412
    {AliasPatternCond::K_Reg, PPC::CR0},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CNTLZW gprc:$rA, gprc:$rS) - 414
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CNTLZW8 g8rc:$rA, g8rc:$rS) - 416
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CNTLZW8_rec g8rc:$rA, g8rc:$rS) - 418
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (CNTLZW_rec gprc:$rA, gprc:$rS) - 420
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx) - 422
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_TiedReg, 0},
    {AliasPatternCond::K_TiedReg, 0},
    // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by) - 425
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by) - 428
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx) - 431
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_TiedReg, 0},
    {AliasPatternCond::K_TiedReg, 0},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0LT) - 434
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRC_NOR0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0LT},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0GT) - 438
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRC_NOR0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0GT},
    // (ISEL gprc:$rT, gprc_nor0:$rA, gprc:$rB, CR0EQ) - 442
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRC_NOR0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0EQ},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0LT) - 446
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RC_NOX0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0LT},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0GT) - 450
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RC_NOX0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0GT},
    // (ISEL8 g8rc:$rT, g8rc_nox0:$rA, g8rc:$rB, CR0EQ) - 454
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RC_NOX0RegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Reg, PPC::CR0EQ},
    // (MBAR 0) - 458
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MFDCR gprc:$Rx, 128) - 459
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(128)},
    // (MFDCR gprc:$Rx, 129) - 461
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(129)},
    // (MFDCR gprc:$Rx, 130) - 463
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(130)},
    // (MFDCR gprc:$Rx, 131) - 465
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(131)},
    // (MFDCR gprc:$Rx, 132) - 467
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(132)},
    // (MFDCR gprc:$Rx, 133) - 469
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(133)},
    // (MFDCR gprc:$Rx, 134) - 471
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(134)},
    // (MFDCR gprc:$Rx, 135) - 473
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(135)},
    // (MFSPR gprc:$Rx, 1) - 475
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MFSPR gprc:$Rx, 3) - 477
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (MFSPR gprc:$Rx, 4) - 482
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MFSPR gprc:$Rx, 5) - 484
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MFSPR gprc:$Rx, 8) - 486
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MFSPR gprc:$Rx, 9) - 488
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MFSPR gprc:$Rx, 13) - 490
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MFSPR gprc:$Rx, 17) - 492
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(17)},
    // (MFSPR gprc:$Rx, 18) - 494
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(18)},
    // (MFSPR gprc:$Rx, 19) - 496
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(19)},
    // (MFSPR gprc:$Rx, 22) - 498
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(22)},
    // (MFSPR gprc:$Rx, 25) - 500
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(25)},
    // (MFSPR gprc:$Rx, 26) - 502
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(26)},
    // (MFSPR gprc:$Rx, 27) - 504
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(27)},
    // (MFSPR gprc:$Rx, 28) - 506
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(28)},
    // (MFSPR gprc:$Rx, 29) - 508
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(29)},
    // (MFSPR gprc:$Rx, 48) - 510
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(48)},
    // (MFSPR gprc:$RT, 280) - 512
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(280)},
    // (MFSPR gprc:$RT, 287) - 514
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(287)},
    // (MFSPR gprc:$Rx, 512) - 516
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(512)},
    // (MFSPR gprc:$Rx, 536) - 518
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(536)},
    // (MFSPR gprc:$Rx, 537) - 520
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(537)},
    // (MFSPR gprc:$Rx, 528) - 522
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(528)},
    // (MFSPR gprc:$Rx, 529) - 524
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(529)},
    // (MFSPR gprc:$Rx, 538) - 526
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(538)},
    // (MFSPR gprc:$Rx, 539) - 528
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(539)},
    // (MFSPR gprc:$Rx, 530) - 530
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(530)},
    // (MFSPR gprc:$Rx, 531) - 532
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(531)},
    // (MFSPR gprc:$Rx, 540) - 534
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(540)},
    // (MFSPR gprc:$Rx, 541) - 536
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(541)},
    // (MFSPR gprc:$Rx, 532) - 538
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(532)},
    // (MFSPR gprc:$Rx, 533) - 540
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(533)},
    // (MFSPR gprc:$Rx, 542) - 542
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(542)},
    // (MFSPR gprc:$Rx, 543) - 544
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(543)},
    // (MFSPR gprc:$Rx, 534) - 546
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(534)},
    // (MFSPR gprc:$Rx, 535) - 548
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(535)},
    // (MFSPR gprc:$RT, 896) - 550
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(896)},
    // (MFSPR gprc:$Rx, 980) - 552
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(980)},
    // (MFSPR gprc:$Rx, 981) - 554
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(981)},
    // (MFSPR gprc:$Rx, 986) - 556
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(986)},
    // (MFSPR gprc:$Rx, 988) - 558
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(988)},
    // (MFSPR gprc:$Rx, 989) - 560
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(989)},
    // (MFSPR gprc:$Rx, 990) - 562
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(990)},
    // (MFSPR gprc:$Rx, 991) - 564
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(991)},
    // (MFSPR gprc:$Rx, 1018) - 566
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1018)},
    // (MFSPR gprc:$Rx, 1019) - 568
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1019)},
    // (MFSPR8 g8rc:$Rx, 1) - 570
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MFSPR8 g8rc:$Rx, 3) - 572
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (MFSPR8 g8rc:$Rx, 4) - 577
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MFSPR8 g8rc:$Rx, 5) - 579
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MFSPR8 g8rc:$Rx, 8) - 581
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MFSPR8 g8rc:$Rx, 9) - 583
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MFSPR8 g8rc:$Rx, 13) - 585
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MFSPR8 g8rc:$Rx, 17) - 587
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(17)},
    // (MFSPR8 g8rc:$Rx, 18) - 589
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(18)},
    // (MFSPR8 g8rc:$Rx, 19) - 591
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(19)},
    // (MFSPR8 g8rc:$Rx, 22) - 593
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(22)},
    // (MFSPR8 g8rc:$Rx, 25) - 595
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(25)},
    // (MFSPR8 g8rc:$Rx, 26) - 597
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(26)},
    // (MFSPR8 g8rc:$Rx, 27) - 599
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(27)},
    // (MFSPR8 g8rc:$Rx, 28) - 601
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(28)},
    // (MFSPR8 g8rc:$Rx, 29) - 603
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(29)},
    // (MFSPR8 g8rc:$RT, 280) - 605
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(280)},
    // (MFSPR8 g8rc:$RT, 287) - 607
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(287)},
    // (MFSPR8 g8rc:$Rx, 512) - 609
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(512)},
    // (MFTB gprc:$Rx, 269) - 611
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(269)},
    // (MFVRSAVE gprc:$rS) - 613
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MFVSRD g8rc:$rA, f8rc:$src) - 614
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    // (MFVSRWZ gprc:$rA, f8rc:$src) - 616
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    // (MTCRF 255, gprc:$rA) - 618
    {AliasPatternCond::K_Imm, uint32_t(255)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTCRF8 255, g8rc:$rA) - 620
    {AliasPatternCond::K_Imm, uint32_t(255)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTDCR gprc:$Rx, 128) - 622
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(128)},
    // (MTDCR gprc:$Rx, 129) - 624
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(129)},
    // (MTDCR gprc:$Rx, 130) - 626
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(130)},
    // (MTDCR gprc:$Rx, 131) - 628
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(131)},
    // (MTDCR gprc:$Rx, 132) - 630
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(132)},
    // (MTDCR gprc:$Rx, 133) - 632
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(133)},
    // (MTDCR gprc:$Rx, 134) - 634
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(134)},
    // (MTDCR gprc:$Rx, 135) - 636
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(135)},
    // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0) - 638
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTFSFI crrc:$BF, i32imm:$U, 0) - 642
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTFSFI_rec crrc:$BF, i32imm:$U, 0) - 645
    {AliasPatternCond::K_RegClass, PPC::CRRCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTFSF_rec i32imm:$FLM, f8rc:$FRB, 0, 0) - 648
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTMSR gprc:$RS, 0) - 652
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTMSRD gprc:$RS, 0) - 654
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MTSPR 1, gprc:$Rx) - 656
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 3, gprc:$Rx) - 658
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (MTSPR 8, gprc:$Rx) - 663
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 9, gprc:$Rx) - 665
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 13, gprc:$Rx) - 667
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 17, gprc:$Rx) - 669
    {AliasPatternCond::K_Imm, uint32_t(17)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 18, gprc:$Rx) - 671
    {AliasPatternCond::K_Imm, uint32_t(18)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 19, gprc:$Rx) - 673
    {AliasPatternCond::K_Imm, uint32_t(19)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 22, gprc:$Rx) - 675
    {AliasPatternCond::K_Imm, uint32_t(22)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 25, gprc:$Rx) - 677
    {AliasPatternCond::K_Imm, uint32_t(25)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 26, gprc:$Rx) - 679
    {AliasPatternCond::K_Imm, uint32_t(26)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 27, gprc:$Rx) - 681
    {AliasPatternCond::K_Imm, uint32_t(27)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 28, gprc:$Rx) - 683
    {AliasPatternCond::K_Imm, uint32_t(28)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 29, gprc:$Rx) - 685
    {AliasPatternCond::K_Imm, uint32_t(29)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 48, gprc:$Rx) - 687
    {AliasPatternCond::K_Imm, uint32_t(48)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 280, gprc:$RT) - 689
    {AliasPatternCond::K_Imm, uint32_t(280)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 284, gprc:$Rx) - 691
    {AliasPatternCond::K_Imm, uint32_t(284)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 285, gprc:$Rx) - 693
    {AliasPatternCond::K_Imm, uint32_t(285)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 512, gprc:$Rx) - 695
    {AliasPatternCond::K_Imm, uint32_t(512)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 536, gprc:$Rx) - 697
    {AliasPatternCond::K_Imm, uint32_t(536)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 537, gprc:$Rx) - 699
    {AliasPatternCond::K_Imm, uint32_t(537)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 528, gprc:$Rx) - 701
    {AliasPatternCond::K_Imm, uint32_t(528)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 529, gprc:$Rx) - 703
    {AliasPatternCond::K_Imm, uint32_t(529)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 538, gprc:$Rx) - 705
    {AliasPatternCond::K_Imm, uint32_t(538)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 539, gprc:$Rx) - 707
    {AliasPatternCond::K_Imm, uint32_t(539)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 530, gprc:$Rx) - 709
    {AliasPatternCond::K_Imm, uint32_t(530)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 531, gprc:$Rx) - 711
    {AliasPatternCond::K_Imm, uint32_t(531)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 540, gprc:$Rx) - 713
    {AliasPatternCond::K_Imm, uint32_t(540)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 541, gprc:$Rx) - 715
    {AliasPatternCond::K_Imm, uint32_t(541)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 532, gprc:$Rx) - 717
    {AliasPatternCond::K_Imm, uint32_t(532)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 533, gprc:$Rx) - 719
    {AliasPatternCond::K_Imm, uint32_t(533)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 542, gprc:$Rx) - 721
    {AliasPatternCond::K_Imm, uint32_t(542)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 543, gprc:$Rx) - 723
    {AliasPatternCond::K_Imm, uint32_t(543)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 534, gprc:$Rx) - 725
    {AliasPatternCond::K_Imm, uint32_t(534)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 535, gprc:$Rx) - 727
    {AliasPatternCond::K_Imm, uint32_t(535)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 896, gprc:$RT) - 729
    {AliasPatternCond::K_Imm, uint32_t(896)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 980, gprc:$Rx) - 731
    {AliasPatternCond::K_Imm, uint32_t(980)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 981, gprc:$Rx) - 733
    {AliasPatternCond::K_Imm, uint32_t(981)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 986, gprc:$Rx) - 735
    {AliasPatternCond::K_Imm, uint32_t(986)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 988, gprc:$Rx) - 737
    {AliasPatternCond::K_Imm, uint32_t(988)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 989, gprc:$Rx) - 739
    {AliasPatternCond::K_Imm, uint32_t(989)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 990, gprc:$Rx) - 741
    {AliasPatternCond::K_Imm, uint32_t(990)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 991, gprc:$Rx) - 743
    {AliasPatternCond::K_Imm, uint32_t(991)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 1018, gprc:$Rx) - 745
    {AliasPatternCond::K_Imm, uint32_t(1018)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR 1019, gprc:$Rx) - 747
    {AliasPatternCond::K_Imm, uint32_t(1019)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTSPR8 1, g8rc:$Rx) - 749
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 3, g8rc:$Rx) - 751
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (MTSPR8 8, g8rc:$Rx) - 756
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 9, g8rc:$Rx) - 758
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 13, g8rc:$Rx) - 760
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 17, g8rc:$Rx) - 762
    {AliasPatternCond::K_Imm, uint32_t(17)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 18, g8rc:$Rx) - 764
    {AliasPatternCond::K_Imm, uint32_t(18)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 19, g8rc:$Rx) - 766
    {AliasPatternCond::K_Imm, uint32_t(19)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 22, g8rc:$Rx) - 768
    {AliasPatternCond::K_Imm, uint32_t(22)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 25, g8rc:$Rx) - 770
    {AliasPatternCond::K_Imm, uint32_t(25)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 26, g8rc:$Rx) - 772
    {AliasPatternCond::K_Imm, uint32_t(26)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 27, g8rc:$Rx) - 774
    {AliasPatternCond::K_Imm, uint32_t(27)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 28, g8rc:$Rx) - 776
    {AliasPatternCond::K_Imm, uint32_t(28)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 29, g8rc:$Rx) - 778
    {AliasPatternCond::K_Imm, uint32_t(29)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 280, g8rc:$RT) - 780
    {AliasPatternCond::K_Imm, uint32_t(280)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 284, g8rc:$Rx) - 782
    {AliasPatternCond::K_Imm, uint32_t(284)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 285, g8rc:$Rx) - 784
    {AliasPatternCond::K_Imm, uint32_t(285)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTSPR8 512, g8rc:$Rx) - 786
    {AliasPatternCond::K_Imm, uint32_t(512)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTVRSAVE gprc:$rS) - 788
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTVSRD f8rc:$dst, g8rc:$rA) - 789
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (MTVSRWA f8rc:$dst, gprc:$rA) - 791
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (MTVSRWZ f8rc:$dst, gprc:$rA) - 793
    {AliasPatternCond::K_RegClass, PPC::F8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (NOR gprc:$rA, gprc:$rS, gprc:$rS) - 795
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB) - 798
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (NOR8_rec g8rc:$rA, g8rc:$rB, g8rc:$rB) - 801
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (NOR_rec gprc:$rA, gprc:$rS, gprc:$rS) - 804
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (OR gprc:$rA, gprc:$rB, gprc:$rB) - 807
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB) - 810
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (OR8_rec g8rc:$rA, g8rc:$rB, g8rc:$rB) - 813
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (ORI R0, R0, 0) - 816
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (ORI8 X0, X0, 0) - 819
    {AliasPatternCond::K_Reg, PPC::X0},
    {AliasPatternCond::K_Reg, PPC::X0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (OR_rec gprc:$rA, gprc:$rB, gprc:$rB) - 822
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (RFEBB 1) - 825
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0) - 826
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDCL_rec g8rc:$rA, g8rc:$rS, gprc:$rB, 0) - 830
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0) - 834
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n) - 838
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL_32_64 g8rc:$rA, gprc:$rS, u6imm:$n, 0) - 841
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL_32_64 g8rc:$rA, gprc:$rS, 0, u6imm:$n) - 845
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL_rec g8rc:$rA, g8rc:$rS, u6imm:$n, 0) - 848
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLDICL_rec g8rc:$rA, g8rc:$rS, 0, u6imm:$n) - 852
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31) - 855
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31) - 860
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM8 g8rc:$rA, g8rc:$rS, u5imm:$n, 0, 31) - 865
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM8 g8rc:$rA, g8rc:$rS, 0, u5imm:$n, 31) - 870
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM8_rec g8rc:$rA, g8rc:$rS, u5imm:$n, 0, 31) - 875
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM8_rec g8rc:$rA, g8rc:$rS, 0, u5imm:$n, 31) - 880
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM_rec gprc:$rA, gprc:$rS, u5imm:$n, 0, 31) - 885
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWINM_rec gprc:$rA, gprc:$rS, 0, u5imm:$n, 31) - 890
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31) - 895
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWNM8 g8rc:$rA, g8rc:$rS, g8rc:$rB, 0, 31) - 900
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWNM8_rec g8rc:$rA, g8rc:$rS, g8rc:$rB, 0, 31) - 905
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (RLWNM_rec gprc:$rA, gprc:$rS, gprc:$rB, 0, 31) - 910
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Imm, uint32_t(31)},
    // (SC 0) - 915
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (SUBF gprc:$rA, gprc:$rC, gprc:$rB) - 916
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB) - 919
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (SUBF8_rec g8rc:$rA, g8rc:$rC, g8rc:$rB) - 922
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (SUBFC gprc:$rA, gprc:$rC, gprc:$rB) - 925
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB) - 928
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (SUBFC8_rec g8rc:$rA, g8rc:$rC, g8rc:$rB) - 931
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (SUBFC_rec gprc:$rA, gprc:$rC, gprc:$rB) - 934
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (SUBF_rec gprc:$rA, gprc:$rC, gprc:$rB) - 937
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (SYNC 0) - 940
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (SYNC 1) - 941
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (SYNC 2) - 942
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TD 16, g8rc:$rA, g8rc:$rB) - 943
    {AliasPatternCond::K_Imm, uint32_t(16)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 4, g8rc:$rA, g8rc:$rB) - 946
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 8, g8rc:$rA, g8rc:$rB) - 949
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 24, g8rc:$rA, g8rc:$rB) - 952
    {AliasPatternCond::K_Imm, uint32_t(24)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 2, g8rc:$rA, g8rc:$rB) - 955
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 1, g8rc:$rA, g8rc:$rB) - 958
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TD 31, g8rc:$rA, g8rc:$rB) - 961
    {AliasPatternCond::K_Imm, uint32_t(31)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 16, g8rc:$rA, s16imm:$imm) - 964
    {AliasPatternCond::K_Imm, uint32_t(16)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 4, g8rc:$rA, s16imm:$imm) - 966
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 8, g8rc:$rA, s16imm:$imm) - 968
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 24, g8rc:$rA, s16imm:$imm) - 970
    {AliasPatternCond::K_Imm, uint32_t(24)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 2, g8rc:$rA, s16imm:$imm) - 972
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 1, g8rc:$rA, s16imm:$imm) - 974
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TDI 31, g8rc:$rA, s16imm:$imm) - 976
    {AliasPatternCond::K_Imm, uint32_t(31)},
    {AliasPatternCond::K_RegClass, PPC::G8RCRegClassID},
    // (TEND 0) - 978
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TEND 1) - 979
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TLBIE R0, gprc:$RB) - 980
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TLBRE2 gprc:$RS, gprc:$A, 0) - 982
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TLBRE2 gprc:$RS, gprc:$A, 1) - 985
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TLBWE2 gprc:$RS, gprc:$A, 0) - 988
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TLBWE2 gprc:$RS, gprc:$A, 1) - 991
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TSR 0) - 994
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TSR 1) - 995
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TW 31, R0, R0) - 996
    {AliasPatternCond::K_Imm, uint32_t(31)},
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_Reg, PPC::R0},
    // (TW 16, gprc:$rA, gprc:$rB) - 999
    {AliasPatternCond::K_Imm, uint32_t(16)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 4, gprc:$rA, gprc:$rB) - 1002
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 8, gprc:$rA, gprc:$rB) - 1005
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 24, gprc:$rA, gprc:$rB) - 1008
    {AliasPatternCond::K_Imm, uint32_t(24)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 2, gprc:$rA, gprc:$rB) - 1011
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 1, gprc:$rA, gprc:$rB) - 1014
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TW 31, gprc:$rA, gprc:$rB) - 1017
    {AliasPatternCond::K_Imm, uint32_t(31)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 16, gprc:$rA, s16imm:$imm) - 1020
    {AliasPatternCond::K_Imm, uint32_t(16)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 4, gprc:$rA, s16imm:$imm) - 1022
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 8, gprc:$rA, s16imm:$imm) - 1024
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 24, gprc:$rA, s16imm:$imm) - 1026
    {AliasPatternCond::K_Imm, uint32_t(24)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 2, gprc:$rA, s16imm:$imm) - 1028
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 1, gprc:$rA, s16imm:$imm) - 1030
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (TWI 31, gprc:$rA, s16imm:$imm) - 1032
    {AliasPatternCond::K_Imm, uint32_t(31)},
    {AliasPatternCond::K_RegClass, PPC::GPRCRegClassID},
    // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA) - 1034
    {AliasPatternCond::K_RegClass, PPC::VRRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VRRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA) - 1037
    {AliasPatternCond::K_RegClass, PPC::VRRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VRRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (WAIT 0) - 1040
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (WAIT 1) - 1041
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (WAIT 2) - 1042
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (XORI R0, R0, 0) - 1043
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_Reg, PPC::R0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (XORI8 X0, X0, 0) - 1046
    {AliasPatternCond::K_Reg, PPC::X0},
    {AliasPatternCond::K_Reg, PPC::X0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB) - 1049
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB) - 1052
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0) - 1055
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3) - 1062
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0) - 1069
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3) - 1073
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2) - 1077
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0) - 1081
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSFRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3) - 1087
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSFRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_OrNegFeature, PPC::AIXOS},
    {AliasPatternCond::K_OrFeature, PPC::FeatureModernAIXAs},
    {AliasPatternCond::K_EndOrFeatures, 0},
    // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2) - 1093
    {AliasPatternCond::K_RegClass, PPC::VSRCRegClassID},
    {AliasPatternCond::K_RegClass, PPC::VSFRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (gBC 12, crbitrc:$bi, condbrtarget:$dst) - 1096
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 4, crbitrc:$bi, condbrtarget:$dst) - 1098
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 14, crbitrc:$bi, condbrtarget:$dst) - 1100
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 6, crbitrc:$bi, condbrtarget:$dst) - 1102
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 15, crbitrc:$bi, condbrtarget:$dst) - 1104
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 7, crbitrc:$bi, condbrtarget:$dst) - 1106
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 8, crbitrc:$bi, condbrtarget:$dst) - 1108
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 0, crbitrc:$bi, condbrtarget:$dst) - 1110
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 10, crbitrc:$bi, condbrtarget:$dst) - 1112
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBC 2, crbitrc:$bi, condbrtarget:$dst) - 1114
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst) - 1116
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst) - 1118
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst) - 1120
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst) - 1122
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst) - 1124
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst) - 1126
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst) - 1128
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst) - 1130
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst) - 1132
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst) - 1134
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1136
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1139
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCCTR u5imm:$bo, crbitrc:$bi, 0) - 1142
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 12, crbitrc:$bi, 0) - 1145
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 4, crbitrc:$bi, 0) - 1148
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 14, crbitrc:$bi, 0) - 1151
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 6, crbitrc:$bi, 0) - 1154
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 15, crbitrc:$bi, 0) - 1157
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTR 7, crbitrc:$bi, 0) - 1160
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0) - 1163
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 12, crbitrc:$bi, 0) - 1166
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 4, crbitrc:$bi, 0) - 1169
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 14, crbitrc:$bi, 0) - 1172
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 6, crbitrc:$bi, 0) - 1175
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 15, crbitrc:$bi, 0) - 1178
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCCTRL 7, crbitrc:$bi, 0) - 1181
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCL 12, crbitrc:$bi, condbrtarget:$dst) - 1184
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 4, crbitrc:$bi, condbrtarget:$dst) - 1186
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 14, crbitrc:$bi, condbrtarget:$dst) - 1188
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 6, crbitrc:$bi, condbrtarget:$dst) - 1190
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 15, crbitrc:$bi, condbrtarget:$dst) - 1192
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 7, crbitrc:$bi, condbrtarget:$dst) - 1194
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 8, crbitrc:$bi, condbrtarget:$dst) - 1196
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 0, crbitrc:$bi, condbrtarget:$dst) - 1198
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 10, crbitrc:$bi, condbrtarget:$dst) - 1200
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCL 2, crbitrc:$bi, condbrtarget:$dst) - 1202
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst) - 1204
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst) - 1206
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst) - 1208
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst) - 1210
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst) - 1212
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst) - 1214
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst) - 1216
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst) - 1218
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst) - 1220
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst) - 1222
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1224
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1227
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLR u5imm:$bo, crbitrc:$bi, 0) - 1230
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 12, crbitrc:$bi, 0) - 1233
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 4, crbitrc:$bi, 0) - 1236
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 14, crbitrc:$bi, 0) - 1239
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 6, crbitrc:$bi, 0) - 1242
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 15, crbitrc:$bi, 0) - 1245
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 7, crbitrc:$bi, 0) - 1248
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 8, crbitrc:$bi, 0) - 1251
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 0, crbitrc:$bi, 0) - 1254
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 10, crbitrc:$bi, 0) - 1257
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLR 2, crbitrc:$bi, 0) - 1260
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL u5imm:$bo, crbitrc:$bi, 0) - 1263
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 12, crbitrc:$bi, 0) - 1266
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 4, crbitrc:$bi, 0) - 1269
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 14, crbitrc:$bi, 0) - 1272
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 6, crbitrc:$bi, 0) - 1275
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 15, crbitrc:$bi, 0) - 1278
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 7, crbitrc:$bi, 0) - 1281
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 8, crbitrc:$bi, 0) - 1284
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 0, crbitrc:$bi, 0) - 1287
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 10, crbitrc:$bi, 0) - 1290
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLRL 2, crbitrc:$bi, 0) - 1293
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1296
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1299
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst) - 1302
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
    // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst) - 1305
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, PPC::CRBITRCRegClassID},
  };

  static const char AsmStrings[] =
    /* 0 */ "li $\x01, $\xFF\x03\x01\0"
    /* 12 */ "lis $\x01, $\xFF\x03\x01\0"
    /* 25 */ "lnia $\x01\0"
    /* 33 */ "blt $\x02, $\xFF\x03\x02\0"
    /* 46 */ "blt $\xFF\x03\x02\0"
    /* 55 */ "blt- $\x02, $\xFF\x03\x02\0"
    /* 69 */ "blt- $\xFF\x03\x02\0"
    /* 79 */ "blt+ $\x02, $\xFF\x03\x02\0"
    /* 93 */ "blt+ $\xFF\x03\x02\0"
    /* 103 */ "bgt $\x02, $\xFF\x03\x02\0"
    /* 116 */ "bgt $\xFF\x03\x02\0"
    /* 125 */ "bgt- $\x02, $\xFF\x03\x02\0"
    /* 139 */ "bgt- $\xFF\x03\x02\0"
    /* 149 */ "bgt+ $\x02, $\xFF\x03\x02\0"
    /* 163 */ "bgt+ $\xFF\x03\x02\0"
    /* 173 */ "beq $\x02, $\xFF\x03\x02\0"
    /* 186 */ "beq $\xFF\x03\x02\0"
    /* 195 */ "beq- $\x02, $\xFF\x03\x02\0"
    /* 209 */ "beq- $\xFF\x03\x02\0"
    /* 219 */ "beq+ $\x02, $\xFF\x03\x02\0"
    /* 233 */ "beq+ $\xFF\x03\x02\0"
    /* 243 */ "bne $\x02, $\xFF\x03\x02\0"
    /* 256 */ "bne $\xFF\x03\x02\0"
    /* 265 */ "bne- $\x02, $\xFF\x03\x02\0"
    /* 279 */ "bne- $\xFF\x03\x02\0"
    /* 289 */ "bne+ $\x02, $\xFF\x03\x02\0"
    /* 303 */ "bne+ $\xFF\x03\x02\0"
    /* 313 */ "blta $\x02, $\xFF\x03\x03\0"
    /* 327 */ "blta $\xFF\x03\x03\0"
    /* 337 */ "blta- $\x02, $\xFF\x03\x03\0"
    /* 352 */ "blta- $\xFF\x03\x03\0"
    /* 363 */ "blta+ $\x02, $\xFF\x03\x03\0"
    /* 378 */ "blta+ $\xFF\x03\x03\0"
    /* 389 */ "bgta $\x02, $\xFF\x03\x03\0"
    /* 403 */ "bgta $\xFF\x03\x03\0"
    /* 413 */ "bgta- $\x02, $\xFF\x03\x03\0"
    /* 428 */ "bgta- $\xFF\x03\x03\0"
    /* 439 */ "bgta+ $\x02, $\xFF\x03\x03\0"
    /* 454 */ "bgta+ $\xFF\x03\x03\0"
    /* 465 */ "beqa $\x02, $\xFF\x03\x03\0"
    /* 479 */ "beqa $\xFF\x03\x03\0"
    /* 489 */ "beqa- $\x02, $\xFF\x03\x03\0"
    /* 504 */ "beqa- $\xFF\x03\x03\0"
    /* 515 */ "beqa+ $\x02, $\xFF\x03\x03\0"
    /* 530 */ "beqa+ $\xFF\x03\x03\0"
    /* 541 */ "bnea $\x02, $\xFF\x03\x03\0"
    /* 555 */ "bnea $\xFF\x03\x03\0"
    /* 565 */ "bnea- $\x02, $\xFF\x03\x03\0"
    /* 580 */ "bnea- $\xFF\x03\x03\0"
    /* 591 */ "bnea+ $\x02, $\xFF\x03\x03\0"
    /* 606 */ "bnea+ $\xFF\x03\x03\0"
    /* 617 */ "bltctr $\x02\0"
    /* 627 */ "bltctr\0"
    /* 634 */ "bltctr- $\x02\0"
    /* 645 */ "bltctr-\0"
    /* 653 */ "bltctr+ $\x02\0"
    /* 664 */ "bltctr+\0"
    /* 672 */ "bgtctr $\x02\0"
    /* 682 */ "bgtctr\0"
    /* 689 */ "bgtctr- $\x02\0"
    /* 700 */ "bgtctr-\0"
    /* 708 */ "bgtctr+ $\x02\0"
    /* 719 */ "bgtctr+\0"
    /* 727 */ "beqctr $\x02\0"
    /* 737 */ "beqctr\0"
    /* 744 */ "beqctr- $\x02\0"
    /* 755 */ "beqctr-\0"
    /* 763 */ "beqctr+ $\x02\0"
    /* 774 */ "beqctr+\0"
    /* 782 */ "bnectr $\x02\0"
    /* 792 */ "bnectr\0"
    /* 799 */ "bnectr- $\x02\0"
    /* 810 */ "bnectr-\0"
    /* 818 */ "bnectr+ $\x02\0"
    /* 829 */ "bnectr+\0"
    /* 837 */ "bltctrl $\x02\0"
    /* 848 */ "bltctrl\0"
    /* 856 */ "bltctrl- $\x02\0"
    /* 868 */ "bltctrl-\0"
    /* 877 */ "bltctrl+ $\x02\0"
    /* 889 */ "bltctrl+\0"
    /* 898 */ "bgtctrl $\x02\0"
    /* 909 */ "bgtctrl\0"
    /* 917 */ "bgtctrl- $\x02\0"
    /* 929 */ "bgtctrl-\0"
    /* 938 */ "bgtctrl+ $\x02\0"
    /* 950 */ "bgtctrl+\0"
    /* 959 */ "beqctrl $\x02\0"
    /* 970 */ "beqctrl\0"
    /* 978 */ "beqctrl- $\x02\0"
    /* 990 */ "beqctrl-\0"
    /* 999 */ "beqctrl+ $\x02\0"
    /* 1011 */ "beqctrl+\0"
    /* 1020 */ "bnectrl $\x02\0"
    /* 1031 */ "bnectrl\0"
    /* 1039 */ "bnectrl- $\x02\0"
    /* 1051 */ "bnectrl-\0"
    /* 1060 */ "bnectrl+ $\x02\0"
    /* 1072 */ "bnectrl+\0"
    /* 1081 */ "bltl $\x02, $\xFF\x03\x02\0"
    /* 1095 */ "bltl $\xFF\x03\x02\0"
    /* 1105 */ "bltl- $\x02, $\xFF\x03\x02\0"
    /* 1120 */ "bltl- $\xFF\x03\x02\0"
    /* 1131 */ "bltl+ $\x02, $\xFF\x03\x02\0"
    /* 1146 */ "bltl+ $\xFF\x03\x02\0"
    /* 1157 */ "bgtl $\x02, $\xFF\x03\x02\0"
    /* 1171 */ "bgtl $\xFF\x03\x02\0"
    /* 1181 */ "bgtl- $\x02, $\xFF\x03\x02\0"
    /* 1196 */ "bgtl- $\xFF\x03\x02\0"
    /* 1207 */ "bgtl+ $\x02, $\xFF\x03\x02\0"
    /* 1222 */ "bgtl+ $\xFF\x03\x02\0"
    /* 1233 */ "beql $\x02, $\xFF\x03\x02\0"
    /* 1247 */ "beql $\xFF\x03\x02\0"
    /* 1257 */ "beql- $\x02, $\xFF\x03\x02\0"
    /* 1272 */ "beql- $\xFF\x03\x02\0"
    /* 1283 */ "beql+ $\x02, $\xFF\x03\x02\0"
    /* 1298 */ "beql+ $\xFF\x03\x02\0"
    /* 1309 */ "bnel $\x02, $\xFF\x03\x02\0"
    /* 1323 */ "bnel $\xFF\x03\x02\0"
    /* 1333 */ "bnel- $\x02, $\xFF\x03\x02\0"
    /* 1348 */ "bnel- $\xFF\x03\x02\0"
    /* 1359 */ "bnel+ $\x02, $\xFF\x03\x02\0"
    /* 1374 */ "bnel+ $\xFF\x03\x02\0"
    /* 1385 */ "bltla $\x02, $\xFF\x03\x03\0"
    /* 1400 */ "bltla $\xFF\x03\x03\0"
    /* 1411 */ "bltla- $\x02, $\xFF\x03\x03\0"
    /* 1427 */ "bltla- $\xFF\x03\x03\0"
    /* 1439 */ "bltla+ $\x02, $\xFF\x03\x03\0"
    /* 1455 */ "bltla+ $\xFF\x03\x03\0"
    /* 1467 */ "bgtla $\x02, $\xFF\x03\x03\0"
    /* 1482 */ "bgtla $\xFF\x03\x03\0"
    /* 1493 */ "bgtla- $\x02, $\xFF\x03\x03\0"
    /* 1509 */ "bgtla- $\xFF\x03\x03\0"
    /* 1521 */ "bgtla+ $\x02, $\xFF\x03\x03\0"
    /* 1537 */ "bgtla+ $\xFF\x03\x03\0"
    /* 1549 */ "beqla $\x02, $\xFF\x03\x03\0"
    /* 1564 */ "beqla $\xFF\x03\x03\0"
    /* 1575 */ "beqla- $\x02, $\xFF\x03\x03\0"
    /* 1591 */ "beqla- $\xFF\x03\x03\0"
    /* 1603 */ "beqla+ $\x02, $\xFF\x03\x03\0"
    /* 1619 */ "beqla+ $\xFF\x03\x03\0"
    /* 1631 */ "bnela $\x02, $\xFF\x03\x03\0"
    /* 1646 */ "bnela $\xFF\x03\x03\0"
    /* 1657 */ "bnela- $\x02, $\xFF\x03\x03\0"
    /* 1673 */ "bnela- $\xFF\x03\x03\0"
    /* 1685 */ "bnela+ $\x02, $\xFF\x03\x03\0"
    /* 1701 */ "bnela+ $\xFF\x03\x03\0"
    /* 1713 */ "bltlr $\x02\0"
    /* 1722 */ "bltlr\0"
    /* 1728 */ "bltlr- $\x02\0"
    /* 1738 */ "bltlr-\0"
    /* 1745 */ "bltlr+ $\x02\0"
    /* 1755 */ "bltlr+\0"
    /* 1762 */ "bgtlr $\x02\0"
    /* 1771 */ "bgtlr\0"
    /* 1777 */ "bgtlr- $\x02\0"
    /* 1787 */ "bgtlr-\0"
    /* 1794 */ "bgtlr+ $\x02\0"
    /* 1804 */ "bgtlr+\0"
    /* 1811 */ "beqlr $\x02\0"
    /* 1820 */ "beqlr\0"
    /* 1826 */ "beqlr- $\x02\0"
    /* 1836 */ "beqlr-\0"
    /* 1843 */ "beqlr+ $\x02\0"
    /* 1853 */ "beqlr+\0"
    /* 1860 */ "bnelr $\x02\0"
    /* 1869 */ "bnelr\0"
    /* 1875 */ "bnelr- $\x02\0"
    /* 1885 */ "bnelr-\0"
    /* 1892 */ "bnelr+ $\x02\0"
    /* 1902 */ "bnelr+\0"
    /* 1909 */ "bltlrl $\x02\0"
    /* 1919 */ "bltlrl\0"
    /* 1926 */ "bltlrl- $\x02\0"
    /* 1937 */ "bltlrl-\0"
    /* 1945 */ "bltlrl+ $\x02\0"
    /* 1956 */ "bltlrl+\0"
    /* 1964 */ "bgtlrl $\x02\0"
    /* 1974 */ "bgtlrl\0"
    /* 1981 */ "bgtlrl- $\x02\0"
    /* 1992 */ "bgtlrl-\0"
    /* 2000 */ "bgtlrl+ $\x02\0"
    /* 2011 */ "bgtlrl+\0"
    /* 2019 */ "beqlrl $\x02\0"
    /* 2029 */ "beqlrl\0"
    /* 2036 */ "beqlrl- $\x02\0"
    /* 2047 */ "beqlrl-\0"
    /* 2055 */ "beqlrl+ $\x02\0"
    /* 2066 */ "beqlrl+\0"
    /* 2074 */ "bnelrl $\x02\0"
    /* 2084 */ "bnelrl\0"
    /* 2091 */ "bnelrl- $\x02\0"
    /* 2102 */ "bnelrl-\0"
    /* 2110 */ "bnelrl+ $\x02\0"
    /* 2121 */ "bnelrl+\0"
    /* 2129 */ "cmpd $\x02, $\x03\0"
    /* 2141 */ "cmpdi $\x02, $\xFF\x03\x01\0"
    /* 2156 */ "cmpld $\x02, $\x03\0"
    /* 2169 */ "cmpldi $\x02, $\xFF\x03\x04\0"
    /* 2185 */ "cmplw $\x02, $\x03\0"
    /* 2198 */ "cmplwi $\x02, $\xFF\x03\x04\0"
    /* 2214 */ "cmpw $\x02, $\x03\0"
    /* 2226 */ "cmpwi $\x02, $\xFF\x03\x01\0"
    /* 2241 */ "cntlzw $\x01, $\x02\0"
    /* 2255 */ "cntlzw. $\x01, $\x02\0"
    /* 2270 */ "crset $\x01\0"
    /* 2279 */ "crnot $\x01, $\x02\0"
    /* 2292 */ "crmove $\x01, $\x02\0"
    /* 2306 */ "crclr $\x01\0"
    /* 2315 */ "isellt $\x01, $\x02, $\x03\0"
    /* 2333 */ "iselgt $\x01, $\x02, $\x03\0"
    /* 2351 */ "iseleq $\x01, $\x02, $\x03\0"
    /* 2369 */ "mbar\0"
    /* 2374 */ "mfbr0 $\x01\0"
    /* 2383 */ "mfbr1 $\x01\0"
    /* 2392 */ "mfbr2 $\x01\0"
    /* 2401 */ "mfbr3 $\x01\0"
    /* 2410 */ "mfbr4 $\x01\0"
    /* 2419 */ "mfbr5 $\x01\0"
    /* 2428 */ "mfbr6 $\x01\0"
    /* 2437 */ "mfbr7 $\x01\0"
    /* 2446 */ "mfxer $\x01\0"
    /* 2455 */ "mfudscr $\x01\0"
    /* 2466 */ "mfrtcu $\x01\0"
    /* 2476 */ "mfrtcl $\x01\0"
    /* 2486 */ "mflr $\x01\0"
    /* 2494 */ "mfctr $\x01\0"
    /* 2503 */ "mfuamr $\x01\0"
    /* 2513 */ "mfdscr $\x01\0"
    /* 2523 */ "mfdsisr $\x01\0"
    /* 2534 */ "mfdar $\x01\0"
    /* 2543 */ "mfdec $\x01\0"
    /* 2552 */ "mfsdr1 $\x01\0"
    /* 2562 */ "mfsrr0 $\x01\0"
    /* 2572 */ "mfsrr1 $\x01\0"
    /* 2582 */ "mfcfar $\x01\0"
    /* 2592 */ "mfamr $\x01\0"
    /* 2601 */ "mfpid $\x01\0"
    /* 2610 */ "mfasr $\x01\0"
    /* 2619 */ "mfpvr $\x01\0"
    /* 2628 */ "mfspefscr $\x01\0"
    /* 2641 */ "mfdbatu $\x01, 0\0"
    /* 2655 */ "mfdbatl $\x01, 0\0"
    /* 2669 */ "mfibatu $\x01, 0\0"
    /* 2683 */ "mfibatl $\x01, 0\0"
    /* 2697 */ "mfdbatu $\x01, 1\0"
    /* 2711 */ "mfdbatl $\x01, 1\0"
    /* 2725 */ "mfibatu $\x01, 1\0"
    /* 2739 */ "mfibatl $\x01, 1\0"
    /* 2753 */ "mfdbatu $\x01, 2\0"
    /* 2767 */ "mfdbatl $\x01, 2\0"
    /* 2781 */ "mfibatu $\x01, 2\0"
    /* 2795 */ "mfibatl $\x01, 2\0"
    /* 2809 */ "mfdbatu $\x01, 3\0"
    /* 2823 */ "mfdbatl $\x01, 3\0"
    /* 2837 */ "mfibatu $\x01, 3\0"
    /* 2851 */ "mfibatl $\x01, 3\0"
    /* 2865 */ "mfppr $\x01\0"
    /* 2874 */ "mfesr $\x01\0"
    /* 2883 */ "mfdear $\x01\0"
    /* 2893 */ "mftcr $\x01\0"
    /* 2902 */ "mftbhi $\x01\0"
    /* 2912 */ "mftblo $\x01\0"
    /* 2922 */ "mfsrr2 $\x01\0"
    /* 2932 */ "mfsrr3 $\x01\0"
    /* 2942 */ "mfdccr $\x01\0"
    /* 2952 */ "mficcr $\x01\0"
    /* 2962 */ "mftbu $\x01\0"
    /* 2971 */ "mfvrsave $\x01\0"
    /* 2983 */ "mffprd $\x01, $\x02\0"
    /* 2997 */ "mffprwz $\x01, $\x02\0"
    /* 3012 */ "mtcr $\x02\0"
    /* 3020 */ "mtbr0 $\x01\0"
    /* 3029 */ "mtbr1 $\x01\0"
    /* 3038 */ "mtbr2 $\x01\0"
    /* 3047 */ "mtbr3 $\x01\0"
    /* 3056 */ "mtbr4 $\x01\0"
    /* 3065 */ "mtbr5 $\x01\0"
    /* 3074 */ "mtbr6 $\x01\0"
    /* 3083 */ "mtbr7 $\x01\0"
    /* 3092 */ "mtfsf $\x01, $\x02\0"
    /* 3105 */ "mtfsfi $\x01, $\x02\0"
    /* 3119 */ "mtfsfi. $\x01, $\x02\0"
    /* 3134 */ "mtfsf. $\x01, $\x02\0"
    /* 3148 */ "mtmsr $\x01\0"
    /* 3157 */ "mtmsrd $\x01\0"
    /* 3167 */ "mtxer $\x02\0"
    /* 3176 */ "mtudscr $\x02\0"
    /* 3187 */ "mtlr $\x02\0"
    /* 3195 */ "mtctr $\x02\0"
    /* 3204 */ "mtuamr $\x02\0"
    /* 3214 */ "mtdscr $\x02\0"
    /* 3224 */ "mtdsisr $\x02\0"
    /* 3235 */ "mtdar $\x02\0"
    /* 3244 */ "mtdec $\x02\0"
    /* 3253 */ "mtsdr1 $\x02\0"
    /* 3263 */ "mtsrr0 $\x02\0"
    /* 3273 */ "mtsrr1 $\x02\0"
    /* 3283 */ "mtcfar $\x02\0"
    /* 3293 */ "mtamr $\x02\0"
    /* 3302 */ "mtpid $\x02\0"
    /* 3311 */ "mtasr $\x02\0"
    /* 3320 */ "mttbl $\x02\0"
    /* 3329 */ "mttbu $\x02\0"
    /* 3338 */ "mtspefscr $\x02\0"
    /* 3351 */ "mtdbatu 0, $\x02\0"
    /* 3365 */ "mtdbatl 0, $\x02\0"
    /* 3379 */ "mtibatu 0, $\x02\0"
    /* 3393 */ "mtibatl 0, $\x02\0"
    /* 3407 */ "mtdbatu 1, $\x02\0"
    /* 3421 */ "mtdbatl 1, $\x02\0"
    /* 3435 */ "mtibatu 1, $\x02\0"
    /* 3449 */ "mtibatl 1, $\x02\0"
    /* 3463 */ "mtdbatu 2, $\x02\0"
    /* 3477 */ "mtdbatl 2, $\x02\0"
    /* 3491 */ "mtibatu 2, $\x02\0"
    /* 3505 */ "mtibatl 2, $\x02\0"
    /* 3519 */ "mtdbatu 3, $\x02\0"
    /* 3533 */ "mtdbatl 3, $\x02\0"
    /* 3547 */ "mtibatu 3, $\x02\0"
    /* 3561 */ "mtibatl 3, $\x02\0"
    /* 3575 */ "mtppr $\x02\0"
    /* 3584 */ "mtesr $\x02\0"
    /* 3593 */ "mtdear $\x02\0"
    /* 3603 */ "mttcr $\x02\0"
    /* 3612 */ "mttbhi $\x02\0"
    /* 3622 */ "mttblo $\x02\0"
    /* 3632 */ "mtsrr2 $\x02\0"
    /* 3642 */ "mtsrr3 $\x02\0"
    /* 3652 */ "mtdccr $\x02\0"
    /* 3662 */ "mticcr $\x02\0"
    /* 3672 */ "mtvrsave $\x01\0"
    /* 3684 */ "mtfprd $\x01, $\x02\0"
    /* 3698 */ "mtfprwa $\x01, $\x02\0"
    /* 3713 */ "mtfprwz $\x01, $\x02\0"
    /* 3728 */ "not $\x01, $\x02\0"
    /* 3739 */ "not. $\x01, $\x02\0"
    /* 3751 */ "mr $\x01, $\x02\0"
    /* 3761 */ "mr. $\x01, $\x02\0"
    /* 3772 */ "nop\0"
    /* 3776 */ "rfebb\0"
    /* 3782 */ "rotld $\x01, $\x02, $\x03\0"
    /* 3799 */ "rotld. $\x01, $\x02, $\x03\0"
    /* 3817 */ "rotldi $\x01, $\x02, $\xFF\x03\x05\0"
    /* 3837 */ "clrldi $\x01, $\x02, $\xFF\x04\x05\0"
    /* 3857 */ "rotldi. $\x01, $\x02, $\xFF\x03\x05\0"
    /* 3878 */ "clrldi. $\x01, $\x02, $\xFF\x04\x05\0"
    /* 3899 */ "rotlwi $\x01, $\x02, $\xFF\x03\x06\0"
    /* 3919 */ "clrlwi $\x01, $\x02, $\xFF\x04\x06\0"
    /* 3939 */ "rotlwi. $\x01, $\x02, $\xFF\x03\x06\0"
    /* 3960 */ "clrlwi. $\x01, $\x02, $\xFF\x04\x06\0"
    /* 3981 */ "rotlw $\x01, $\x02, $\x03\0"
    /* 3998 */ "rotlw. $\x01, $\x02, $\x03\0"
    /* 4016 */ "sc\0"
    /* 4019 */ "sub $\x01, $\x03, $\x02\0"
    /* 4034 */ "sub. $\x01, $\x03, $\x02\0"
    /* 4050 */ "subc $\x01, $\x03, $\x02\0"
    /* 4066 */ "subc. $\x01, $\x03, $\x02\0"
    /* 4083 */ "sync\0"
    /* 4088 */ "lwsync\0"
    /* 4095 */ "ptesync\0"
    /* 4103 */ "tdlt $\x02, $\x03\0"
    /* 4115 */ "tdeq $\x02, $\x03\0"
    /* 4127 */ "tdgt $\x02, $\x03\0"
    /* 4139 */ "tdne $\x02, $\x03\0"
    /* 4151 */ "tdllt $\x02, $\x03\0"
    /* 4164 */ "tdlgt $\x02, $\x03\0"
    /* 4177 */ "tdu $\x02, $\x03\0"
    /* 4188 */ "tdlti $\x02, $\xFF\x03\x01\0"
    /* 4203 */ "tdeqi $\x02, $\xFF\x03\x01\0"
    /* 4218 */ "tdgti $\x02, $\xFF\x03\x01\0"
    /* 4233 */ "tdnei $\x02, $\xFF\x03\x01\0"
    /* 4248 */ "tdllti $\x02, $\xFF\x03\x01\0"
    /* 4264 */ "tdlgti $\x02, $\xFF\x03\x01\0"
    /* 4280 */ "tdui $\x02, $\xFF\x03\x01\0"
    /* 4294 */ "tend.\0"
    /* 4300 */ "tendall.\0"
    /* 4309 */ "tlbie $\x02\0"
    /* 4318 */ "tlbrehi $\x01, $\x02\0"
    /* 4333 */ "tlbrelo $\x01, $\x02\0"
    /* 4348 */ "tlbwehi $\x01, $\x02\0"
    /* 4363 */ "tlbwelo $\x01, $\x02\0"
    /* 4378 */ "tsuspend.\0"
    /* 4388 */ "tresume.\0"
    /* 4397 */ "trap\0"
    /* 4402 */ "twlt $\x02, $\x03\0"
    /* 4414 */ "tweq $\x02, $\x03\0"
    /* 4426 */ "twgt $\x02, $\x03\0"
    /* 4438 */ "twne $\x02, $\x03\0"
    /* 4450 */ "twllt $\x02, $\x03\0"
    /* 4463 */ "twlgt $\x02, $\x03\0"
    /* 4476 */ "twu $\x02, $\x03\0"
    /* 4487 */ "twlti $\x02, $\xFF\x03\x01\0"
    /* 4502 */ "tweqi $\x02, $\xFF\x03\x01\0"
    /* 4517 */ "twgti $\x02, $\xFF\x03\x01\0"
    /* 4532 */ "twnei $\x02, $\xFF\x03\x01\0"
    /* 4547 */ "twllti $\x02, $\xFF\x03\x01\0"
    /* 4563 */ "twlgti $\x02, $\xFF\x03\x01\0"
    /* 4579 */ "twui $\x02, $\xFF\x03\x01\0"
    /* 4593 */ "vnot $\x01, $\x02\0"
    /* 4605 */ "vmr $\x01, $\x02\0"
    /* 4616 */ "wait\0"
    /* 4621 */ "waitrsv\0"
    /* 4629 */ "waitimpl\0"
    /* 4638 */ "xnop\0"
    /* 4643 */ "xvmovdp $\x01, $\x02\0"
    /* 4658 */ "xvmovsp $\x01, $\x02\0"
    /* 4673 */ "xxspltd $\x01, $\x02, 0\0"
    /* 4691 */ "xxspltd $\x01, $\x02, 1\0"
    /* 4709 */ "xxmrghd $\x01, $\x02, $\x03\0"
    /* 4728 */ "xxmrgld $\x01, $\x02, $\x03\0"
    /* 4747 */ "xxswapd $\x01, $\x02\0"
    /* 4762 */ "bt $\x02, $\xFF\x03\x02\0"
    /* 4774 */ "bf $\x02, $\xFF\x03\x02\0"
    /* 4786 */ "bt- $\x02, $\xFF\x03\x02\0"
    /* 4799 */ "bf- $\x02, $\xFF\x03\x02\0"
    /* 4812 */ "bt+ $\x02, $\xFF\x03\x02\0"
    /* 4825 */ "bf+ $\x02, $\xFF\x03\x02\0"
    /* 4838 */ "bdnzt $\x02, $\xFF\x03\x02\0"
    /* 4853 */ "bdnzf $\x02, $\xFF\x03\x02\0"
    /* 4868 */ "bdzt $\x02, $\xFF\x03\x02\0"
    /* 4882 */ "bdzf $\x02, $\xFF\x03\x02\0"
    /* 4896 */ "bta $\x02, $\xFF\x03\x03\0"
    /* 4909 */ "bfa $\x02, $\xFF\x03\x03\0"
    /* 4922 */ "bta- $\x02, $\xFF\x03\x03\0"
    /* 4936 */ "bfa- $\x02, $\xFF\x03\x03\0"
    /* 4950 */ "bta+ $\x02, $\xFF\x03\x03\0"
    /* 4964 */ "bfa+ $\x02, $\xFF\x03\x03\0"
    /* 4978 */ "bdnzta $\x02, $\xFF\x03\x03\0"
    /* 4994 */ "bdnzfa $\x02, $\xFF\x03\x03\0"
    /* 5010 */ "bdzta $\x02, $\xFF\x03\x03\0"
    /* 5025 */ "bdzfa $\x02, $\xFF\x03\x03\0"
    /* 5040 */ "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5060 */ "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5080 */ "bcctr $\xFF\x01\x06, $\x02\0"
    /* 5095 */ "btctr $\x02\0"
    /* 5104 */ "bfctr $\x02\0"
    /* 5113 */ "btctr- $\x02\0"
    /* 5123 */ "bfctr- $\x02\0"
    /* 5133 */ "btctr+ $\x02\0"
    /* 5143 */ "bfctr+ $\x02\0"
    /* 5153 */ "bcctrl $\xFF\x01\x06, $\x02\0"
    /* 5169 */ "btctrl $\x02\0"
    /* 5179 */ "bfctrl $\x02\0"
    /* 5189 */ "btctrl- $\x02\0"
    /* 5200 */ "bfctrl- $\x02\0"
    /* 5211 */ "btctrl+ $\x02\0"
    /* 5222 */ "bfctrl+ $\x02\0"
    /* 5233 */ "btl $\x02, $\xFF\x03\x02\0"
    /* 5246 */ "bfl $\x02, $\xFF\x03\x02\0"
    /* 5259 */ "btl- $\x02, $\xFF\x03\x02\0"
    /* 5273 */ "bfl- $\x02, $\xFF\x03\x02\0"
    /* 5287 */ "btl+ $\x02, $\xFF\x03\x02\0"
    /* 5301 */ "bfl+ $\x02, $\xFF\x03\x02\0"
    /* 5315 */ "bdnztl $\x02, $\xFF\x03\x02\0"
    /* 5331 */ "bdnzfl $\x02, $\xFF\x03\x02\0"
    /* 5347 */ "bdztl $\x02, $\xFF\x03\x02\0"
    /* 5362 */ "bdzfl $\x02, $\xFF\x03\x02\0"
    /* 5377 */ "btla $\x02, $\xFF\x03\x03\0"
    /* 5391 */ "bfla $\x02, $\xFF\x03\x03\0"
    /* 5405 */ "btla- $\x02, $\xFF\x03\x03\0"
    /* 5420 */ "bfla- $\x02, $\xFF\x03\x03\0"
    /* 5435 */ "btla+ $\x02, $\xFF\x03\x03\0"
    /* 5450 */ "bfla+ $\x02, $\xFF\x03\x03\0"
    /* 5465 */ "bdnztla $\x02, $\xFF\x03\x03\0"
    /* 5482 */ "bdnzfla $\x02, $\xFF\x03\x03\0"
    /* 5499 */ "bdztla $\x02, $\xFF\x03\x03\0"
    /* 5515 */ "bdzfla $\x02, $\xFF\x03\x03\0"
    /* 5531 */ "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5552 */ "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5573 */ "bclr $\xFF\x01\x06, $\x02\0"
    /* 5587 */ "btlr $\x02\0"
    /* 5595 */ "bflr $\x02\0"
    /* 5603 */ "btlr- $\x02\0"
    /* 5612 */ "bflr- $\x02\0"
    /* 5621 */ "btlr+ $\x02\0"
    /* 5630 */ "bflr+ $\x02\0"
    /* 5639 */ "bdnztlr $\x02\0"
    /* 5650 */ "bdnzflr $\x02\0"
    /* 5661 */ "bdztlr $\x02\0"
    /* 5671 */ "bdzflr $\x02\0"
    /* 5681 */ "bclrl $\xFF\x01\x06, $\x02\0"
    /* 5696 */ "btlrl $\x02\0"
    /* 5705 */ "bflrl $\x02\0"
    /* 5714 */ "btlrl- $\x02\0"
    /* 5724 */ "bflrl- $\x02\0"
    /* 5734 */ "btlrl+ $\x02\0"
    /* 5744 */ "bflrl+ $\x02\0"
    /* 5754 */ "bdnztlrl $\x02\0"
    /* 5766 */ "bdnzflrl $\x02\0"
    /* 5778 */ "bdztlrl $\x02\0"
    /* 5789 */ "bdzflrl $\x02\0"
    /* 5800 */ "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5820 */ "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5840 */ "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
    /* 5859 */ "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x02\0"
  ;

#ifndef NDEBUG
  static struct SortCheck {
    SortCheck(ArrayRef<PatternsForOpcode> OpToPatterns) {
      assert(std::is_sorted(
                 OpToPatterns.begin(), OpToPatterns.end(),
                 [](const PatternsForOpcode &L, const PatternsForOpcode &R) {
                   return L.Opcode < R.Opcode;
                 }) &&
             "tablegen failed to sort opcode patterns");
    }
  } sortCheckVar(OpToPatterns);
#endif

  AliasMatchingData M {
    makeArrayRef(OpToPatterns),
    makeArrayRef(Patterns),
    makeArrayRef(Conds),
    StringRef(AsmStrings, array_lengthof(AsmStrings)),
    nullptr,
  };
  const char *AsmString = matchAliasPatterns(MI, &STI, M);
  if (!AsmString) return false;

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, Address, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, uint64_t Address, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printS16ImmOperand(MI, OpIdx, STI, OS);
    break;
  case 1:
    printBranchOperand(MI, Address, OpIdx, STI, OS);
    break;
  case 2:
    printAbsBranchOperand(MI, OpIdx, STI, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, STI, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, STI, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, STI, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
